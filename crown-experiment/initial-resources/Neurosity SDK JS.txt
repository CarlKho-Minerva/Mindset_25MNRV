Directory structure:
└── neurosity-neurosity-sdk-js/
    ├── README.md
    ├── CHANGELOG.md
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── jest.config.js
    ├── package.json
    ├── rollup.config.js
    ├── tsconfig.cjs.json
    ├── tsconfig.esm.json
    ├── tsconfig.json
    ├── tsconfig.test.json
    ├── typedoc.json
    ├── .prettierrc.json
    ├── docs/
    │   ├── overview.md
    │   ├── resources.md
    │   ├── api/
    │   │   ├── authentication.md
    │   │   ├── bluetooth-react-native.md
    │   │   ├── bluetooth-web.md
    │   │   ├── brainwaves.md
    │   │   ├── calm.md
    │   │   ├── device-selection.md
    │   │   ├── disconnect.md
    │   │   ├── focus.md
    │   │   ├── haptics.md
    │   │   ├── info.md
    │   │   ├── kinesis.md
    │   │   ├── oauth.md
    │   │   ├── osc.md
    │   │   ├── predictions.md
    │   │   ├── settings.md
    │   │   ├── signal-quality.md
    │   │   ├── status.md
    │   │   ├── streaming.md
    │   │   └── v6.md
    │   ├── guides/
    │   │   ├── ethics.md
    │   │   ├── importing.md
    │   │   ├── signal.md
    │   │   └── training.md
    │   └── tutorials/
    │       ├── your-first-node-app.md
    │       └── your-first-web-app.md
    ├── examples/
    │   ├── browser/
    │   │   ├── auth.html
    │   │   ├── cloud.html
    │   │   ├── index.html
    │   │   └── training.html
    │   └── node/
    │       ├── accelerometer.js
    │       ├── action.js
    │       ├── apiProps.js
    │       ├── authCustomToken.js
    │       ├── authEmailPassword.js
    │       ├── authIdToken.js
    │       ├── authInheritance.js
    │       ├── autoSelectDevice.js
    │       ├── brainwaves.js
    │       ├── calm.js
    │       ├── clients.js
    │       ├── cloud.js
    │       ├── createAccount.js
    │       ├── createCustomToken.js
    │       ├── createSkill.js
    │       ├── deleteAccount.js
    │       ├── focus.js
    │       ├── getDevices.js
    │       ├── haptics.js
    │       ├── index.js
    │       ├── kinesis.js
    │       ├── manuallySelectDevice.js
    │       ├── markers.js
    │       ├── multipleDevices.js
    │       ├── oauth.js
    │       ├── osVersion.js
    │       ├── predictions.js
    │       ├── rawUnfiltered.js
    │       ├── settings.js
    │       ├── signalQuality.js
    │       ├── skill.js
    │       ├── status.js
    │       ├── subscriptions.js
    │       ├── switchSelectedDevice.js
    │       ├── timesync.js
    │       ├── training.js
    │       └── transferDevice.js
    ├── src/
    │   ├── Neurosity.ts
    │   ├── index.ts
    │   ├── __tests__/
    │   │   ├── Neurosity.test.ts
    │   │   ├── WebBluetoothTransport.test.ts
    │   │   ├── accelerometer.test.ts
    │   │   ├── auth.test.ts
    │   │   ├── brainwaves.test.ts
    │   │   ├── device.test.ts
    │   │   ├── haptics.test.ts
    │   │   ├── metrics.test.ts
    │   │   ├── oauth.test.ts
    │   │   ├── settings.test.ts
    │   │   ├── setup.ts
    │   │   ├── streaming.test.ts
    │   │   ├── timesync.test.ts
    │   │   ├── utils.test.ts
    │   │   └── setup/
    │   │       └── webBluetooth.setup.ts
    │   ├── api/
    │   │   ├── index.ts
    │   │   ├── bluetooth/
    │   │   │   ├── BluetoothClient.ts
    │   │   │   ├── BluetoothTransport.ts
    │   │   │   ├── constants.ts
    │   │   │   ├── index.ts
    │   │   │   ├── react-native/
    │   │   │   │   ├── ReactNativeTransport.ts
    │   │   │   │   └── types/
    │   │   │   │       ├── BleManagerTypes.ts
    │   │   │   │       └── ReactNativeTypes.ts
    │   │   │   ├── types/
    │   │   │   │   └── index.ts
    │   │   │   ├── utils/
    │   │   │   │   ├── binaryBufferToEpoch.ts
    │   │   │   │   ├── create6DigitPin.ts
    │   │   │   │   ├── csvBufferToEpoch.ts
    │   │   │   │   ├── decodeJSONChunks.ts
    │   │   │   │   ├── osHasBluetoothSupport.ts
    │   │   │   │   ├── stitch.ts
    │   │   │   │   └── textCodec.ts
    │   │   │   └── web/
    │   │   │       ├── WebBluetoothTransport.ts
    │   │   │       ├── isMaybeWebWorkerContext.ts
    │   │   │       └── isWebBluetoothSupported.ts
    │   │   ├── firebase/
    │   │   │   ├── FirebaseApp.ts
    │   │   │   ├── FirebaseDevice.ts
    │   │   │   ├── FirebaseUser.ts
    │   │   │   ├── config.ts
    │   │   │   ├── deviceStore.ts
    │   │   │   └── index.ts
    │   │   └── https/
    │   │       ├── config.ts
    │   │       ├── createOAuthURL.ts
    │   │       ├── getOAuthToken.ts
    │   │       └── utils.ts
    │   ├── subscriptions/
    │   │   └── SubscriptionManager.ts
    │   ├── timesync/
    │   │   ├── Timesync.ts
    │   │   └── index.ts
    │   ├── types/
    │   │   ├── accelerometer.ts
    │   │   ├── actions.ts
    │   │   ├── awareness.ts
    │   │   ├── brainwaves.ts
    │   │   ├── calm.ts
    │   │   ├── client.ts
    │   │   ├── credentials.ts
    │   │   ├── deviceInfo.ts
    │   │   ├── epoch.ts
    │   │   ├── experiment.ts
    │   │   ├── focus.ts
    │   │   ├── hapticEffects.ts
    │   │   ├── kinesis.ts
    │   │   ├── marker.ts
    │   │   ├── metrics.ts
    │   │   ├── oauth.ts
    │   │   ├── options.ts
    │   │   ├── sample.ts
    │   │   ├── settings.ts
    │   │   ├── signalQuality.ts
    │   │   ├── skill.ts
    │   │   ├── status.ts
    │   │   ├── streaming.ts
    │   │   ├── subscriptions.ts
    │   │   ├── training.ts
    │   │   └── user.ts
    │   └── utils/
    │       ├── errors.ts
    │       ├── filterInternalKeys.ts
    │       ├── hapticEffects.ts
    │       ├── heartbeat.ts
    │       ├── is-node.ts
    │       ├── metrics.ts
    │       ├── oauth.ts
    │       ├── pick.ts
    │       ├── pipes.ts
    │       ├── platform.ts
    │       ├── subscription.ts
    │       ├── transferDevice.ts
    │       └── whileOnline.ts
    ├── website/
    │   ├── docusaurus.config.js
    │   ├── package-lock.json
    │   ├── package.json
    │   ├── sidebars.json
    │   ├── src/
    │   │   ├── components/
    │   │   │   └── StreamingModes.js
    │   │   ├── css/
    │   │   │   └── customTheme.css
    │   │   └── pages/
    │   │       └── index.js
    │   └── static/
    │       ├── css/
    │       │   ├── code-block-buttons.css
    │       │   └── custom.css
    │       ├── fonts/
    │       │   ├── Eina02-Regular.ttf
    │       │   └── Eina02-SemiBold.ttf
    │       ├── img/
    │       │   ├── api/
    │       │   └── tutorial/
    │       └── js/
    │           └── code-block-buttons.js
    ├── .devcontainer/
    │   ├── Dockerfile
    │   └── devcontainer.json
    └── .github/
        └── workflows/
            └── node.js.yml

================================================
File: README.md
================================================
# Neurosity SDK

The Neurosity software processes and manages the data produced by [Neurosity headsets](https://neurosity.co) which measures, tracks and monitors EEG brainwaves.

This repository is where [Neurosity](https://neurosity.co) develops the SDK. This source code is available to everyone under the standard [MIT license](./LICENSE) and the documentation is can be found on [docs.neurosity.co](https://docs.neurosity.co/). Thank you for visiting this repository.

This README file is a hub to give you some information about the SDK. At a high-level we seek to use the SDK to provide the following solutions:

- Universal JavaScript support: Node/Browser/Electron
- Event-driven multi-client real-time architecture
- Time synchronize clients to Neurosity devices

## Contributing

There are many ways you can participate in the project, for example:

- [Submit bugs and feature requests](https://github.com/neurosity/neurosity-sdk-js/issues), and help us verify as they are checked in.
- Review [source code changes](https://github.com/neurosity/neurosity-sdk-js/pulls).
- Review the [documentation](https://github.com/neurosity/neurosity-sdk-js/tree/master/website) and make pull requests for anything from typos to new content.

If you are interested in fixing issues and contributing directly to the code base,
please see the document [How to Contribute](https://github.com/Neurosity/neurosity-sdk-js/wiki/How-to-Contribute), which covers the following:

- [How to install and run from source](https://github.com/neurosity/neurosity-sdk-js/wiki/How-to-Contribute#contributing-to-notionjs)
- [Coding guidelines](https://github.com/neurosity/neurosity-sdk-js/wiki/Coding-Guidelines)
- [Submitting pull requests](https://github.com/neurosity/neurosity-sdk-js/wiki/How-to-Contribute#pull-requests)
- [Finding an issue to work on](https://github.com/neurosity/neurosity-sdk-js/wiki/How-to-Contribute#where-to-contribute)

## Feedback

- Ask a question on [Stack Overflow](https://stackoverflow.com/questions/tagged/neurosity-sdk-js)
- [Request a new feature](https://github.com/neurosity/neurosity-sdk-js/blob/master/CONTRIBUTING.md)
- Discuss a new feature on our [community](https://support.neurosity.co/hc/en-us/community/topics)
- Up vote [popular feature requests](https://github.com/neurosity/neurosity-sdk-js/issues?q=is%3Aopen+is%3Aissue+label%3Afeature-request+sort%3Areactions-%2B1-desc)
- [File an issue](https://github.com/neurosity/neurosity-sdk-js/issues)
- Follow [@neurosity](https://twitter.com/neurosity) and let us know what you think!

## Code of Conduct

This project has adopted a [Code of Conduct](https://github.com/neurosity/neurosity-sdk-js/blob/master/CODE_OF_CONDUCT.md). Contact [opensource@neurosity.co](mailto:opensource@neurosity.co) with any additional questions or comments.

## License

Copyright (c) Neurosity, Inc. All rights reserved.

Licensed under the [MIT license](./LICENSE).



================================================
File: CHANGELOG.md
================================================
# v5.0.0

- FEAT: Auto & manual device selection via `neurosity.selectDevice(...)` method
- FEAT: new methods: `neurosity.getDevices()` and `neurosity.onDeviceChange()`
- FIX: #46 Notion sends 1 packet of data even though it is asleep
- FIX: only send timesync actions if and when device is online

# v4.0.0

- Added types
- Improved documentation (Reference)

# v3.10.0

- Added periodic device status update call while subscribed to status

# v3.9.0

- Added clients connections and remove them when offline

# v3.8.1

### Package Updates

- Update IPK to v1.7.0



================================================
File: CODE_OF_CONDUCT.md
================================================
# Code of Conduct

## Purpose

It is our hope that anyone is able to contribute to this project regardless of their background. Thus, we hope to provide a safe, welcoming, and warmly geeky environment for everybody, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion (or lack thereof).

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or
  advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic
  address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at [contact@neurosity.co](mailto:contact@neurosity.co). All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at [http://contributor-covenant.org/version/1/4][version]

[homepage]: http://contributor-covenant.org
[version]: http://contributor-covenant.org/version/1/4/



================================================
File: CONTRIBUTING.md
================================================
# Contributing

:tada::clinking_glasses: First off, thanks for taking the time to contribute! :tada::clinking_glasses:

Contributions are always welcome, no matter how small.

The following is a small set of guidelines for how to contribute to the project

## Where to start

### Code of Conduct

This project adheres to the Contributor Covenant [Code of Conduct](CODE_OF_CONDUCT.md).
By participating you are expected to adhere to these expectations. Please report unacceptable behaviour to [contact@neurosity.co](mailto:contact@neurosity.co).

### Contributing on Github

If you're new to Git and want to learn how to fork this repo, make your own additions, and include those additions in the master version of this project, check out this [great tutorial](http://blog.davidecoppola.com/2016/11/howto-contribute-to-open-source-project-on-github/).

### Community

This project is maintained by [Neurosity](https://neurosity.co). Join the [Neurosity Discord Chat](https://discord.gg/E4dvX6g), where discussions about the Neurosity SDK take place.

## How can I contribute?

This is currently a small, humble project so our contribution process is rather casual. If there's a feature you'd be interested in building, go ahead! Let us know on the [Neurosity Discord](https://discord.gg/E4dvX6g) or [open an issue](../../issues) so others can follow along and we'll support you as much as we can. When you're finished submit a pull request to the master branch referencing the specific issue you addressed.

If you find a bug, or have a suggestion on how to improve the project, please fill out a [Github issue](../../issues).

### Steps to Contribute

1. Fork it!
2. Create your feature branch: `git checkout -b my-new-feature`
3. Make changes
4. Commit your changes: `git commit -m 'Add some feature'`
5. Push to the branch: `git push origin my-new-feature`
6. Submit a pull request!



================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2019 Neurosity, Inc

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: jest.config.js
================================================
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
  preset: "ts-jest",
  testEnvironment: "node",
  testMatch: ["**/__tests__/**/*.test.ts"],
  collectCoverage: true,
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  },
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        isolatedModules: true,
        tsconfig: {
          target: "es2020"
        },
        diagnostics: {
          ignoreCodes: [
            2345, // Argument type not assignable
            2322, // Type not assignable
            2531, // Object is possibly null
            2532, // Object is possibly undefined
            7053 // Element implicitly has any type
          ]
        }
      }
    ]
  }
};



================================================
File: package.json
================================================
{
  "name": "@neurosity/sdk",
  "version": "6.5.10",
  "description": "Neurosity SDK",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "browser": "dist/browser/neurosity.js",
  "typings": "dist/esm/index.d.ts",
  "scripts": {
    "prebuild": "npm run clean",
    "build": "npm run lint && npm run build:cjs && npm run build:esm && npm run build:browser && npm run build:electron && npm run build:examples",
    "build:cjs": "tsc -p tsconfig.cjs.json",
    "build:docs": "npm run build:typedoc && cd website && npm install && npm run build",
    "build:typedoc": "del docs/reference && typedoc",
    "build:esm": "tsc -p tsconfig.esm.json && npm run build:esm:bundle",
    "build:esm:bundle": "rollup -c",
    "build:browser": "parcel build ./src/index.ts --target browser --out-dir dist/browser --out-file neurosity.js && npm run build:browser:iife",
    "build:browser:iife": "rollup ./dist/esm/neurosity.mjs --file dist/browser/neurosity.iife.js --format iife --name 'Neurosity'",
    "build:electron": "parcel build ./src/index.ts --target electron --out-dir dist/electron",
    "build:examples": "copyfiles -f ./dist/esm/*.mjs ./dist/browser/*.js ./dist/examples && parcel build ./examples/browser/index.html --target browser --out-dir dist/examples",
    "serve:examples": "lite-server --baseDir=./dist/examples",
    "examples:browser": "npm run build:esm && npm run build:examples && parcel watch ./examples/browser/index.html --out-dir dist/examples | npm run serve:examples",
    "examples:node": "npm run build:cjs && node ./examples/node",
    "start": "tsc -w",
    "clean": "del dist",
    "prepublishOnly": "npm run build",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint . --ext .ts",
    "lint:fix": "eslint . --ext .ts --fix"
  },
  "files": [
    "dist"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/neurosity/neurosity-sdk-js.git"
  },
  "keywords": [
    "neurosity",
    "api",
    "client",
    "neurosity"
  ],
  "engines": {
    "node": ">=4"
  },
  "author": "Alex Castillo",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/neurosity/neurosity-sdk-js/issues"
  },
  "homepage": "https://docs.neurosity.co",
  "dependencies": {
    "@neurosity/ipk": "^2.12.0",
    "axios": "^1.6.2",
    "buffer": "^6.0.3",
    "fast-deep-equal": "^3.1.3",
    "firebase": "^8.10.1",
    "outliers": "0.0.3",
    "rxjs": "^7.5.6",
    "semver": "^7.3.8"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "^20.10.6",
    "@types/web-bluetooth": "^0.0.16",
    "@typescript-eslint/eslint-plugin": "^8.19.0",
    "@typescript-eslint/parser": "^8.19.0",
    "copyfiles": "^2.3.0",
    "del-cli": "^1.1.0",
    "dotenv": "^6.0.0",
    "esbuild": "^0.15.9",
    "eslint": "^9.17.0",
    "inquirer": "^6.0.0",
    "jest": "^29.7.0",
    "lite-server": "^2.6.1",
    "parcel": "^1.12.4",
    "parcel-bundler": "^1.12.4",
    "rollup": "^0.61.2",
    "rollup-plugin-commonjs": "^9.1.3",
    "rollup-plugin-node-resolve": "^3.3.0",
    "ts-jest": "^29.2.5",
    "tsx": "^4.7.0",
    "typedoc": "^0.17.4",
    "typedoc-plugin-internal-external": "^2.0.2",
    "typedoc-plugin-markdown": "^2.2.17",
    "typescript": "^4.8.3"
  }
}



================================================
File: rollup.config.js
================================================
import resolve from "rollup-plugin-node-resolve";
import commonjs from "rollup-plugin-commonjs";

export default {
  input: "dist/esm/index.js",
  output: {
    file: "dist/esm/neurosity.mjs",
    format: "es",
    name: "Neurosity"
  },
  plugins: [
    resolve({
      module: true,
      jsnext: true,
      main: true,
      browser: true
    }),
    commonjs({
      include: "node_modules/**"
    })
  ]
};



================================================
File: tsconfig.cjs.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/cjs",
    "module": "commonjs"
  }
}



================================================
File: tsconfig.esm.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm",
    "module": "es2015"
  }
}



================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es2023",
    "module": "es2020",
    "moduleResolution": "node",
    "declaration": true,
    "sourceMap": true,
    "outDir": "./dist/esm",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "types": ["jest", "node", "web-bluetooth"],
    "lib": ["es2020", "dom"]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}



================================================
File: tsconfig.test.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "module": "commonjs",
    "types": ["jest", "node", "web-bluetooth"],
    "lib": ["es2020", "dom"],
    "sourceMap": true,
    "target": "es2020"
  },
  "include": ["src/**/*.ts", "src/**/*.test.ts"],
  "exclude": ["node_modules", "dist"]
} 


================================================
File: typedoc.json
================================================
{
  "mode": "file",
  "out": "./docs/reference",
  "toc": ["classes/neurosity"],
  "includes": "./src",
  "exclude": [
    "**/timesync/**/*.ts",
    "**/skills/**/*.ts",
    "**/api/**/*.ts",
    "**/utils/**/*.ts"
  ],
  "excludeExternals": true,
  "excludeNotExported": false,
  "excludePrivate": true,
  "excludeProtected": true,
  "readme": "none",
  "theme": "docusaurus",
  "disableOutputCheck": true,
  "ignoreCompilerErrors": true,
  "plugin": "typedoc-plugin-markdown"
}



================================================
File: .prettierrc.json
================================================
{
  "trailingComma": "none"
}



================================================
File: docs/overview.md
================================================
---
id: overview
title: Neurosity SDK
---

The Neurosity software processes and manages the data produced by [Neurosity headsets](https://neurosity.co) which measures, tracks and monitors EEG brainwaves.

The SDK is built with privacy and simplicity in mind. Our mission is to build the next major computing platform. A platform that learns from you. The first step in building this platform is to make applications that add value to people's lives.

We've created the SDK to empower developers to build neuro-driven and accessible apps, quickly and easily.

We know some of the best apps will be written by the community, so we've open-sourced the SDK to provide visibility and transparency to our users.

This documentation describes:

- How to authenticate, query, train, and use Neurosity devices
- How to take advantage of the SDK
- Where to find guides and code samples to help you get started

Jump right over to building your first:

- [Web App](tutorials/your-first-web-app)
- [Node App](tutorials/your-first-node-app)

## What can the SDK do?

Here are some examples of what you can achieve with the SDK:

- Authenticate and access Neurosity devices - [Authentication](api/authentication)
- Allow Neurosity users to connect their account to your third-party app - [OAuth](api/oauth)
- Get device info and status - [Info](api/info) or [Status](api/status)
- Check signal quality - [Signal Quality](api/signal-quality)
- Get a persons's mental states metrics - [Calm](api/calm) or [Focus](api/focus)
- Train a new motor-based thought - [Training](guides/training)
- Use a trained thought for control - [Kinesis](api/kinesis)
- Interact with system haptics - [Haptics](api/haptics)

## How to use the SDK?

Building a good application with the SDK can take a lot of effort. Here is what each section of the API docs can help you with:

- **Get Started** teaches fundamental concepts for using the SDK
- **Guides** includes in-depth guides on various SDK development topics, such as [ethics](guides/ethics) and [training](guides/training).
- **References** contains exhaustive references for the [SDK](reference/classes/neurosity).

## Looking for help?

If you have questions for extension development, try asking on:

- [Discord Community](https://neurosity.co/discord): Public chatroom for Neurosity developers. Some Neurosity team members chime in conversations.
- [Feedback Portal](https://feedback.neurosity.co): Have a feature request? Found a bug? Submit your feedback to us.
- [Knowledge Base](https://support.neurosity.co): There are over a dozen articles for getting started and developing with the Neurosity SDK.

If you have questions or issues related to the Neurosity SDK, please open new issues at [Neurosity/neurosity-sdk-js](https://github.com/neurosity/neurosity-sdk-js) as well.



================================================
File: docs/resources.md
================================================
---
id: resources
title: Resources
---

## Online Community

For real-time help and discussions, join the Neurosity Discord Community chat at [https://neurosity.co/discord](https://neurosity.co/discord).

## Support

Have a feature request? Found a bug? Submit your feedback at [https://feedback.neurosity.co](https://feedback.neurosity.co).

## Knowledge Base

Read our knowledge base at [https://support.neurosity.co](https://support.neurosity.co).



================================================
File: docs/api/authentication.md
================================================
---
id: authentication
title: Authentication
---

We take data privacy very seriously at Neurosity. Should you find a bug or vulnerability, please [submit a request](https://support.neurosity.co), and we will take your inquiry seriously and work as fast as possible to fix the issue for all.

There are two ways to authenticate with Neurosity: Email and password and ID Token

### Email and Password

When you sign up for an account on [console.neurosity.co](https://console.neurosity.co/) and claim a device you have three new important items: `deviceId`, `email`, and `password`. If your device is claimed by another user, you will not be able to authenticate with it. If your device is unclaimed, you will not be able to authenticate with it, you will need to claim it on [console.neurosity.co](https://console.neurosity.co/).

```js
import { Neurosity } from "@neurosity/sdk";

main();

async function main() {
  const neurosity = new Neurosity();

  const user = await neurosity
    .login({
      email: "hans.berger@neurosity.co",
      password: "eegDisc0verer!"
    })
    .catch((error) => {
      console.log("Log in error", error);
    });

  if (user) {
    console.log("logged in!");
  } else {
    return;
  }

  await neurosity.logout().catch((error) => {
    console.log("Log out error", error);
  });

  console.log("logged out!");
}
```

### ID Token

There are times when you will want to ID Token to authenticate a Neurosity device.

```js
import { Neurosity } from "@neurosity/sdk";

main();

async function main() {
  const neurosity = new Neurosity();

  await neurosity
    .login({
      idToken: process.env.NEUROSITY_ID_TOKEN,
      providerId: process.env.NEUROSITY_PROVIDER_ID
    })
    .catch((error) => {
      console.log("error", error);
    });
  // logged in!
}
```



================================================
File: docs/api/bluetooth-react-native.md
================================================
---
id: bluetooth-react-native
title: Bluetooth for React Native
---

> :warning: **Requires**: Neurosity OS v16+, to be released in January 2023

Adding the Bluetooth transport for React Native requires the [`react-native-ble-manager`](https://github.com/innoveit/react-native-ble-manager/) library. Install the library and set up the permission as per their documentation before moving to the next step.

Before

```jsx
import { Notion, WebBluetoothTransport } from "@neurosity/sdk";

export const neurosity = new Notion({
  autoSelectDevice: true
});
```

After

```ts {1-3,7-12}
import { Neurosity, ReactNativeTransport } from "@neurosity/sdk";
import { NativeModules, NativeEventEmitter, Platform } from "react-native";
import BleManager from "react-native-ble-manager";

export const neurosity = new Neurosity({
  autoSelectDevice: true,
  bluetoothTransport: new ReactNativeTransport({
    BleManager,
    bleManagerEmitter: new NativeEventEmitter(NativeModules.BleManager),
    platform: Platform.OS
  }),
  streamingMode: "bluetooth-with-wifi-fallback"
});
```

When using Bluetooth, there are 2 streaming modes you can choose from:

- `wifi-with-bluetooth-fallback`
- `bluetooth-with-wifi-fallback`

## Bluetooth Connection State

```ts
const { bluetooth } = neurosity;

bluetooth.connection().subscribe((connection) => {
  console.log(`Bluetooth connected is ${connection}`);
});
```

The following connection states are possible:

```ts
enum BLUETOOTH_CONNECTION {
  SCANNING = "scanning",
  CONNECTED = "connected",
  CONNECTING = "connecting",
  DISCONNECTING = "disconnecting",
  DISCONNECTED = "disconnected"
}
```

## Auto Connect

By default, the Web Bluetooth transport will attempt to auto connect to the [selected device](/docs/api/device-selection). To disable this behavior, set the `autoConnect` transport option to `false`:

```ts {8}
import { Neurosity, ReactNativeTransport } from "@neurosity/sdk";
import { NativeModules, NativeEventEmitter, Platform } from "react-native";
import BleManager from "react-native-ble-manager";

export const neurosity = new Neurosity({
  autoSelectDevice: true,
  bluetoothTransport: new ReactNativeTransport({
    autoConnect: false
    BleManager,
    bleManagerEmitter: new NativeEventEmitter(NativeModules.BleManager),
    platform: Platform.OS
  }),
  streamingMode: "bluetooth-with-wifi-fallback"
});
```

It is also possible to enable or disable this behavior at runtime:

```ts
const { bluetooth } = neurosity;

bluetooth.enableAutoConnect(true);

// or

bluetooth.enableAutoConnect(false);
```



================================================
File: docs/api/bluetooth-web.md
================================================
---
id: bluetooth-web
title: Bluetooth for Web
---

> :warning: **Requires**: Neurosity OS v16+, to be released in January 2023

Not all browsers support Web Bluetooth. You can refer to browser-specific support [here](https://caniuse.com/web-bluetooth).

Additionally, there are some Browser Bluetooth flags that need to be enabled:

<p align="center">
  <img alt="Browser Feature Flags" src="/img/api/web-bluetooth-browser-flags.png" />
</p>

[chrome://flags/#enable-experimental-web-platform-features](chrome://flags/#enable-experimental-web-platform-features)

Before

```jsx
import { Neurosity } from "@neurosity/sdk";

export const neurosity = new Neurosity({
  autoSelectDevice: true
});
```

After

```ts {1,5-6}
import { Neurosity, WebBluetoothTransport } from "@neurosity/sdk";

export const neurosity = new Neurosity({
  autoSelectDevice: true,
  bluetoothTransport: new WebBluetoothTransport(),
  streamingMode: "bluetooth-with-wifi-fallback"
});
```

When using Bluetooth, there are 2 streaming modes you can choose from:

- `wifi-with-bluetooth-fallback`
- `bluetooth-with-wifi-fallback`

## Bluetooth Connection State

```ts
const { bluetooth } = neurosity;

bluetooth.connection().subscribe((connection) => {
  console.log(`Bluetooth connected is ${connection}`);
});
```

The following connection states are possible:

```ts
enum BLUETOOTH_CONNECTION {
  SCANNING = "scanning",
  CONNECTED = "connected",
  CONNECTING = "connecting",
  DISCONNECTING = "disconnecting",
  DISCONNECTED = "disconnected"
}
```

## Auto Connect

By default, the Web Bluetooth transport will attempt to auto connect to the [selected device](/docs/api/device-selection). To disable this behavior, set the `autoConnect` transport option to `false`:

```ts
import { Neurosity, WebBluetoothTransport } from "@neurosity/sdk";

export const neurosity = new Neurosity({
  autoSelectDevice: true,
  bluetoothTransport: new WebBluetoothTransport({
    autoConnect: false
  }),
  streamingMode: "bluetooth-with-wifi-fallback"
});
```

It is also possible to enable or disable this behavior at runtime:

```ts
const { bluetooth } = neurosity;

bluetooth.enableAutoConnect(true);

// or

bluetooth.enableAutoConnect(false);
```



================================================
File: docs/api/brainwaves.md
================================================
---
id: brainwaves
title: Brainwaves
---

The brainwaves API is what we always wished for when it came to inventing the future: an easy way to get lossless brainwaves. Sometimes we wanted to manipulate the raw data and other times we wanted to analyze the power in each frequency bin. With brainwaves, our goal is to enable new APIs and powerful programs to be built. We expect that someone working with the brainwaves API has a bit of experience working with EEG data or a strong desire to learn.

## Sampling Rate

The sampling rate will vary depending on the model of your device.

- Crown -> `256Hz`
- Notion 2 -> `250Hz`
- Notion 1 -> `250Hz`

A sampling rate of `250Hz` means the data contains `250` samples per second.

## Metrics

There are four brainwaves metrics:

- raw
- rawUnfiltered
- psd
- powerByBand

### Raw

The `raw` brainwaves parameter emits events of 16 samples for Crown and 25 for Notion 1 and 2. We call these groups of samples Epochs. Each epoch includes an info object with sampling rate, start time, notch frequency, and channel names.

```js
const neurosity = new Neurosity();

neurosity.brainwaves("raw").subscribe((brainwaves) => {
  console.log(brainwaves);
});
```

The code above will output new epochs of 16 samples approximately every 62.5ms. Here's an example of 1 event:

```js
{
  data: [
    // Array of samples per channel
    [/* channel 1 samples */],
    [/* channel 2 samples */],
    // ... more channels
  ],
  info: {
    channelNames: ["CP3", "C3", "F5", "PO3", "PO4", "F6", "C4", "CP4"],
    notchFrequency: "60Hz",
    samplingRate: 256,
    startTime: 1628194299499
  }
}
```

Epochs are pre-filtered on the device's Operating System to give you the cleanest data possible with maximum performance. These filters include:

- Notch of `50Hz` or `60Hz` and a bandwidth of `1`.
- Bandpass with cutoff between `2Hz` and `45Hz`.

The order of these filters is set to `2`, and the characteristic used is `butterworth`.

To apply your own filters, you can use the `rawUnfiltered` brainwaves parameter (see next section) and use the [Neurosity Pipes](https://github.com/neurosity/eeg-pipes) library for fine-grained customization.

### Raw Unfiltered

The unfiltered raw data follows the same shape as the `raw` data option, just without signal filters applied. The info object includes sampling rate, start time, and channel names, but no notch frequency since no filtering is applied.

```js
const neurosity = new Neurosity();

neurosity.brainwaves("rawUnfiltered").subscribe((brainwaves) => {
  console.log(brainwaves);
});
```

Example output:

```js
{
  data: [
    // Array of samples per channel
    [/* channel 1 samples */],
    [/* channel 2 samples */],
    // ... more channels
  ],
  info: {
    channelNames: ["CP3", "C3", "F5", "PO3", "PO4", "F6", "C4", "CP4"],
    samplingRate: 256,
    startTime: 1628194299499
  }
}
```

### Power Spectral Density (PSD)

The PSD metric provides frequency domain information about the signal. Each event includes the PSD values, frequency bins, and an info object with sampling rate, start time, notch frequency, and channel names.

```js
const neurosity = new Neurosity();

neurosity.brainwaves("psd").subscribe((brainwaves) => {
  console.log(brainwaves);
});
```

Example output:

```js
{
  label: "psd",
  psd: [
    // PSD values per channel
    [/* channel 1 PSD values */],
    [/* channel 2 PSD values */],
    // ... more channels
  ],
  freqs: [
    0, 2, 4, 6, 8, 10, /* ... frequency bins up to 126Hz */
  ],
  info: {
    channelNames: ["CP3", "C3", "F5", "PO3", "PO4", "F6", "C4", "CP4"],
    notchFrequency: "60Hz",
    samplingRate: 256,
    startTime: 1628194299499
  }
}
```

### Power by Band

The Power by Band metric provides the average power in each frequency band (delta, theta, alpha, beta, gamma) across all channels. The info object includes sampling rate, start time, and channel names to provide context for the power values.

```js
const neurosity = new Neurosity();

neurosity.brainwaves("powerByBand").subscribe((brainwaves) => {
  console.log(brainwaves);
});
```

Example output:

```js
{
  gamma: [/* power values */],
  beta: [/* power values */],
  alpha: [/* power values */],
  theta: [/* power values */],
  delta: [/* power values */],
  info: {
    channelNames: ["CP3", "C3", "F5", "PO3", "PO4", "F6", "C4", "CP4"],
    samplingRate: 256,
    startTime: 1628194299499
  }
}
```



================================================
File: docs/api/calm.md
================================================
---
id: calm
title: Calm
---

Constantly fires and predicts user's calm level from passive cognitive state based on the alpha brainwave between `7.5Hz` and `12.5Hz`. Calm is a probability from `0.0` to `1.0`. To get calm over `0.3` is significant. Calm will take up to 16 seconds to initialize. We normally take a longer rolling average of calm to produce brain processes over time, see how we do it in our [flow walk through](https://support.neurosity.co/hc/en-us/articles/360036343372-Flow-state).

Things that can help increase the calm score are:

- Closing your eyes for 30 seconds or more
- Seating or standing still
- Breathing exercises
- Meditating

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();

neurosity.calm().subscribe((calm) => {
  console.log(calm);
});

// { probability: 0.34, metric: "awareness", label: "calm", timestamp:  1569961321101 }
// { probability: 0.41, metric: "awareness", label: "calm", timestamp:  1569961321105 }
// { probability: 0.45, metric: "awareness", label: "calm", timestamp:  1569961321110 }

// Demo
neurosity.calm().subscribe(({ probability }) => {
  if (probability < 0.25) {
    musicPlayer.recommendGenre("classical");
  }
});
```



================================================
File: docs/api/device-selection.md
================================================
---
id: device-selection
title: Device Selection
---

When using the Neurosity SDK, there are 3 ways to select which device you wish to connect to. The options are:

- Automatic Device Selection (recommended)
- Ahead Of Time Device Selection
- Manual Device Selection

### Automatic Device Selection

The easiest way to communicate with your device is via automatic device selection. This method is the best if you only own 1 device. Simply instantiate the `Neurosity` class and it will automatically fetch your claimed device and select it. That's it.

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();
```

### Ahead Of Time Device Selection

This method is especially useful if you have your Device ID available. Simply pass it as an option when instantiating the `Neurosity` class.

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity({
  deviceId: "..."
});
```

### Manual Device Selection

Selecting a device manually is the way to go when the user owns multiple devices. It's also the recommended approach when building Neurosity apps for other people to use.

A common use case for manually selecting a device is when you wish to build a device dropdown a user can select from, instead of collecting the `Device ID` from the user ahead of time.

The 3 steps to manually selecting a device are:

- Set `autoSelectDevice` to `false` when instantiating the `Neurosity` class.
- Authenticate with your Neurosity account to access your devices by calling the `neurosity.login(...)` function.
- Call the `neurosity.selectDevice(...)` function with a device selector function or field/value combination.

```js
import { Neurosity } from "@neurosity/sdk";

(async function main() {
  const neurosity = new Neurosity({
    autoSelectDevice: false
  });

  await neurosity.login({
    email: "...",
    password: "..."
  });

  // select via field/value
  await neurosity.selectDevice(["deviceNickname", "Crown-A1B"]);

  // or select via selector function
  await neurosity.selectDevice((devices) =>
    devices.find((device) => device.deviceNickname === "Crown-A1B")
  );
})();
```

The devices list contains all claimed devices by the Neurosity account the user is authenticated with. The shape of each device is called `DeviceInfo`, and it contains the following attributes:

```ts
type DeviceInfo = {
  apiVersion: string;
  channelNames: string[];
  channels: number;
  deviceId: string;
  deviceNickname: string;
  manufacturer: string;
  model: string;
  modelName: string;
  modelVersion: string;
  osVersion: string;
  samplingRate: number;
};
```

You can select a device based on any attribute. For example, you could select a device based on the `model`. The following example selects the earliest claimed Notion 2 device.

```js
import { Neurosity } from "@neurosity/sdk";

(async function main() {
  const neurosity = new Neurosity({
    autoSelectDevice: false
  });

  await neurosity.login({
    email: "...",
    password: "..."
  });

  await neurosity.selectDevice((devices) =>
    devices.find((device) => device.model === "Notion 2")
  );
})();
```

#### Accessing the list of devices

```js
import { Neurosity } from "@neurosity/sdk";

(async function main() {
  const neurosity = new Neurosity({
    autoSelectDevice: false
  });

  await neurosity.login({
    email: "...",
    password: "..."
  });

  // Devices are ordered by `claimedOn` date asc
  const devices = await neurosity.getDevices();
})();
```

#### Accessing selected device

```js
import { Neurosity } from "@neurosity/sdk";

(async function main() {
  const neurosity = new Neurosity({
    autoSelectDevice: false
  });

  await neurosity.login({
    email: "...",
    password: "..."
  });

  // Access device when selecting
  const selectedDevice = await neurosity.selectDevice((devices) =>
    devices.find((device) => device.deviceNickname === "Crown-B1C")
  );

  // Or every time the device selection changes
  const selectedDevice = neurosity
    .onDeviceChange()
    .subscribe((selectedDevice) => {
      console.log(selectedDevice);
    });
})();
```

> If you own multiple devices, and don't set `autoSelectDevice` to false, then the earliest claimed device on the list will be automatically selected.

### Switching devices

Selecting a device can only be done once. For switching between devices, simply:

- Disconnect the current Neurosity instance by calling `neurosity.disconnect()`
- Create a new `Neurosity` instance.



================================================
File: docs/api/disconnect.md
================================================
---
id: disconnect
title: Disconnect
---

You should always call disconnect the Neurosity instance when you're ending a session. This will clean up the session.

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();

neurosity.disconnect();
```



================================================
File: docs/api/focus.md
================================================
---
id: focus
title: Focus
---

Constantly fires and predicts user's focus level from passive cognitive state based on the gamma brainwave between `30Hz` and `44Hz`. Focus is a probability from `0.0` to `1.0`. To get focus over `0.3` is significant. Focus will take up to 16 seconds to fully initialize.

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();

neurosity.focus().subscribe((focus) => {
  console.log(focus);
});

// { probability: 0.51, metric: "awareness", label: "focus", timestamp:  1569961321102 }
// { probability: 0.56, metric: "awareness", label: "focus", timestamp:  1569961321106 }
// { probability: 0.62, metric: "awareness", label: "focus", timestamp:  1569961321111 }

// Demo
neurosity.focus().subscribe(({ probability }) => {
  if (probability > 0.5) {
    notifications.off();
  }
});
```



================================================
File: docs/api/haptics.md
================================================
---
id: haptics
title: Haptics
---

The haptics API is the way to communicate to the user without a screen or speaker. There are two haptic motors on both Crown and Notion 2, none on DK1. We assume the number of haptics will change, so our approach to haptic control became a dynamic strategy. Each haptic motor's location is positioned in reference to the 10-10 EEG system used to label the channels of the Crown's EEG sensors. Notion 2 and Crown have haptics at P7 and P8.

<p align="center">
  <img alt="EEG-10-10" src="/img/api/eeg-10-10-dark.png" />
  <br />
  <b>FIG. 1</b><i> International standard for EEG 10-10 channel locations</i>
</p>

A haptic motor location is referenced local to the human head and using the EEG 10-10 chart can pin point exactly where the motor is on the Crown. P7 is on the back left side of the human head from the top down perspective shown in FIG. 1. The outerband passes over both P7 and P8. The motor at P7, compared with electorde 4, is a bit farther away from the midline of the head. P8, on the right side of the outerband, is a bit farther away from the midline of the head compared to electrode 5.

Haptic effects are able to be sent to one or more motors at a time. Sending the commands together starts the effects at the same time on the device. A list of effects may be found on this [SDKs github](https://github.com/neurosity/neurosity-sdk-js/blob/master/src/utils/hapticEffects.ts).

To send one effect to one motor:

```js
const neurosity = new Neurosity();

const effects = neurosity.getHapticEffects();

const result = await neurosity.haptics({
  P8: [effects.strongClick100]
});

console.log(result.status); // prints: complete
```

If you want to combine multiple haptic effects together:

```js
...
await neurosity.haptics({
  P7: [
    effects.transitionRampUpLongSmooth1_0_to_100,
    effects.transitionRampDownLongSmooth1_100_to_0
  ]
});
```

To send effects to multiple haptic motors at once:

```js
...
await neurosity.haptics({
  P7: [
    effects.transitionRampUpLongSmooth1_0_to_100,
    effects.transitionRampDownLongSmooth1_100_to_0
  ],
  P8: [
    effects.transitionRampUpLongSmooth1_0_to_100,
    effects.transitionRampDownLongSmooth1_100_to_0
  ]
});
```

You may queue up to seven (7) effects in one command

```js
...
await neurosity.haptics({
  P7: [
    effects.transitionRampUpLongSmooth1_0_to_100,
    effects.transitionRampDownLongSmooth1_100_to_0,
    effects.transitionRampUpLongSmooth1_0_to_100,
    effects.transitionRampDownLongSmooth1_100_to_0,
    effects.transitionRampUpLongSmooth1_0_to_100,
    effects.transitionRampDownLongSmooth1_100_to_0,
    effects.longDoubleSharpClickStrong1_100
  ]
});
```

**Sources**

Figure 1 - EEG 10-10
Seeck M et al. The standardized EEG electrode array of the IFCN. Clin Neurophysiol (2017), http://dx.doi.org/10.1016/j.clinph.2017.06.254



================================================
File: docs/api/info.md
================================================
---
id: info
title: Device Information
---

Non-mutable device information.

## Metrics:

```js
interface IInfo {
  deviceId: string;
  channels: number;
  channelNames: Array<string>;
  samplingRate: number;
  manufacturer: string;
  model: string;
  osVersion: string;
  apiVersion: string;
}
```

## Example

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();

const info = await neurosity.getInfo();
console.log(info); // { channels: 8, samplingRate: 250, ... }
```



================================================
File: docs/api/kinesis.md
================================================
---
id: kinesis
title: Kinesis
---

The [Kinesis API](/docs/reference/interfaces/kinesis) is based on the Motor Imagery BCI method. Fires when a user attempts to trigger a side effect from defined thoughts. E.g. motor imagery, etc.

Kinesis implements a spike detection algorithm over the [predictions](/docs/api/predictions) observable.

To train a Kinesis command, use [console.neurosity.co](https://console.neurosity.co/) and use the corresponding label for the `Active` classifier. Learn how to train a new command [here](https://support.neurosity.co/hc/en-us/articles/360036344012-Imagined-thought-training). To make your own custom training, see [guides/training](/docs/guides/training).

```js
const neurosity = new Neurosity();

neurosity.kinesis("rightArm").subscribe((intent) => {
  // Switch light off/on
  light.togglePower();
  console.log(intent);
});

// { probability: 0.93, label: "rightArm", timestamp: 1569961321174, metric: "kinesis" }
```

or

```js
neurosity.kinesis("leftArm").subscribe((intent) => {
  // Launch drone
  drone.launch();
  console.log(intent);
});

// { probability: 0.92, label: "leftArm", timestamp: 1569961321191, type: "kinesis"  }
```



================================================
File: docs/api/oauth.md
================================================
---
id: oauth
title: OAuth
---

## Registering your app

OAuth requires for developers to register their apps with Neurosity. To register you app, please email [support@neurosity.co](mailto:support@neurosity.co).

During the registration process, you'll be asked to specify which scopes you'll like to have access to.

### Example Project

The quickest way to implement OAuth is to fork the [example project](https://github.com/neurosity/neurosity-oauth-example).

### OAuth Scopes

The following individual scopes will allow your app to access certain Neurosity resources.

| Scope                    | Description              |
| ------------------------ | ------------------------ |
| read:accelerometer       | Live Accelerometer       |
| write:brainwave-markers  | Add Brainwave Markers    |
| read:brainwaves          | Live Brainwaves          |
| write:brainwaves         | Record Brainwaves        |
| read:memories:brainwaves | Read Brainwave Datasets  |
| read:calm                | Live Calm                |
| read:memories:calm       | Historical Calm          |
| read:focus               | Live Focus               |
| read:memories:focus      | Historical Focus         |
| read:devices-info        | Live Device(s) Info      |
| write:haptics            | Activate Haptics         |
| read:kinesis             | Live Kinesis             |
| write:kinesis            | Create Kinesis Trainings |
| read:devices-settings    | Read Device(s) Settings  |
| read:signal-quality      | Live Signal Quality      |
| read:status              | Live Device(s) Status    |

> Only request scopes that you inted to use in your app.

### Redirect URIs

Another part of the registration process involves specifying one or more reidrect URIs. The Redirect URI(s)
validate the URI the OAuth workflow will use to redirect back to your app after the user has granted or denied OAuth access.

Some examples:

```bash
https://yourwebapp.com/
http://localhost:3000
```

## Implement Cloud Functions

Implementing OAuth requires two server-side (node.js) enpoints to be implemented. Make sure you have the following environment variables available at runtime for both cloud functions.

```
NEUROSITY_OAUTH_CLIENT_ID=<your client id>
NEUROSITY_OAUTH_CLIENT_SECRET=<your client secret>
NEUROSITY_OAUTH_CLIENT_REDIRECT_URI=http://localhost:3000
```

### First Cloud Function: createOAuthURL

The first function wraps the [createOAuthURL](/reference/classes/neurosity#createOAuthURL) SDK method. This method creates client-specific OAuth URL. This is the first step of the OAuth workflow. Use this function to create a URL you can use to redirect users to the Neurosity sign-in page.

The following cloud function example was designed to work with Netlify. Let's name this function `get-neurosity-oauth-url`.

```js
const { Neurosity } = require("@neurosity/sdk");

const neurosity = new Neurosity({
  autoSelectDevice: false
});

exports.handler = async function (event) {
  return neurosity
    .createOAuthURL({
      clientId: process.env.NEUROSITY_OAUTH_CLIENT_ID,
      clientSecret: process.env.NEUROSITY_OAUTH_CLIENT_SECRET,
      redirectUri: process.env.NEUROSITY_OAUTH_CLIENT_REDIRECT_URI,
      responseType: "token",
      state: Math.random().toString().split(".")[1], // A random string is required for security reasons
      scope: [
        "read:devices-info",
        "read:devices-status",
        "read:signal-quality",
        "read:brainwaves"
      ]
    })
    .then((url) => ({
      statusCode: 200,
      body: JSON.stringify({ url })
    }))
    .catch((error) => ({
      statusCode: 400,
      body: JSON.stringify(error.response.data)
    }));
};
```

### Second Cloud Function: getOAuthToken

The [getOAuthToken](/reference/classes/neurosity#getOAuthToken) method retreives the client-specific OAuth token for a given userId.

Here's an example of a cloud function that receives a `userId` via query params and loads the client id and client secret securely via environment variables.

Let's name this function `get-neurosity-custom-token`.

```js
const { Neurosity } = require("@neurosity/sdk");

const neurosity = new Neurosity({
  autoSelectDevice: false
});

exports.handler = async function (event) {
  const userId = event.queryStringParameters?.userId;

  return neurosity
    .getOAuthToken({
      clientId: process.env.NEUROSITY_OAUTH_CLIENT_ID,
      clientSecret: process.env.NEUROSITY_OAUTH_CLIENT_SECRET,
      userId
    })
    .then((token) => ({
      statusCode: 200,
      body: JSON.stringify(token)
    }))
    .catch((error) => ({
      statusCode: 200,
      body: JSON.stringify(error.response.data)
    }));
};
```

## Integrate to your User Interface

Now that your app is registered and the 2 cloud functions are implemented, the last step is to integrate OAuth to your user interface. In this section, the code examples will be using React.

### Add "Connect Neurosity Account" Component

```js
import React from "react";

export function ConnectNeurosityAccountButton() {
  function connectNeurosityAccount() {
    fetch(`/functions/get-neurosity-oauth-url`)
      .then(({ data }) => {
        if ("url" in data) {
          // Takes the url returned by the cloud function and redirects the browser to the Neurosity OAuth sign-in page
          window.location.href = data.url;
        } else {
          console.error(`Error: Did not receive url`);
        }
      })
      .catch((error) => {
        console.error(error.message);
      });
  }

  return (
    <button onClick={connectNeurosityAccount}>Connect Neurosity Account</button>
  );
}
```

### Manage the Auth state

We'll import and create a new instance of the Neurosity SDK. Then, add a hook for Neurosity auth state management.

```js
import { Neurosity } from "@neurosity/sdk";
import { useState, useEffect } from "react";

const neurosity = new Neurosity({
  autoSelectDevice: false
});

const initialState = {
  loading: true,
  user: null,
  error: null
};

export function useNeurosity() {
  const [state, setState] = useState(initialState);
  const { customToken } = useOAuthResult();

  // Fires everytime an uth session starts or ends
  useEffect(() => {
    const subscription = neurosity.onAuthStateChanged().subscribe((user) => {
      setState((prevState) => ({
        ...prevState,
        loading: false,
        user
      }));
    });

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // Calls the Neurosity login with the custom token received via url parameter
  useEffect(() => {
    if (customToken) {
      neurosity.login({ customToken }).catch((error) => {
        setState((prevState) => ({
          ...prevState,
          error: error?.message
        }));
      });
    }
  }, [customToken]);

  return state;
}

function useOAuthResult() {
  const paramsString = window.location.hash.replace("#", "");

  return {
    state: searchParams.get("state"),
    error: searchParams.get("error"),
    customToken: searchParams.get("access_token")
  };
}
```

### Removing Access

After a user has granted your app access to their Neurosity account, it is good practice to give them the option to remove the access. For that, we'll use the SDK [removeOAuthAccess](/reference/classes/neurosity#removeOAuthAccess) method on the client or server side.

The following example removes client-specific OAuth token for a given `userId`. This method requires the SDK to be signed in with OAuth custom token.

```js
import React from "react";

export function RemoveNeurosityAccessButton() {
  async function removeNeurosityAccess() {
    await neurosity.removeOAuthAccess().catch((error) => {
      // handle error here...
    });
  }

  return <button onClick={removeNeurosityAccess}>Remove Access</button>;
}
```

## Authenticating the Neurosity App

It is possible to authenticate the Neurosity mobile app with an OAuth token. To do this, simply add a deep link navigation to your mobile app containing using the following URI scheme:

```ts
neurosity://oauth/YOUR_OAUTH_TOKEN_HERE
```



================================================
File: docs/api/osc.md
================================================
---
id: osc
title: OSC
---

# OSC

The Neurosity SDK supports Open Sound Control (OSC) protocol for real-time data streaming. This is particularly useful for integrating with audio/visual software and creative coding frameworks that support OSC.

## Overview

OSC data is streamed over port *9000* via UDP in two modes:

- **Perform Mode**: Streams processed metrics like focus, calm, and power by band data
- **Raw Mode**: Streams raw EEG data samples

## Configuration

The OSC server uses the following default configuration:

- Local Host: Configured via `oscLocalHost` 
- Local Port: Configured via `oscLocalPort`
- Remote Port: Configured via `oscRemotePort`
- Broadcast: Enabled
- Protocol: UDP

### Enabling OSC Modes

Before using either mode, you'll need to enable them in your device settings:

1. Go to [console.neurosity.co](https://console.neurosity.co)
2. Select your device
3. Go to Settings
4. Enable either or both:
   - "OSC Raw Mode" - for raw EEG data
   - "OSC Perform Mode" - for processed metrics

Note: Each mode can be enabled independently, allowing you to use either or both modes simultaneously.

## Streaming Modes

### Raw Mode
When raw mode is enabled via `startRawMode()`, you'll receive raw EEG data samples at the device's sampling rate (256Hz for Crown, 250Hz for Notion 1/2). Each packet contains:

- 16 samples per channel for Crown (62.5ms of data)
- 25 samples per channel for Notion 1/2 (100ms of data)

The data is sent to the OSC address `/neurosity/notion/{deviceId}/raw` with the following arguments:
- channelData (array of floats) - Raw amplitude values for each channel
- timestamp (string) - Timestamp of the first sample in the packet
- count (integer) - Sample count
- marker (string) - Any marker associated with this data

### Perform Mode 
When perform mode is enabled via `startPerformMode()`, you'll receive processed metrics at a lower rate (4Hz). This includes:

- Power by band data (delta, theta, alpha, beta, gamma) - Updated every 250ms
- Focus/Calm probability scores - Updated every 250ms 
- Signal quality metrics - Updated every 250ms
- Battery status - Updated when changed

Each metric is sent to its own OSC address (see Address Patterns section below).

The power band data represents averaged frequency power over a 16 second sliding window, providing a more stable signal for creative applications.

## OSC Raw Address Patterns

### Device Info
`/neurosity/notion/{deviceId}/info`

Arguments:
- deviceId (string)
- deviceNickname (string) 
- model (string)
- modelName (string)
- modelVersion (string)
- manufacturer (string)
- samplingRate (integer)
- channels (integer)
- channelNames (string - comma separated)

### Raw EEG Data
`/neurosity/notion/{deviceId}/raw`

Arguments:
- channelData (array of floats) - Amplitude values for each channel
- timestamp (string)
- count (integer)
- marker (string)

### Markers
`/neurosity/notion/{deviceId}/markers`

Argument:
- label (string)

## OSC Perform Address Patterns

### Metrics

The following metrics are streamed with the pattern `/crown{deviceShortId}/{metricName}`:

#### Power Bands
`/crown{deviceId}/{bandName}`

Where bandName is one of:
- delta
- theta 
- alpha
- beta
- gamma

Arguments:
- values (array of floats) - Power values for each channel over a 16 second window

#### Power Band Slopes
`/crown{deviceId}/slope/{bandName}`

Arguments:
- values (array of floats) - Slope values for each channel over a 16 second window

#### Battery
`/crown{deviceId}/battery`

Argument:
- chargePercentage (float)

#### Signal Quality
`/crown{deviceId}/signalQuality`

Argument:
- quality (float)

## Usage Example


```javascript
const osc = require("osc");

// Set up an OSC UDP port listening on port 9000
const udpPort = new osc.UDPPort({
  localAddress: "0.0.0.0",
  localPort: 9000,
});

udpPort.on("message", (oscMessage) => {
  console.log("Received OSC message:", oscMessage);
});

udpPort.open();
```


================================================
File: docs/api/predictions.md
================================================
---
id: predictions
title: Predictions
---

The predictions API is based on the Motor Imagery BCI method. Predictions are produced a predetermined amount of times per second. If you're looking to implement your own Kinesis algorithim, then predictions can be good for you.

To train to produce predictions, use [console.neurosity.co](https://console.neurosity.co/) and use the corresponding label for the `Active` classifier. Learn how to train a new command [here](https://support.neurosity.co/hc/en-us/articles/360036344012-Imagined-thought-training).

```js
const neurosity = new Neurosity();

neurosity.predictions("leftArm").subscribe((prediction) => {
  console.log("prediction", prediction);
});

// { probability: 0.93, label: "leftArm", timestamp: 1569961321174, metric: "kinesis" }
```



================================================
File: docs/api/settings.md
================================================
---
id: settings
title: Device Settings
---

## Methods:

```
- settings(): => Observable<Settings>
- changeSettings(settings: ChangeSettings): Promise<void>
```

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();

neurosity.settings().subscribe((settings) => {
  console.log(settings);
  // { lsl: false }
  // { lsl: true }
});

await neurosity.changeSettings({
  lsl: true
});
```



================================================
File: docs/api/signal-quality.md
================================================
---
id: signal-quality
title: Signal Quality
---

Standard deviation based signal quality metrics. Great signal happens when the standard deviation is between 1.5 and 10. See [`SignalQuality`](https://docs.neurosity.co/docs/reference/interfaces/signalquality) for using in code.

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();

neurosity.signalQuality().subscribe((signalQuality) => {
  console.log(signalQuality);
});
```



================================================
File: docs/api/status.md
================================================
---
id: status
title: Device Status
---

## Metrics:

- state: "online" | "offline" | "shuttingOff" | "updating" | "booting"
- sleepMode: boolean
- sleepModeReason: "updating" | "charging" | null
- charging: boolean
- battery: number
- lastHeartbeat: number
- ssid: string
- claimedBy: string

```js
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();

neurosity.status().subscribe((status) => {
  console.log(status);
  // status example: { state: "online", charging: true, battery: 93, ... }
});
```



================================================
File: docs/api/streaming.md
================================================
---
id: streaming
title: Wi-Fi & Bluetooth
---

By default, the Neurosity SDK uses Wi-Fi and the cloud. This means that all the metrics streaming by the Crown will go through the secured Neurosity servers.

As of Neurosity OS v16, there is the option to use Bluetooth as a streaming transport. Currently, Bluetooth support is available for Web and React Native environments. We are planning to add Bluetooth support to Node next.

## Comparison table

|                                        | Wi-Fi | Bluetooth |
| -------------------------------------- | ----- | --------- |
| Metrics streaming                      | ✅    | ✅        |
| Secure & private (encryption & auth)   | ✅    | ✅        |
| Automatic device connection            | ✅    | ✅        |
| Crown can be used without internet     | 🚫    | ✅        |
| Crown can be located far away from app | ✅    | 🚫        |
| Kinesis                                | ✅    | 🚫        |
| Device settings (read/write)           | ✅    | 🚫        |
| Support all browsers                   | ✅    | 🚫        |
| NodeJS support                         | ✅    | 🚫        |
| Electron support                       | ✅    | 🚫        |

When building your app, there are 3 streaming strategies you can choose from:

- `wifi-only` (default)
- `wifi-with-bluetooth-fallback`
- `bluetooth-with-wifi-fallback`

Neurosity's recommendation is to start your app with `wifi-only` streaming and add Bluetooth later as needed.

## Streaming State

Starting with v6, it is possible to subscribe to real-time streaming state changes. For example, if you chose `wifi-with-bluetooth-fallback`, you could do:

```ts
import { Neurosity, WebBluetoothTransport } from "@neurosity/sdk";

const neurosity = new Neurosity({
  bluetoothTransport: new WebBluetoothTransport(),
  streamingMode: "wifi-with-bluetooth-fallback"
});

neurosity.streamingState().subscribe((streamingState) => {
  console.log(streamingState);
});

// { streamingMode: "wifi-with-bluetooth-fallback", activeMode: "wifi", connected: true }
// If wifi went offline, the subscribe callback would fire again with:
// { streamingMode: "wifi-with-bluetooth-fallback", activeMode: "bluetooth", connected: true }
```

The same way, if you chose `bluetooth-with-wifi-fallback`:

```ts
import { Neurosity, WebBluetoothTransport } from "@neurosity/sdk";

const neurosity = new Neurosity({
  bluetoothTransport: new WebBluetoothTransport(),
  streamingMode: "bluetooth-with-wifi-fallback"
});

neurosity.streamingState().subscribe((streamingState) => {
  console.log(streamingState);
});

// { streamingMode: "bluetooth-with-wifi-fallback", activeMode: "bluetooth", connected: true }
// If bluetooth went out of proximity range, the subscribe callback would fire again with:
// { streamingMode: "bluetooth-with-wifi-fallback", activeMode: "wifi", connected: true }
```

## Start building

- [Bluetooth for Web tutorial](/docs/api/bluetooth-web)
- [Bluetooth for React Native tutorial](/docs/api/bluetooth-react-native)



================================================
File: docs/api/v6.md
================================================
---
id: v6
title: Migrating from v5 to v6
---

The new version 6 of the SDK is mostly backwards compatible with v5.

There are 3 changes.

### 1. Import name change

The most important change is the new renamed npm package and the name of the main SDK class.

Before:

```ts
import { Notion } from "@neurosity/notion";

const notion = new Notion();
```

After:

```ts
import { Neurosity } from "@neurosity/sdk";

const neurosity = new Neurosity();
```

### 2. Single metric/label pair

Previously, the following function could accept multiple labels:

Before:

```ts
neurosity.brainwaves("raw", "psd", "powerByBand");
neurosity.kinesis("push", "pull");
neurosity.predictions("push", "pull");
```

In v6, these functions only accept 1 label.

After:

```ts
neurosity.brainwaves("raw");
neurosity.kinesis("pull");
neurosity.predictions("push");
```

To get the same behavior as before, you can merge the streams:

```ts
import { merge } from "rxjs";

merge(
  neurosity.brainwaves("raw"),
  neurosity.brainwaves("psd"),
  neurosity.brainwaves("powerByBand")
).subscribe((brainwaves) => {
  //
});
```

### 3. Removed Local Mode

We've removed the following local mode functions in favor of the new Bluetooth support:

```ts
neurosity.enableLocalMode();
neurosity.isLocalMode();
```

If you are interested in supporting Bluetooth for your app, you can check out the [Bluetooth tutorial](/docs/api/streaming).



================================================
File: docs/guides/ethics.md
================================================
---
id: ethics
title: Ethics
---

Ethics are at the core of every Neurosity product. We believe that our collective future has all of us wearing brain computers for terrific, empowering experiences.

At Neurosity, privacy and security are top priority; our transport security approach: In a nutshell, we use authentication, authorization (ACL), SSL, and encryption. What type of security would make you the most comfortable?

To that end, we like to say _Never send raw data_ at Neurosity. For the development of applications, sure, send raw data to your development computer for processing. However, for users, we seek to create an ecosystem where your applications crunch raw data on the actual headset, thereby protecting the end user's sensitive raw data. Plus, sending raw data to another device for processing is very power-intensive and will result in poor battery life for users.

We hope that you use the Neurosity SDK to empower the minds of millions. Alone we may go fast, but together we'll go far.



================================================
File: docs/guides/importing.md
================================================
---
id: importing
title: Importing
---

We support ESM, Node and the Browser:

## ESM

```js
import { Neurosity } from "@neurosity/sdk";
```

## Node

```js
const { Neurosity } = require("@neurosity/sdk");
```

## Browser

```html
<script type="module">
  import { Neurosity } from "./node_modules/neurosity/esm/neurosity.mjs";
</script>
<script nomodule src="./node_modules/neurosity/browser/neurosity.js">
```



================================================
File: docs/guides/signal.md
================================================
---
id: signal
title: Signal
---

Getting great signal is very important. To learn about how to get great signal, check out [this getting started guide here](https://support.neurosity.co/hc/en-us/sections/360007270652-Getting-started).

Understanding when a device has good enough signal quality can be the difference between magic and failiure. Understanding when an electrode is air gapped from a head is very important. You may always use the console for signal checking, but if you want to have a put on the head experience, then you should probably check signal quality. To measure is to know.

We'll be adding more information on ensuring great signal quality to the knowledge base soon. In the meantime: Green signal quality is ideal. Orange means there is room for improvement. Gray means the electrode is not making proper contact. Some things that help go from orange to green are:

- Ensuring enough pressure is applied to the head. This can be accomplished by making sure the headset is sitting at the right angle: roughly 45 degrees. Additionally, extend the headset to your ideal length.

- Ensuring the electrodes are going through the hair. This can be accomplished by slightly combing the headset in a circular motion until you can feel the electrode prongs.



================================================
File: docs/guides/training.md
================================================
---
id: training
title: Training
---

We recommend learning about an [imagined thought training here](https://support.neurosity.co/hc/en-us/articles/360036344012-Imagined-thought-training) before starting this guide.

Training builds a model between two thoughts. That's the basis of thought recognition. We start by looking at the difference between an active state and a rest state.

To train a thought, you need to timesync and you need to call a special api endpoint.

### Time Synchronization

```js
const { Neurosity } = require("@neurosity/sdk");

const neurosity = new Neurosity({
  timesync: true
});

main();

async function main() {
  await neurosity.login({
    email: process.env.NEUROSITY_EMAIL,
    password: process.env.NEUROSITY_PASSWORD
  });
  .catch(error => {
    console.log("error", error);
  });
  // logged in!
}
```

The most important feature is the fact that I have `timesync: true` in the options argument to instantiate a new `Neurosity`.

```js
const neurosity = new Neurosity({
  timesync: true
});
```

Other than than, I'm retrieving my `email`, and `password` from my `.env` file. Learn about `.env` files in [this awesome artical](https://medium.com/the-node-js-collection/making-your-node-js-work-everywhere-with-environment-variables-2da8cdf6e786) by [John Papa](https://twitter.com/John_Papa).

### Tagging

Let's say we want to train the left arm versus a baseline class. You're going to show the user a video in VR of them throwing a baseball.

We could add to our main function something like.

```js
const metric = "kinesis";
const label = "leftArm";

const trainingOptions = {
  metric,
  label,
  experimentId: "-experiment-123"
};

// Subscribe to Kinesis
neurosity.kinesis(label).subscribe((kinesis) => {
  console.log("leftArm kinesis detection", kinesis);
});

// Subscribe to raw predictions
neurosity.predictions(label).subscribe((prediction) => {
  console.log("leftArm prediction", prediction);
});

// Tell the user to clear their mind
console.log("Clear you mind and relax");

// Tag baseline after a couple seconds
setTimeout(() => {
  // Note: using the spread operator to bring all properties from trainingOptions into the current object plus adding the new baseline tag. Learn about spread operators here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  neurosity.training.record({
    ...trainingOptions,
    baseline: true
  });

  // Now tell the user to imagine an active thought
  console.log("Imagine a baseball with your left arm");
}, 4000);

// Tell the user to imagine active thought and fit
setTimeout(() => {
  // Note: You must call fit after a baseline and an active have been recorded.
  neurosity.training.record({
    ...trainingOptions,
    fit: true
  });
}, 8000);
```

Now this new thought has been trained and can be used. To make the thought more accurate, ensure good signal quality and add more trainings by calling record more times.

If you call `fit` too fast, there is potential to max out the CPU, if this happens, [submit an issue](https://support.neurosity.co/hc/en-us/requests/new) and call fit less frequently.



================================================
File: docs/tutorials/your-first-node-app.md
================================================
---
id: your-first-node-app
title: Your First Node App
---

Welcome to the Neurosity SDK documentation site. To begin, you'll need to set up an account one time with Neurosity via [console.neurosity.co](https://console.neurosity.co/). Learn how to [create an account with Neurosity Developer Console](https://support.neurosity.co/hc/en-us/articles/360036196792).

## Prerequisites

To download the necessary tools, clone the repository, and install dependencies via `npm`, you need network access.

### NPM

You'll need the following tools:

- [Git](https://git-scm.com)
- [Node.JS](https://nodejs.org/en/)
- [NPM](https://npmjs.org), use a [package manager](https://nodejs.org/en/download/package-manager/) to install.

Install and build all of the dependencies using [`NPM`](https://npmjs.org)

### VSCode

We'll be using [VSCode](https://code.visualstudio.com/download) to program this tutorial. For a little added fun, we recommend adding the Neurosity VSCode extension to track your flow state while programming. Check out our guide to [installing and getting started with VSCode and the Neurosity extension](https://support.neurosity.co/hc/en-us/articles/360036195712-Installing-and-using-the-VSCode-extension).

### Tutorial Repository

Want to see the complete project before reading anymore? You can view all the code from this project in it's [repository on Github](https://github.com/neurosity/app-hello-world-node-js-sdk).

## Setup your Project

### Hello World Folder

Create a new folder called `hello-world`

```bash
mkdir hello-world
```

Enter into the directory and initialize the `npm` project.

```bash
cd hello-world
npm init
```

You'll need to run through the initial questions:

```bash
package name: (hello-world)
version: (1.0.0)
description: My first application using the Neurosity SDK
entry point: (index.js)
test command:
git repository:
keywords: neurosity
author: Hans Berger
license: (ISC) MIT
```

<p align="center">
  <img alt="Initial set up of NPM project" src="/img/tutorial/npm_init.png" />
</p>

Next, you'll want to launch a VSCode window for the newly created project.

```bash
code .
```

### Working in VSCode

You'll need to launch a terminal window inside VS Code, you may toggle the terminal with `CTRL+~`.

<p align="center">
  <img alt="Toggle command line" src="/img/tutorial/vscode-toggle-command-line.png" />
</p>

To create a new file, you may select the new file button.

<p align="center">
  <img alt="Highlighting new file button in vscode" src="/img/tutorial/vscode-new-file-button.png" />
</p>

Go ahead and make a new file called `index.js`, we'll use it soon as the base of our new project.

<p align="center">
  <img alt="Created a new file called index.js" src="/img/tutorial/vscode-make-index-js-file.png" />
</p>

## Adding the Neurosity SDK to a Node Project

### Add `.gitignore` file

The first thing we want to do is add a file called `.gitignore` to tell git to ignore certain files. Add another file to the root directory called `.gitignore`, then add the following:

```
node_modules
```

On MacOS, we'll go ahead and add another commonly ignored file:

```
.DS_Store
```

<p align="center">
  <img alt="Add a .gitignore file with node_modules" src="/img/tutorial/vscode-gitignore.png" />
</p>

Adding `node_modules` will help VS Code run a little bit better because we're telling it that we don't need to track anything in that folder.

### Install Dependencies

The first dependency we need to install the Neurosity SDK. We'll end up using some environment variables from a `.env` file, so go ahead and install another dependency for that as well. From the command line, enter:

```bash
npm install @neurosity/sdk dotenv
```

<p align="center">
  <img alt="Install dependencies using npm install in the terminal" src="/img/tutorial/vscode-install-dependencies.png" />
</p>

### Add Dependencies to `index.js`

Importing libraries in Node is quite simple, all you have to do is add the following to the top of your index.js file:

```js
const { Neurosity } = require("@neurosity/sdk");
require("dotenv").config();
```

<p align="center">
  <img alt="Add dependencies to the index.js file" src="/img/tutorial/vscode-add-dependencies-to-index.png" />
</p>

### Add start script to package.json

Now head over to the file called `package.json`. The `package.json` is at the core of every Node package. **Ignore the file called `package-lock.json`, it's automatically generated.**

Find the section called `"scripts"` and add a property called `"start"` that will start the node process:

```json
"start": "node index.js"
```

Your `package.json` will look like below once added:

```json
{
  "name": "hello-world",
  "version": "1.0.0",
  "description": "My first application using the Neurosity SDK",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": ["neurosity"],
  "author": "Hans Berger",
  "license": "MIT",
  "dependencies": {
    "@neurosity/sdk": "^3.8.0",
    "dotenv": "^8.2.0"
  }
}
```

### Run the project from the CLI

Navigate back to the terminal and run `npm start` to make sure the project runs without any errors.

```bash
npm start
```

You should see the program run and exit successfully.

<p align="center">
  <img alt="Ran our node program with no errors" src="/img/tutorial/vscode-run-empty-program.png" />
</p>

## Add Authentication

At this point you will need to have [created an account](https://support.neurosity.co/hc/en-us/articles/360036196792-Create-account-with-Neurosity) with [console.neurosity.co](https://console.neurosity.co) and [claimed your device](https://support.neurosity.co/hc/en-us/articles/360037562351).

### Get variables from `.env` file

We'll first attempt to get our environment variables to show what happens when they are not there at runtime. Add the following code to pull the deviceId, email and password from the enviroment variables:

```js
const deviceId = process.env.DEVICE_ID || "";
const email = process.env.EMAIL || "";
const password = process.env.PASSWORD || "";
```

To verify that the variables are not blank, we could add a function to check for that and quit the program if so. Add the following function to your program next:

```js
const verifyEnvs = (email, password, deviceId) => {
  const invalidEnv = (env) => {
    return env === "" || env === 0;
  };
  if (invalidEnv(email) || invalidEnv(password) || invalidEnv(deviceId)) {
    console.error(
      "Please verify deviceId, email and password are in .env file, quitting..."
    );
    process.exit(0);
  }
};
verifyEnvs(email, password, deviceId);

console.log(`${email} attempting to authenticate to ${deviceId}`);
```

Now, if we run our program, we should see an error print out! Run with `npm start` from the CLI.

<p align="center">
  <img alt="Ran our node program with no envs found error" src="/img/tutorial/vscode-no-env-found.png" />
</p>

### Add `.env` file

Next, we'll add a `.env` to store our deviceId, login, and password. Add a new file called `.env` and add your deviceId, email, and password. Learn how to [find your device ID](https://support.neurosity.co/hc/en-us/articles/360037198152-Get-Notion-Device-ID).

```.env
DEVICE_ID="442333d1bcea35533daba9b51234abcd"
EMAIL="hans.berger@neurosity.co"
PASSWORD="Password#1!"
```

<p align="center">
  <img alt="Created a new file called .env" src="/img/tutorial/vscode-env-file.png" />
</p>

Now, if we run our program, we should see a success message print out, informing us that our variables have been extracted successfully.

<p align="center">
  <img alt="Pulled out three variables from .env" src="/img/tutorial/vscode-got-env-variables.png" />
</p>

### Instantiate the Neurosity class

We can then use the `deviceId` to instantiate a new Neurosity by adding the following line to our file.

```js
const neurosity = new Neurosity({
  deviceId
});
```

### Add async login

We need to use an [`async/await`](https://javascript.info/async-await) paradigm for authenticating to the device. Go ahead and create an async function called `main` to the `index.js` file.

```js
const main = async () => {
  await neurosity
    .login({
      email,
      password
    })
    .catch((error) => {
      console.log(error);
      throw new Error(error);
    });
  console.log("Logged in");
};

main();
```

Then run the program with `npm start` in the CLI. If all worked, then you should see:

<p align="center">
  <img alt="Made a function that authenticated with Neurosity" src="/img/tutorial/vscode-main-logged-in.png" />
</p>

## Add Subscriptions

### Calm Subscription

Now that you are authenticated, print out hello world when you're calm increases past 0.3, a significant number.

Add the following code to your main() function after login.

```js
neurosity.calm().subscribe((calm) => {
  if (calm.probability > 0.3) {
    console.log("Hello World!");
  }
});
```

Your index.js file is now ready to print `Hello World!`

<p align="center">
  <img alt="Add code to subscribe to the calm score" src="/img/tutorial/vscode-main-calm-subscribe.png" />
</p>

### Kinesis Training

Head over to the [Developer Console](https://console.neurosity.co) and train Left Hand Pinch. [Learn how to train an imagined movement thought](https://support.neurosity.co/hc/en-us/articles/360036344012-Imagined-thought-training). Do at least 15 trials.

When we write code to interact with the Neurosity SDK, we use camel case, so Left Hand Pinch in code is `leftHandPinch`.

Now that the `leftHandPinch` thought is trained, you'll be able to load it into your device for use.

### Kinesis Subscription

In the `index.js` file we can remove the `calm` subscription from above and replace it with the code below.

Check out the [Kinesis guide](https://docs.neurosity.co/docs/api/kinesis) or [Kinesis API docs](https://docs.neurosity.co/docs/reference/interfaces/kinesis).

```js
neurosity.kinesis("leftHandPinch").subscribe((intent) => {
  console.log("Hello World!");
});
```

Your `index.js` file should look like:

<p align="center">
  <img alt="Add kinesis code to index.js" src="/img/tutorial/vscode-hello-kinesis.png" />
</p>

## Conclusion

Developing with the Neurosity SDK can be a lot of fun! There are two main types of thought processes that Neurosity devices can detect: intent and background. The foreground we consider to be the `kinesis()` where you're intending to do something and the background is `calm()` or `focus()` that occurs in the background of the mind.

### Dive into development

We're looking for talented developers to help us improve the kinesis training. So, head over to the [training guide](https://docs.neurosity.co/docs/guides/training) and learn how to build your own training module.

If you're looking for exact API references, check out the [API section](/docs/reference) of these docs!



================================================
File: docs/tutorials/your-first-web-app.md
================================================
---
id: your-first-web-app
title: Your First Web App
---

In this tutorial, we'll build a Web App from scratch using the following tech stack:

- ⚛️ React - [Create React App](https://github.com/facebook/create-react-app)
- 🏆 Reach Router - [@reach/router](https://reach.tech/router)
- 🤯 Neurosity SDK - [@neurosity/sdk](https://www.npmjs.com/package/@neurosity/sdk)
- 🔑 Neurosity Authentication
- 👍 React Use - [react-use](https://github.com/streamich/react-use)

**TLDR**: If you want to quickly get your neuro app up and running using the Neurosity SDK & React, you can clone the [Neurosity React Starter](https://github.com/neurosity/notion-react-starter) repo.

## Getting Started

Let's start by bootstrapping our app with Create React App (CRA). We open the project in VS Code and run the app locally.

- `npx create-react-app mind-controlled-ocean`
- `code mind-controlled-ocean`
- `npm start`

If all goes well, you should see something like this:

![Create React App Default View](https://dev-to-uploads.s3.amazonaws.com/i/k1knwodmvrqogao5wvlf.png)

> Add all the styles we'll need for this app in `./src/index.css` - [here's the CSS](https://github.com/neurosity/notion-react-starter/blob/master/src/global.css).

## 🔑 Authentication

We believe in privacy. That's why Neurosity is the first brain computer to feature authentication. Adding auth to the app is pretty straightforward. For this, we'll need a login form and 3 side effects to sync the authentication state.

All you need to connect to your device is a [Neurosity account](https://console.neurosity.co/) and a Device ID. So, let's start by creating a new component for the login form that will collect this information.

```jsx
// src/components/LoginForm.js
import React, { useState } from "react";

export function LoginForm({ onLogin, loading, error }) {
  const [deviceId, setDeviceId] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  function onSubmit(event) {
    event.preventDefault();
    onLogin({ deviceId, email, password });
  }

  return (
    <form className="card login-form" onSubmit={onSubmit}>
      <h3 className="card-heading">Login</h3>
      {!!error ? <h4 className="card-error">{error}</h4> : null}
      <div className="row">
        <label>Neurosity Device ID</label>
        <input
          type="text"
          value={deviceId}
          disabled={loading}
          onChange={(e) => setDeviceId(e.target.value)}
        />
      </div>
      <div className="row">
        <label>Email</label>
        <input
          type="email"
          value={email}
          disabled={loading}
          onChange={(e) => setEmail(e.target.value)}
        />
      </div>
      <div className="row">
        <label>Password</label>
        <input
          type="password"
          value={password}
          disabled={loading}
          onChange={(e) => setPassword(e.target.value)}
        />
      </div>
      <div className="row">
        <button type="submit" className="card-btn" disabled={loading}>
          {loading ? "Logging in..." : "Login"}
        </button>
      </div>
    </form>
  );
}
```

This component will hold the state of the `deviceId`, `email` and `password`. Additionally, our form component will accept an `onLogin` prop that will execute when the user clicks on the "Login" button. We'll also accept a `loading` prop for when the form submission is in progress, and an `error` message prop to be displayed when an error occurs.

Now that we've created our login component, let's add a login page that will make use of our new component.

```jsx
// src/pages/Login.js
import React, { useState, useEffect } from "react";
import { LoginForm } from "../components/LoginForm";

export function Login({ neurosity, user, setUser, setDeviceId }) {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [isLoggingIn, setIsLoggingIn] = useState(false);

  function onLogin({ email, password, deviceId }) {
    if (email && password && deviceId) {
      setError("");
      setEmail(email);
      setPassword(password);
      setDeviceId(deviceId);
    } else {
      setError("Please fill the form");
    }
  }

  return <LoginForm onLogin={onLogin} loading={isLoggingIn} error={error} />;
}
```

![Login form](https://dev-to-uploads.s3.amazonaws.com/i/aur340eejmmzjuf5fsgo.png)

The goal of this page is to display the login form, add basic form validation via the `setError` function, and execute a login function. For the latter, let's add a side effect that will sync with `email`, `password` and the props received the page.

```jsx
useEffect(() => {
  if (!user && neurosity && email && password) {
    login();
  }

  async function login() {
    setIsLoggingIn(true);
    const auth = await neurosity.login({ email, password }).catch((error) => {
      setError(error.message);
    });

    if (auth) {
      setUser(auth.user);
    }

    setIsLoggingIn(false);
  }
}, [email, password, neurosity, user, setUser, setError]);
```

You can think of `user` as the object that holds the auth user session set by the Neurosity SDK. So we are only calling our `login()` function if there is no auth session, we have a Neurosity instance in the state, and the user has submitted an email and password.

Very soon you'll find out how we'll receive the props: `neurosity, user, setUser, setDeviceId`. But before we do that, let's go back to our `App.js` and start putting it all together.

## ⚙️ App State

To keep this app simple, we'll just be using React's `useState` hook, the Reach Router, and a local storage hook brought to you by [react-use](https://github.com/streamich/react-use). This means our general application state strategy will consist of keeping the global state at the App component level and passing down the necessary props to its child components.

- `npm install @reach/router react-use`

We'll start with a single route, but we'll add 2 more routes as we continue to build the app.

```jsx
// src/App.js
import React, { useState, useEffect } from "react";
import { Router, navigate } from "@reach/router";
import useLocalStorage from "react-use/lib/useLocalStorage";
import { Login } from "./pages/Login";

export function App() {
  const [neurosity, setNeurosity] = useState(null);
  const [user, setUser] = useState(null);
  const [deviceId, setDeviceId] = useLocalStorage("deviceId");
  const [loading, setLoading] = useState(true);

  return (
    <Router>
      <Login
        path="/"
        neurosity={neurosity}
        user={user}
        setUser={setUser}
        setDeviceId={setDeviceId}
      />
    </Router>
  );
}
```

If you were wondering why have we decided to keep the `deviceId` in the local storage, it is because we'll need to access it before and after the user has logged in. It also makes a nicer user experience not to have to enter it multiple times.

## 🤯 Neurosity SDK

Now that we have basic state management in place, let's integrate our app with _Neurosity_ by installing the SDK and importing it in `App.js`.

- `npm install @neurosity/sdk`

```jsx
import { Neurosity } from "@neurosity/sdk";
```

Connecting to a Neurosity device is simple. We instantiate a new _Neurosity_ class and pass the Device ID. We can add a side effect that sets the instance to the App component state by syncing with `deviceId`.

```jsx
useEffect(() => {
  if (deviceId) {
    const neurosity = new Neurosity({ deviceId });
    setNeurosity(neurosity);
  } else {
    setLoading(false);
  }
}, [deviceId]);
```

Another state we want to sync is the `user` state.

In the following example, we'll add a side effect that syncs with the value of the `neurosity` instance. If `neurosity` hasn't been set yet, then we'll skip subscribing to _calm_ events until the `neurosity` instance is created.

```jsx
useEffect(() => {
  if (!neurosity) {
    return;
  }

  const subscription = neurosity.onAuthStateChanged().subscribe((user) => {
    if (user) {
      setUser(user);
    } else {
      navigate("/");
    }
    setLoading(false);
  });

  return () => {
    subscription.unsubscribe();
  };
}, [neurosity]);
```

If the app has an active user session persisted by the Neurosity SDK authentication, we'll want to get the current logged in user, and set it to the state in our App component.

The `onAuthStateChanged` method returns an observable of user auth events. It is important to note that when using the Neurosity SDK in the browser, the session will persist via local storage. So, if you close the app, or reload the page, the session will persist and `onAuthStateChanged` will return the user session instead of `null`. This is exactly what we want.

If no session is detected we can navigate to the login page. Otherwise, set `user` in the component's state.

We can complete full authentication by adding a Logout page.

```jsx
// src/pages/Logout.js
import { useEffect } from "react";
import { navigate } from "@reach/router";

export function Logout({ neurosity, resetState }) {
  useEffect(() => {
    if (neurosity) {
      neurosity.logout().then(() => {
        resetState();
        navigate("/");
      });
    }
  }, [neurosity, resetState]);

  return null;
}
```

The logout page is simply a React component with no DOM elements. The only logic we need is a side effect that will call the `neurosity.logout()` method if the `neurosity` instance is present. Lastly, it redirects the user to the initial route after logging out.

This component can now be added as a route in `App.js`.

```jsx
// src/App.js
// ...
import { Logout } from "./pages/Logout";
// ...

return (
  <Router>
    {/* ... */}
    <Logout
      path="/logout"
      neurosity={neurosity}
      resetState={() => {
        setNeurosity(null);
        setUser(null);
        setDeviceId("");
      }}
    />
  </Router>
);
```

Now that authentication is completed, let's add a navigation component to our app.

## 💻 Navigation

Knowing the status of the device at all times is an important part of the user experience. The idea here is to display whether the device is online or offline, charging, or in sleep mode.

So, let's add a `Status` component that uses a map for the label of the state, and another map for the color representing the state. This logic is very similar to the status bar used in the Developer Console.

```jsx
// src/components/Status.js
import React, { useState, useEffect } from "react";

const statesLabels = {
  booting: "Starting OS...",
  shuttingOff: "Shutting off...",
  updating: "Updating OS...",
  online: "Online",
  offline: "Offline"
};

const stateColors = {
  booting: "darkslategrey",
  shuttingOff: "darkslategrey",
  updating: "orange",
  online: "limegreen",
  offline: "crimson"
};

function getStatusColor(state) {
  if (state in stateColors) {
    return stateColors[state];
  }

  return stateColors.offline;
}

export function Status({ neurosity, info }) {
  const [status, setStatus] = useState(null);
  const { state, charging, battery, sleepMode } = status || {};

  useEffect(() => {
    if (!neurosity) {
      return;
    }

    const subscription = neurosity.status().subscribe((status) => {
      setStatus(status);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [neurosity]);

  if (!status) {
    return <div>Connecting to device...</div>;
  }

  return (
    <aside>
      {info ? <h3 className="card-heading">{info.deviceNickname}</h3> : null}
      <div className="status-item status-state">
        <span
          className="status-indicator"
          style={{ background: getStatusColor(state) }}
        ></span>
        {state in statesLabels ? statesLabels[state] : state}
      </div>
      {state !== "offline" ? (
        <div className="status-item status-battery">
          <span role="img" aria-label="Electricity Emoji">
            &#x26A1;
          </span>
          {charging ? " Charging " : " Charged "}
          {battery}%
        </div>
      ) : null}
      {sleepMode && state !== "offline" ? (
        <div className="status-item status-sleep-mode">
          <span role="img" aria-label="Moon Emoji">
            &#127769;
          </span>
          {" Sleep mode "}
        </div>
      ) : null}
    </aside>
  );
}
```

Next, a `Nav` component can fetch the device info, show our new `Status` component, and a logout button.

```jsx
// src/components/Nav.js
import React, { useState, useEffect } from "react";
import { navigate } from "@reach/router";

import { Status } from "./Status";
import { Footer } from "./Footer";

export function Nav({ neurosity }) {
  const [info, setInfo] = useState(null);

  useEffect(() => {
    if (!neurosity) {
      return;
    }

    neurosity.getInfo().then((info) => {
      setInfo(info);
    });
  }, [neurosity]);

  return (
    <nav className="card">
      <Status neurosity={neurosity} info={info} />
      <button onClick={() => navigate("/logout")} className="card-btn">
        Logout
      </button>
    </nav>
  );
}
```

Now that our app displays the state of the device at any given time, let's add App logic based on our _cognitive state_!

## 🧠 Cognitive State

This is the fun part. This is where we get to access brain data and map it to the app state.

By subscribing to `neurosity.calm()`, we get a new `calm` score approximately every second. So, let's add a page to display the calm score.

> 💡 Learn more about the [calm score](../api/calm).

```jsx
// src/pages/Calm.js
import React, { useState, useEffect } from "react";
import { Nav } from "../components/Nav";

export function Calm({ user, neurosity }) {
  const [calm, setCalm] = useState(0);

  useEffect(() => {
    if (!user || !neurosity) {
      return;
    }

    const subscription = neurosity.calm().subscribe((calm) => {
      setCalm(Number(calm.probability.toFixed(2)));
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [user, neurosity]);

  return (
    <main className="main-container">
      {user ? <Nav neurosity={neurosity} /> : null}
      <div className="calm-score">
        &nbsp;{calm * 100}% <div className="calm-word">Calm</div>
      </div>
    </main>
  );
}
```

A side effect that syncs with the instance of `neurosity` and with `user` will create a subscription to the Calm API.

> All neurosity metrics, including `neurosity.calm()` return an RxJS subscription that we can use to safely unsubscribe when the component unmounts.

And finally, we add our Calm page to `App.js`.

```jsx
// src/App.js
// ...
import { Calm } from "./pages/Calm";
// ...

// If already authenticated, redirect user to the Calm page
useEffect(() => {
  if (user) {
    navigate("/calm");
  }
}, [user]);

return (
  <Router>
    {/* ... */}
    <Calm path="/calm" neurosity={neurosity} user={user} />
  </Router>
);
```

![Neurosity React Starter](https://github.com/neurosity/notion-react-starter/raw/master/public/notion-react-starter.png)

And with that, your first Neurosity React App is now complete.

- [View full code](https://github.com/neurosity/notion-react-starter)



================================================
File: examples/browser/auth.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Neurosity SDK - Auth Inheritance</title>
  </head>
  <body>
    <pre>View source</pre>
    <script src="//www.gstatic.com/firebasejs/7.2.0/firebase-app.js"></script>
    <script src="//www.gstatic.com/firebasejs/7.2.0/firebase-auth.js"></script>
    <script src="//www.gstatic.com/firebasejs/7.2.0/firebase-database.js"></script>
    <script type="module">
      import { Neurosity } from "./neurosity.mjs";

      const config = {
        apiKey: "AIzaSyB0TkZ83Fj0CIzn8AAmE-Osc92s3ER8hy8",
        authDomain: "neurosity-device.firebaseapp.com",
        databaseURL: "https://neurosity-device.firebaseio.com",
        projectId: "neurosity-device",
        storageBucket: "neurosity-device.appspot.com",
        messagingSenderId: "212595049674"
      };

      firebase.initializeApp(config);

      (async () => {
        await firebase.auth().signInWithEmailAndPassword("email", "password");

        firebase.auth().onAuthStateChanged((user) => {
          console.log("app user", user ? user.uid : null);
        });

        const neurosity = new Neurosity({
          deviceId: "deviceId"
        });

        // Neurosity login is not required since a previously
        // defined neurosity firebase app is used for Neurosity

        const info = await neurosity.getInfo();
        console.log("info", info);
      })();
    </script>
  </body>
</html>



================================================
File: examples/browser/cloud.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Neurosity SDK - Cloud mode</title>
  </head>
  <body>
    <pre>View source</pre>
    <script type="module">
      import { Neurosity } from "./neurosity.mjs";

      (async () => {
        const neurosity = new Neurosity({
          deviceId: process.env.NEUROSITY_DEVICE_ID
        });

        await neurosity.login({
          email: process.env.NEUROSITY_EMAIL,
          password: process.env.NEUROSITY_PASSWORD
        });

        const info = await neurosity.getInfo();
        console.log("info", info);
      })();
    </script>
  </body>
</html>



================================================
File: examples/browser/index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Neurosity SDK - Examples</title>
  </head>
  <body>
    <ul>
      <li><a href="auth.html">Auth</a></li>
      <li><a href="cloud.html">Cloud</a></li>
      <li><a href="training.html">Training</a></li>
    </ul>
  </body>
</html>



================================================
File: examples/browser/training.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Neurosity SDK - Training example</title>
  </head>
  <body>
    <pre>View source</pre>
    <script type="module">
      import { Neurosity } from "./neurosity.mjs";

      (async () => {
        const neurosity = new Neurosity({
          deviceId: process.env.NEUROSITY_DEVICE_ID
        });

        await neurosity.login({
          email: process.env.NEUROSITY_EMAIL,
          password: process.env.NEUROSITY_PASSWORD
        });

        const info = await neurosity.getInfo();
        console.log("info", info);

        const trainingOptions = {
          metric: "kinesis",
          label: "leftHandPinch"
        };

        // Show metric and label message to user now
        let message = "imagine left hand pinch";
        setTimeout(neurosity.training.record, 3500, trainingOptions);
        setTimeout(neurosity.training.record, 3700, trainingOptions);
        setTimeout(neurosity.training.record, 4000, trainingOptions);

        // Show baseline message in 5 seconds from now
        setTimeout(() => {
          message = "relax and clear your mind";
        }, 5000);

        setTimeout(neurosity.training.record, 8000, {
          ...trainingOptions,
          baseline: true
        });

        setTimeout(neurosity.training.record, 8500, {
          ...trainingOptions,
          baseline: true
        });

        setTimeout(neurosity.training.record, 9000, {
          ...trainingOptions,
          fit: true,
          baseline: true
        });
      })();
    </script>
  </body>
</html>



================================================
File: examples/node/accelerometer.js
================================================
module.exports = async function (neurosity) {
  neurosity.accelerometer().subscribe((accelerometer) => {
    console.log("accelerometer", accelerometer);
  });
};



================================================
File: examples/node/action.js
================================================
module.exports = async function (neurosity) {
  neurosity.dispatchAction({
    command: "random",
    action: "send",
    responseRequired: true,
    message: {
      value: Math.random()
    }
  });
};



================================================
File: examples/node/apiProps.js
================================================
module.exports = async function (neurosity) {
  console.log(
    Object.getOwnPropertyNames(neurosity).concat(
      Object.getOwnPropertyNames(Object.getPrototypeOf(neurosity))
    )
  );

  await neurosity.disconnect();
};



================================================
File: examples/node/authCustomToken.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity();

(async () => {
  await neurosity
    .login({
      customToken: process.env.NEUROSITY_CUSTOM_TOKEN
    })
    .catch((error) => {
      console.log("error", error);
    });

  neurosity.status().subscribe((status) => {
    console.log("status", status);
  });
})();



================================================
File: examples/node/authEmailPassword.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  deviceId: process.env.NEUROSITY_DEVICE_ID
});

neurosity.onAuthStateChanged().subscribe((user) => {
  console.log("onAuthStateChanged", user ? user.uid : user);
});

(async () => {
  await neurosity.login({
    email: process.env.NEUROSITY_EMAIL,
    password: process.env.NEUROSITY_PASSWORD
  });

  neurosity.status().subscribe((status) => {
    console.log("status", status);
  });

  await neurosity.logout();
})();



================================================
File: examples/node/authIdToken.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  deviceId: process.env.NEUROSITY_DEVICE_ID
});

(async () => {
  await neurosity
    .login({
      idToken: process.env.NEUROSITY_ID_TOKEN,
      providerId: process.env.NEUROSITY_PROVIDER_ID
    })
    .catch((error) => {
      console.log("error", error);
    });

  neurosity.status().subscribe((status) => {
    console.log("status", status);
  });
})();



================================================
File: examples/node/authInheritance.js
================================================
const { Neurosity } = require("../..");
const firebase = require("firebase/app");
require("firebase/auth");

const config = {
  apiKey: "AIzaSyB0TkZ83Fj0CIzn8AAmE-Osc92s3ER8hy8",
  authDomain: "neurosity-device.firebaseapp.com",
  databaseURL: "https://neurosity-device.firebaseio.com",
  projectId: "neurosity-device",
  storageBucket: "neurosity-device.appspot.com",
  messagingSenderId: "212595049674"
};

firebase.initializeApp(config);

(async () => {
  await firebase
    .auth()
    .signInWithEmailAndPassword(
      process.env.NEUROSITY_EMAIL,
      process.env.NEUROSITY_PASSWORD
    );

  firebase.auth().onAuthStateChanged((user) => {
    console.log("app user", user ? user.uid : null);
  });

  const neurosity = new Neurosity({
    deviceId: process.env.NEUROSITY_DEVICE_ID
  });

  // Neurosity login is not required since a previously
  // defined neurosity firebase app is used for Neurosity

  const info = await neurosity.getInfo();
  console.log("info", info);

  neurosity.status().subscribe((status) => {
    console.log("status", status);
  });
})();



================================================
File: examples/node/autoSelectDevice.js
================================================
const { Neurosity } = require("../..");

// Note: when deviceId is not passed,
// Neurosity will auto select the first claimed device
const neurosity = new Neurosity();

(async () => {
  const response = await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log("error", error);
    });

  console.log("response", response);

  neurosity.status().subscribe((status) => {
    console.log("status", status);
  });
})();



================================================
File: examples/node/brainwaves.js
================================================
module.exports = async function (neurosity) {
  neurosity.brainwaves("raw", "powerByBand").subscribe((brainwaves) => {
    console.log("brainwaves", brainwaves);
  });
};



================================================
File: examples/node/calm.js
================================================
module.exports = async function (neurosity) {
  neurosity.calm().subscribe((calm) => {
    console.log("calm", calm);
  });
};



================================================
File: examples/node/clients.js
================================================
const { Neurosity } = require("../..");

new Neurosity({
  deviceId: process.env.NEUROSITY_DEVICE_ID
});

setTimeout(() => {
  new Neurosity({
    deviceId: process.env.NEUROSITY_DEVICE_ID
  });
}, 2000);



================================================
File: examples/node/cloud.js
================================================
module.exports = async function (neurosity) {
  const info = await neurosity.getInfo();
  console.log("info", info);
};



================================================
File: examples/node/createAccount.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  // important to set `autoSelectDevice` to false when creating an account
  // since there will be no devices to select from
  autoSelectDevice: false
});

neurosity.onAuthStateChanged().subscribe((user) => {
  console.log(
    "onAuthStateChanged",
    user ? `logged in as ${user.email}` : "not logged in"
  );
});

neurosity
  .createAccount({
    email: "tester+neurosity@neurosity.co",
    password: `${Math.random()}`
  })
  .then(() => {
    console.log("account created");
  })
  .catch((error) => {
    console.log("error", error);
  });



================================================
File: examples/node/createCustomToken.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity();

(async () => {
  await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log("error", error);
    });

  const customToken = await neurosity.createCustomToken().catch((error) => {
    console.log(error);
  });

  if (customToken) {
    console.log(customToken);
  }
})();



================================================
File: examples/node/createSkill.js
================================================
const { createSkill } = require("../..");

module.exports = createSkill((neurosity, skill) => {
  console.log("neurosity", neurosity);
  console.log("skill instance", skill);

  skill.metric("marker").subscribe((data) => {
    console.log(data);
    // { timestamp: 23453632423 }
  });

  skill.metric("navigation").next({
    right: true
  });

  neurosity.kinesis("liftRightArm").subscribe(() => {});

  // should throw error as is not an allowed metric
  // neurosity.emotion().subscribe(console.log);

  return async () => {
    // Any additional clean-up here
  };
});



================================================
File: examples/node/deleteAccount.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  autoSelectDevice: false
});

neurosity.onAuthStateChanged().subscribe((user) => {
  console.log(
    "onAuthStateChanged",
    user ? `logged in as ${user.email}` : "not logged in"
  );
});

neurosity
  .createAccount({
    email: "tester+delete+account@neurosity.co",
    password: `${Math.random()}`
  })
  .then(async () => {
    console.log("account created");

    await new Promise((r) => setTimeout(r, 10000));

    await neurosity.deleteAccount();

    console.log("account deleted");
  })
  .catch((error) => {
    console.log("error", error);
  });



================================================
File: examples/node/focus.js
================================================
module.exports = async function (neurosity) {
  neurosity.focus().subscribe((focus) => {
    console.log("focus", focus);
  });
};



================================================
File: examples/node/getDevices.js
================================================
const { Neurosity } = require("../..");

// Note: when `deviceId` is not passed, and `autoSelectDevice`
// is set to not set (defaults to true), the first claimed
// device will be automatically selected.
const neurosity = new Neurosity();

(async () => {
  neurosity.onUserDevicesChange().subscribe((devices) => {
    console.log("devices", devices);
  });

  await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log("error", error);
    });

  neurosity
    .getDevices()
    .then((devices) => {
      console.log("devices (once)", devices);
    })
    .catch((error) => {
      console.error("devices catch", error);
    });
})();



================================================
File: examples/node/haptics.js
================================================
module.exports = async function (neurosity) {
  const info = await neurosity.getInfo();
  console.log("info", info);

  const effects = neurosity.getHapticEffects();
  const hapticOptions = {
    P7: [effects.strongClick100],
    P8: [
      effects.transitionRampUpLongSmooth1_0_to_100,
      effects.transitionRampDownLongSmooth1_100_to_0,
      effects.transitionRampUpLongSmooth1_0_to_100,
      effects.transitionRampDownLongSmooth1_100_to_0,
      effects.transitionRampUpLongSmooth1_0_to_100,
      effects.transitionRampDownLongSmooth1_100_to_0
    ]
  };

  const res = await neurosity.haptics(hapticOptions);
  console.log("Res", res);
};



================================================
File: examples/node/index.js
================================================
require("dotenv").config();
const { Neurosity } = require("../..");
const inquirer = require("inquirer");
const fs = require("fs");

const deviceId = process.env.NEUROSITY_DEVICE_ID;
const choiceName = process.argv[2];

const choices = fs
  .readdirSync("./examples/node")
  .filter((fileName) => fileName !== "index.js");

if (choices.map((choice) => choice.replace(".js", "")).includes(choiceName)) {
  const exampleFileName = `${choiceName}.js`;
  runFile(exampleFileName).catch((error) => {
    console.log("runFile error -> ", error);
  });
  return;
}

const questions = [
  {
    type: "list",
    name: "exampleFileName",
    message: `Select an example to run for device id ${deviceId}?`,
    choices
  }
];

inquirer.prompt(questions).then(async ({ exampleFileName }) => {
  runFile(exampleFileName).catch((error) => {
    console.log("runFile error -> ", error);
  });
});

async function runFile(exampleFileName) {
  const exampleFunction = require(`./${exampleFileName}`);

  if (typeof exampleFunction !== "function") {
    return;
  }

  const neurosity = deviceId
    ? new Neurosity({
        deviceId
      })
    : new Neurosity();

  await neurosity.login({
    email: process.env.NEUROSITY_EMAIL,
    password: process.env.NEUROSITY_PASSWORD
  });

  await exampleFunction(neurosity);
}



================================================
File: examples/node/kinesis.js
================================================
module.exports = async function (neurosity) {
  neurosity.kinesis("leftHandPinch").subscribe((kinesis) => {
    console.log("kinesis", kinesis);
  });
};



================================================
File: examples/node/manuallySelectDevice.js
================================================
const { Neurosity } = require("../..");

// Note: when `deviceId` is not passed, and `autoSelectDevice`
// is set to false, the `selectDevice method should be called`
const neurosity = new Neurosity({
  autoSelectDevice: false
});

(async () => {
  await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log("error", error);
    });

  // Select device
  await neurosity.selectDevice((devices) => devices[0]);

  neurosity.status().subscribe((status) => {
    console.log("status", status);
  });
})();



================================================
File: examples/node/markers.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  autoSelectDevice: false
  //timesync: true
});

main();

async function main() {
  await neurosity.login({
    email: process.env.NEUROSITY_EMAIL,
    password: process.env.NEUROSITY_PASSWORD
  });

  // Replace with your device nickname, or remove line and set autoSelectDevice to true
  await neurosity.selectDevice(["deviceNickname", "Crown-85A"]);

  let count = 0;

  neurosity.brainwaves("raw").subscribe((brainwaves) => {
    if (brainwaves.info && brainwaves.info.markers) {
      console.log("Got a marker!", brainwaves.info.markers);
    }
  });

  setTimeout(() => {
    setInterval(() => {
      neurosity.addMarker(`my-marker-${count}`).catch((error) => {
        console.log(error);
      });
      count++;
    }, 100);
  }, 5000);
}



================================================
File: examples/node/multipleDevices.js
================================================
const { Neurosity } = require("../..");
const { EMPTY } = require("rxjs");
const { switchMap, map } = require("rxjs/operators");

// Note: when `deviceId` is not passed, and `autoSelectDevice`
// is set to false, the `selectDevice method should be called`
const neurosity = new Neurosity({
  autoSelectDevice: false
});

(async () => {
  await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log("error", error);
    });

  const devices = await neurosity.getDevices().catch(console.error);

  devices.forEach(async (device) => {
    const { deviceId } = device;
    const deviceInstance = new Neurosity({ deviceId });

    deviceInstance
      .onAuthStateChanged()
      .pipe(
        switchMap((user) =>
          user
            ? deviceInstance.status().pipe(
                map((status) => ({
                  [deviceId]: status
                }))
              )
            : EMPTY
        )
      )
      .subscribe((status) => {
        console.log(status);
      });
  });
})();



================================================
File: examples/node/oauth.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  autoSelectDevice: false
});

main();

async function main() {
  await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log("login error", error.response);
    });

  const token = await neurosity
    .getOAuthToken({
      clientId: process.env.NEUROSITY_OAUTH_CLIENT_ID,
      clientSecret: process.env.NEUROSITY_OAUTH_CLIENT_SECRET,
      userId: process.env.NEUROSITY_OAUTH_USER_ID
    })
    .catch((error) => {
      console.log("oauth error", error.response);
    });

  console.log("token", token);
}



================================================
File: examples/node/osVersion.js
================================================
module.exports = async function (neurosity) {
  neurosity.osVersion().subscribe((osVersion) => {
    console.log("osVersion", osVersion);
  });
};



================================================
File: examples/node/predictions.js
================================================
module.exports = async function (neurosity) {
  neurosity
    .predictions("leftHandPinch", "jumpingJacks")
    .subscribe((prediction) => {
      console.log("prediction", prediction);
    });
};



================================================
File: examples/node/rawUnfiltered.js
================================================
module.exports = async function (neurosity) {
  // data does not get notch or band pass filters applied unlike the `raw` option
  neurosity.brainwaves("rawUnfiltered").subscribe((brainwaves) => {
    console.log("brainwaves", brainwaves);
  });
};



================================================
File: examples/node/settings.js
================================================
module.exports = async function (neurosity) {
  neurosity.settings().subscribe((settings) => {
    console.log("settings", settings);
  });

  await delay();
  const x = await neurosity.changeSettings({ lsl: true, simulate: true });
  await delay();
  await neurosity.changeSettings({ simulate: false });
  await delay();
  await neurosity.changeSettings({ lsl: false });
};

function delay(ms = 500) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}



================================================
File: examples/node/signalQuality.js
================================================
module.exports = async function (neurosity) {
  neurosity.signalQuality().subscribe((signalQuality) => {
    console.log("signalQuality", signalQuality);
  });
};



================================================
File: examples/node/skill.js
================================================
module.exports = async function (neurosity) {
  const akimy = await neurosity.skill("app.neurosity.akimy");

  akimy.metric("fromDevice").subscribe((data) => {
    console.log("fromDevice", data);
  });

  setInterval(() => {
    akimy.metric("fromDevice").next({
      hello: Date.now()
    });
  }, 2000);
};



================================================
File: examples/node/status.js
================================================
module.exports = async function (neurosity) {
  neurosity.status().subscribe((status) => {
    console.log("status", status);
  });
};



================================================
File: examples/node/subscriptions.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  deviceId: process.env.NEUROSITY_DEVICE_ID
});

const neurosity2 = new Neurosity({
  deviceId: process.env.NEUROSITY_DEVICE_ID
});

(async () => {
  await neurosity.login({
    email: process.env.NEUROSITY_EMAIL,
    password: process.env.NEUROSITY_PASSWORD
  });

  await neurosity2.login({
    email: process.env.NEUROSITY_EMAIL,
    password: process.env.NEUROSITY_PASSWORD
  });

  const sub1 = neurosity.signalQuality().subscribe();
  const sub2 = neurosity.calm().subscribe();
  const sub3 = neurosity.focus().subscribe();
  const sub4 = neurosity2.focus().subscribe();

  setTimeout(() => {
    sub2.unsubscribe();
  }, 2000);

  setTimeout(() => {
    neurosity.goOffline();
    setTimeout(() => {
      sub1.unsubscribe();
    }, 100);
  }, 6000);

  setTimeout(() => {
    neurosity.goOnline();

    setTimeout(() => {
      sub3.unsubscribe();
    }, 6000);
  }, 10000);
})();



================================================
File: examples/node/switchSelectedDevice.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity();

(async () => {
  await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log("error", error);
    });

  neurosity.calm().subscribe();
  neurosity.focus().subscribe();

  let i = 0;
  setInterval(() => {
    neurosity.selectDevice((devices) => devices[i]);
    i = i === 0 ? 1 : 0;
  }, 5000);

  neurosity.onDeviceChange().subscribe((device) => {
    console.log("Changed device to", device.deviceId);
  });

  neurosity.status().subscribe((status) => {
    console.log("status", status.battery);
  });

  neurosity.settings().subscribe((settings) => {
    console.log("settings", settings);
  });
})();



================================================
File: examples/node/timesync.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  deviceId: process.env.NEUROSITY_DEVICE_ID,
  timesync: true
});

(async () => {
  await neurosity
    .login({
      email: process.env.NEUROSITY_EMAIL,
      password: process.env.NEUROSITY_PASSWORD
    })
    .catch((error) => {
      console.log(error);
    });

  process.stdin.resume();
})();



================================================
File: examples/node/training.js
================================================
module.exports = async function (neurosity) {
  const info = await neurosity.getInfo();
  console.log("info", info);

  const trainingOptions = {
    metric: "kinesis",
    label: "leftHandPinch",
    experimentId: "-experiment-123"
  };

  // Show metric and label message to user now
  let message = "imagine left hand pinch";
  setTimeout(neurosity.training.record, 3500, trainingOptions);
  setTimeout(neurosity.training.record, 3700, trainingOptions);
  setTimeout(neurosity.training.record, 4000, trainingOptions);

  // Show baseline message in 5 seconds from now
  setTimeout(() => {
    message = "relax and clear your mind";
  }, 5000);

  setTimeout(neurosity.training.record, 8000, {
    ...trainingOptions,
    baseline: true
  });

  setTimeout(neurosity.training.record, 8500, {
    ...trainingOptions,
    baseline: true
  });

  setTimeout(neurosity.training.record, 9000, {
    ...trainingOptions,
    fit: true,
    baseline: true
  });
};



================================================
File: examples/node/transferDevice.js
================================================
const { Neurosity } = require("../..");

const neurosity = new Neurosity({
  autoSelectDevice: false,
  emulator: true
});

(async () => {
  const auth = await neurosity
    .login({
      email: process.env.NEUROSITY_EMULATOR_EMAIL,
      password: process.env.NEUROSITY_EMULATOR_PASSWORD
    })
    .catch((error) => {
      console.log(error);
    });

  if (!auth) {
    return;
  }

  console.log(`logged in as ${auth?.user?.email}`);

  neurosity
    .transferDevice({
      // recipientsEmail: "test@testemail.com",
      recipientsUserId: "L4orwrLG9hVNLTYBmIzYwKkENLGT",
      deviceId: "994f0e7ce93994f0e71c151e614f54bb"
    })
    .then(() => {
      console.log("success");
    })
    .catch((error) => {
      console.log("error", error.message);
    });
})();



================================================
File: src/Neurosity.ts
================================================
import { combineLatest, Observable, of, throwError } from "rxjs";
import { ReplaySubject, firstValueFrom } from "rxjs";
import { map, startWith, switchMap } from "rxjs/operators";
import { distinctUntilChanged } from "rxjs/operators";
import isEqual from "fast-deep-equal";
import { CloudClient, createUser } from "./api/index";
import { credentialWithLink, SERVER_TIMESTAMP } from "./api/index";
import { SDKOptions } from "./types/options";
import { STREAMING_MODE, STREAMING_TYPE } from "./types/streaming";
import { Training } from "./types/training";
import { Credentials, EmailAndPassword } from "./types/credentials";
import { CustomToken } from "./types/credentials";
import { Settings, ChangeSettings } from "./types/settings";
import { SignalQuality } from "./types/signalQuality";
import { Kinesis } from "./types/kinesis";
import { Calm } from "./types/calm";
import { Focus } from "./types/focus";
import { getLabels } from "./utils/subscription";
import { BrainwavesLabel, Epoch, PowerByBand, PSD } from "./types/brainwaves";
import { Accelerometer } from "./types/accelerometer";
import { DeviceInfo, OSVersion } from "./types/deviceInfo";
import { DeviceStatus, STATUS } from "./types/status";
import { Action } from "./types/actions";
import { HapticEffects } from "./types/hapticEffects";
import * as errors from "./utils/errors";
import * as platform from "./utils/platform";
import * as hapticEffects from "./utils/hapticEffects";
import { validateOAuthScopeForFunctionName } from "./utils/oauth";
import { validateOAuthScopeForAction } from "./utils/oauth";
import { createOAuthURL } from "./api/https/createOAuthURL";
import { getOAuthToken } from "./api/https/getOAuthToken";
import { OAuthConfig, OAuthQuery } from "./types/oauth";
import { OAuthQueryResult, OAuthRemoveResponse } from "./types/oauth";
import { UserClaims } from "./types/user";
import { isNode } from "./utils/is-node";
import { getCloudMetric } from "./utils/metrics";
import { Experiment } from "./types/experiment";
import { TransferDeviceOptions } from "./utils/transferDevice";
import { BluetoothClient, osHasBluetoothSupport } from "./api/bluetooth";
import { BLUETOOTH_CONNECTION } from "./api/bluetooth/types";

const defaultOptions = {
  timesync: false,
  autoSelectDevice: true,
  streamingMode: STREAMING_MODE.WIFI_ONLY,
  emulator: false,
  emulatorHost: "localhost",
  emulatorAuthPort: 9099,
  emulatorDatabasePort: 9000,
  emulatorFunctionsPort: 5001,
  emulatorFirestorePort: 8080,
  emulatorOptions: {}
};

/**
 * import StreamingModes from "@site/src/components/StreamingModes";
 *
 * Example
 * ```typescript
 * import { Neurosity } from "@neurosity/sdk";
 *
 * const neurosity = new Neurosity();
 * ```
 */
export class Neurosity {
  /**
   * @hidden
   */
  protected options: SDKOptions;

  /**
   * @hidden
   */
  protected cloudClient: CloudClient;

  /**
   * @hidden
   */
  protected bluetoothClient: BluetoothClient;

  /**
   * @hidden
   */
  protected isMissingBluetoothTransport: boolean;

  /**
   * @hidden
   */
  private streamingMode$ = new ReplaySubject<STREAMING_MODE>(1);

  /**
   *
   * @hidden
   */
  static credentialWithLink = credentialWithLink;

  /**
   *
   * @hidden
   */
  static createUser = createUser;

  /**
   *
   * @hidden
   */
  static SERVER_TIMESTAMP = SERVER_TIMESTAMP;

  /**
   * Creates new instance of the Neurosity SDK
   * 
   * ```typescript
   * const neurosity = new Neurosity();
   * ```

   * @param options
   */
  constructor(options: SDKOptions = {}) {
    const { streamingMode, bluetoothTransport } = options;

    this.options = Object.freeze({
      ...defaultOptions,
      ...options
    });

    this.cloudClient = new CloudClient(this.options);

    if (!!bluetoothTransport) {
      this.bluetoothClient = new BluetoothClient({
        selectedDevice$: this.onDeviceChange(),
        osHasBluetoothSupport$: this._osHasBluetoothSupport(),
        createBluetoothToken: this.createBluetoothToken.bind(this),
        transport: bluetoothTransport
      });
    }

    this._initStreamingMode(streamingMode, !!bluetoothTransport);
  }

  /**
   *
   * @hidden
   */
  _initStreamingMode(
    streamingMode: STREAMING_MODE,
    hasBluetoothTransport: boolean
  ): void {
    const streamingModeFeaturesBluetooth = [
      STREAMING_MODE.BLUETOOTH_WITH_WIFI_FALLBACK,
      STREAMING_MODE.WIFI_WITH_BLUETOOTH_FALLBACK
    ].includes(streamingMode);

    const isInvalidStreamingMode =
      !Object.values(STREAMING_MODE).includes(streamingMode);

    const isMissingBluetoothTransport =
      streamingModeFeaturesBluetooth && !hasBluetoothTransport;

    this.isMissingBluetoothTransport = isMissingBluetoothTransport;

    const shouldDefaultToCloud =
      !streamingMode || isInvalidStreamingMode || isMissingBluetoothTransport;

    // Default to backwards compatible cloud streaming mode if:
    // 1. No streaming mode is provided
    // 2. An invalid streaming mode is provided
    // 3. A streaming mode containing bluetooth is provided, but without a bluetooth transport
    if (shouldDefaultToCloud) {
      this.streamingMode$.next(STREAMING_MODE.WIFI_ONLY);
    } else {
      this.streamingMode$.next(streamingMode);
    }
  }

  /**
   *
   * @hidden
   */
  _osHasBluetoothSupport() {
    return combineLatest({
      selectedDevice: this.onDeviceChange(),
      osVersion: this.osVersion().pipe(startWith(null))
    }).pipe(
      map(({ selectedDevice, osVersion }) =>
        osHasBluetoothSupport(selectedDevice, osVersion)
      )
    );
  }

  /**
   * Subscribe to the device's streaming state changes and the current strategy
   *
   * Streams the current mode of streaming (wifi or bluetooth).
   *
   * ```typescript
   * neurosity.streamingState().subscribe((streamingState) => {
   *   console.log(streamingState);
   *   // { streamingMode: "wifi-only", activeMode: "wifi", connected: true }
   * });
   * ```
   */
  public streamingState(): Observable<{
    connected: boolean;
    activeMode: STREAMING_TYPE;
    streamingMode: STREAMING_MODE;
  }> {
    const isWifiOnline = (state: STATUS) =>
      [STATUS.ONLINE, STATUS.UPDATING].includes(state);

    return this.streamingMode$.pipe(
      switchMap((streamingMode: STREAMING_MODE) => {
        return combineLatest({
          selectedDevice: this.onDeviceChange(),
          osHasBluetoothSupport: this._osHasBluetoothSupport()
        }).pipe(
          switchMap(({ selectedDevice, osHasBluetoothSupport }) => {
            if (!selectedDevice) {
              return of({
                connected: false,
                streamingMode,
                activeMode: STREAMING_TYPE.WIFI
              });
            }

            const isUnableToUseBluetooth =
              this.isMissingBluetoothTransport || !osHasBluetoothSupport;

            if (isUnableToUseBluetooth) {
              return this.cloudClient.status().pipe(
                map(({ state }) => ({
                  connected: isWifiOnline(state),
                  streamingMode,
                  activeMode: STREAMING_TYPE.WIFI
                }))
              );
            }

            return combineLatest({
              wifiStatus: this.cloudClient.status(),
              bluetoothConnection: !!this?.bluetoothClient
                ? this.bluetoothClient.connection()
                : of(BLUETOOTH_CONNECTION.DISCONNECTED)
            }).pipe(
              map(({ wifiStatus, bluetoothConnection }) => {
                const isBluetoothConnected =
                  bluetoothConnection === BLUETOOTH_CONNECTION.CONNECTED;

                switch (streamingMode) {
                  default:
                  case STREAMING_MODE.WIFI_ONLY:
                    return {
                      connected: isWifiOnline(wifiStatus.state),
                      streamingMode,
                      activeMode: STREAMING_TYPE.WIFI
                    };

                  case STREAMING_MODE.WIFI_WITH_BLUETOOTH_FALLBACK:
                    return {
                      connected:
                        isWifiOnline(wifiStatus.state) || !isBluetoothConnected
                          ? isWifiOnline(wifiStatus.state)
                          : isBluetoothConnected,
                      streamingMode,
                      activeMode:
                        isWifiOnline(wifiStatus.state) || !isBluetoothConnected
                          ? STREAMING_TYPE.WIFI
                          : STREAMING_TYPE.BLUETOOTH
                    };

                  case STREAMING_MODE.BLUETOOTH_WITH_WIFI_FALLBACK:
                    return {
                      connected: isBluetoothConnected
                        ? true
                        : isWifiOnline(wifiStatus.state),
                      streamingMode,
                      activeMode: isBluetoothConnected
                        ? STREAMING_TYPE.BLUETOOTH
                        : STREAMING_TYPE.WIFI
                    };
                }
              }),
              distinctUntilChanged((a, b) => isEqual(a, b))
            );
          })
        );
      })
    );
  }

  /**
   *
   * @hidden
   */
  _withStreamingModeObservable<T>(streams: {
    wifi: () => Observable<T>;
    bluetooth: () => Observable<T>;
  }): Observable<any> {
    const { wifi, bluetooth } = streams;

    return this.streamingState().pipe(
      switchMap(({ activeMode }) => {
        switch (activeMode) {
          case STREAMING_TYPE.WIFI:
            return wifi();

          case STREAMING_TYPE.BLUETOOTH:
            return bluetooth();

          default:
            return wifi();
        }
      })
    );
  }

  /**
   *
   * @hidden
   */
  async _withStreamingModePromise<T>(promises: {
    wifi: () => Promise<T>;
    bluetooth: () => Promise<T>;
  }): Promise<T> {
    const { wifi, bluetooth } = promises;

    const { activeMode } = await firstValueFrom(this.streamingState());

    switch (activeMode) {
      case STREAMING_TYPE.WIFI:
        return await wifi();

      case STREAMING_TYPE.BLUETOOTH:
        return await bluetooth();

      default:
        return await wifi();
    }
  }

  /**
   *
   * @hidden
   */
  get bluetooth() {
    return this?.bluetoothClient;
  }

  /**
   *
   * @hidden
   */
  private _getCloudMetricDependencies() {
    return {
      options: this.options,
      cloudClient: this.cloudClient,
      onDeviceChange: this.onDeviceChange.bind(this),
      status: this.status.bind(this)
    };
  }

  /**
   * Starts user session
   *
   * ```typescript
   * await neurosity.login({
   *   email: "...",
   *   password: "..."
   * });
   * ```
   *
   * @param credentials
   */
  public async login(credentials: Credentials): Promise<void> {
    return await this.cloudClient.login(credentials);
  }

  /**
   * Ends user session
   *
   * ```typescript
   * await neurosity.logout();
   * // session has ended
   * ```
   *
   */
  public async logout(): Promise<void> {
    return await this.cloudClient.logout();
  }

  /**
   * @internal
   * Not user facing.
   */
  public __getApp() {
    return this.cloudClient.__getApp();
  }

  /**
   * Subscribe to auth state changes
   *
   * Streams the state of the auth session. If user has logged in, the user object will be set. When logged out, the user object will be null.
   *
   * ```typescript
   * neurosity.onAuthStateChanged().subscribe((user) => {
   *   console.log(user);
   * });
   * ```
   */
  public onAuthStateChanged(): Observable<any> {
    return this.cloudClient.onAuthStateChanged();
  }

  /**
   * @internal
   * Not user facing yet
   */
  public addDevice(deviceId: string): Promise<void> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "addDevice"
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return this.cloudClient.addDevice(deviceId);
  }

  /**
   * @internal
   * Not user facing yet
   */
  public removeDevice(deviceId: string): Promise<void> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "removeDevice"
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return this.cloudClient.removeDevice(deviceId);
  }

  /**
   * @internal
   * Not user facing yet
   */
  public transferDevice(options: TransferDeviceOptions): Promise<void> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "transferDevice"
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return this.cloudClient.transferDevice(options);
  }

  /**
   * @internal
   * Not user facing yet
   */
  public onUserDevicesChange(): Observable<DeviceInfo[]> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "onUserDevicesChange"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this.cloudClient.onUserDevicesChange();
  }

  /**
   * @internal
   * Not user facing yet
   */
  public onUserClaimsChange(): Observable<UserClaims> {
    return this.cloudClient.onUserClaimsChange();
  }

  /**
   * Get user devices
   *
   * Returns a list of devices claimed by the user authenticated.
   *
   * ```typescript
   * const devices = await neurosity.getDevices();
   * console.log(devices);
   * ```
   */
  public async getDevices(): Promise<DeviceInfo[]> {
    return await this.cloudClient.getDevices();
  }

  /**
   * Select Device
   *
   * Rarely necessary, but useful when the user owns multiple devices.
   *
   * A common use case for manually selecting a device is when you wish to build a device dropdown a user can select from, instead of collecting the Device Id from the user ahead of time.
   *
   * The 3 steps to manually selecting a device are:
   *
   * - Set `autoSelectDevice` to false when instantiating the `Neurosity` class.
   * - Authenticate with your Neurosity account to access your devices by calling the `neurosity.login(...)` function.
   * - Call the `neurosity.selectDevice(...)` function with a device selector function.
   *
   * ```typescript
   * const devices = await neurosity.selectDevice((devices) =>
   *   devices.find((device) => device.deviceNickname === "Crown-A1B")
   * );
   *
   * console.log(devices);
   * ```
   *
   * > If you own multiple devices, and don't pass `autoSelectDevice`, then the first device on the list will be automatically selected.
   *
   * For more info, check out the "Device Selection" guide.
   */
  public async selectDevice(
    deviceSelector: (devices: DeviceInfo[]) => DeviceInfo
  ): Promise<DeviceInfo> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "selectDevice"
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return await this.cloudClient.selectDevice(deviceSelector);
  }

  /**
   * Get selected device
   *
   * ```typescript
   * const selectedDevice = await neurosity.getSelectedDevice();
   * console.log(selectedDevice);
   * ```
   */

  public async getSelectedDevice(): Promise<DeviceInfo> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "getSelectedDevice"
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return await this.cloudClient.getSelectedDevice();
  }

  /**
   * ```typescript
   * const info = await neurosity.getInfo();
   * ```
   */
  public async getInfo(): Promise<DeviceInfo> {
    if (!(await this.cloudClient.didSelectDevice())) {
      return Promise.reject(errors.mustSelectDevice);
    }

    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "getInfo"
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return await this._withStreamingModePromise({
      wifi: () => this.cloudClient.getInfo(),
      bluetooth: () => this.bluetoothClient.getInfo()
    });
  }

  /**
   * Observes selected device
   *
   * ```typescript
   * neurosity.onDeviceChange().subscribe(device => {
   *  console.log(device);
   * });
   * ```
   */
  public onDeviceChange(): Observable<DeviceInfo> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "onDeviceChange"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this.cloudClient.onDeviceChange();
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Ends database connection
   *
   * ```typescript
   * await neurosity.disconnect();
   * ```
   */
  public async disconnect(): Promise<void> {
    return await this._withStreamingModePromise({
      wifi: () => this.cloudClient.disconnect(),
      bluetooth: () => this.bluetoothClient.disconnect()
    });
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * @internal
   * Not user facing
   */
  private async dispatchAction(action: Action): Promise<Action> {
    if (!(await this.cloudClient.didSelectDevice())) {
      return Promise.reject(errors.mustSelectDevice);
    }

    const [hasOAuthError, OAuthError] = validateOAuthScopeForAction(
      this.cloudClient.userClaims,
      action
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return await this._withStreamingModePromise({
      wifi: () => this.cloudClient.dispatchAction(action),
      bluetooth: () => this.bluetoothClient.dispatchAction(action)
    });
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Injects an EEG marker to data stream
   *
   * ```typescript
   * neurosity.addMarker("eyes-closed");
   *
   * // later...
   *
   * neurosity.addMarker("eyes-open");
   * ```
   *
   * @param label Name the label to inject
   */
  public async addMarker(label: string): Promise<Action> {
    if (!(await this.cloudClient.didSelectDevice())) {
      throw errors.mustSelectDevice;
    }

    if (!label) {
      throw new Error(`${errors.prefix}A label is required for addMarker`);
    }

    return await this._withStreamingModePromise({
      wifi: () =>
        this.cloudClient.dispatchAction({
          command: "marker",
          action: "add",
          message: {
            label,
            timestamp: this.cloudClient.timestamp
          }
        }),
      bluetooth: () => this.bluetoothClient.addMarker(label)
    });
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Queue haptic motor commands
   *
   * To queue haptic P7 only,
   * ```typescript
   * await neurosity.haptics({
   *   P7: ["tripleClick100"]
   * });
   * ```
   *
   * To queue both motors at the same time
   * ```typescript
   * await neurosity.haptics({
   *   P7: [neurosity.getHapticEffects().strongClick100],
   *   P8: [neurosity.getHapticEffects().strongClick100]
   * });
   * ```
   *
   * You can queue different commands to the motors too
   * ```typescript
   * const effects = neurosity.getHapticEffects();
   * await neurosity.haptics({
   *   P7: [effects.transitionRampUpLongSmooth1_0_to_100,
   *         effects.transitionRampDownLongSmooth1_100_to_0],
   *   P8: [effects.strongClick100]
   * });
   * ```
   *
   * @param effects Effects to queue. The key of the object passed should be the location of the motor
   *  to queue. Each key can be an array of up to 7 commands. There is no haptic support for model
   *  version 1, Notion DK1. The Haptic motor's location is positioned in reference to the 10-10 EEG
   *  system used to label the channels of the Crown's EEG sensors. Notion 2 and Crown have haptics
   *  at P7 and P8. A list of haptic commands can be found on ./utils/hapticCodes.ts - there
   *  are about 127 of them!
   */
  public async haptics(effects: any): Promise<any> {
    const metric = "haptics";
    if (!(await this.cloudClient.didSelectDevice())) {
      return Promise.reject(errors.mustSelectDevice);
    }

    const modelVersion = (await this.getSelectedDevice())?.modelVersion;
    const supportsHaptics = platform.supportsHaptics(modelVersion);

    if (!supportsHaptics) {
      return Promise.reject(
        errors.metricNotSupportedByModel(metric, modelVersion)
      );
    }

    const newPlatformHapticRequest =
      platform.getPlatformHapticMotors(modelVersion);

    for (const key in effects) {
      if (!Object.keys(newPlatformHapticRequest).includes(key)) {
        return Promise.reject(errors.locationNotFound(key, modelVersion));
      }
      const singleMotorEffects: string[] = effects[key];
      const maxItems = 7;
      if (singleMotorEffects.length > maxItems) {
        return Promise.reject(errors.exceededMaxItems(maxItems));
      }
      newPlatformHapticRequest[key] = singleMotorEffects;
    }

    const payload = {
      command: metric,
      action: "queue",
      responseRequired: true,
      responseTimeout: 1000,
      message: { effects: newPlatformHapticRequest }
    };

    return await this._withStreamingModePromise({
      wifi: () => this.cloudClient.dispatchAction(payload),
      bluetooth: () => this.bluetoothClient.dispatchAction(payload)
    });
  }

  /**
   * ```typescript
   * const effects = neurosity.getHapticEffects();
   * ```
   */
  public getHapticEffects(): HapticEffects {
    return hapticEffects;
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Observes accelerometer data
   * Supported by the Crown and Notion 2 devices.
   *
   * ```typescript
   * neurosity.accelerometer().subscribe(accelerometer => {
   *   console.log(accelerometer);
   * });
   *
   * // { acceleration: ..., inclination: ..., orientation: ..., pitch: ..., roll: ..., x: ..., y: ..., z: ... }
   * ```
   *
   * @returns Observable of accelerometer metric events
   */
  public accelerometer(): Observable<Accelerometer> {
    const metric = "accelerometer";

    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      metric
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this.onDeviceChange().pipe(
      switchMap((selectedDevice: DeviceInfo | null) => {
        const modelVersion =
          selectedDevice?.modelVersion || platform.MODEL_VERSION_1;
        const supportsAccel = platform.supportsAccel(modelVersion);

        if (!supportsAccel) {
          return throwError(() =>
            errors.metricNotSupportedByModel(metric, modelVersion)
          );
        }

        return this._withStreamingModeObservable({
          wifi: () =>
            getCloudMetric(this._getCloudMetricDependencies(), {
              metric,
              labels: getLabels(metric),
              atomic: true
            }),
          bluetooth: () => this.bluetoothClient.accelerometer()
        });
      })
    );
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   * 
   * The `raw` brainwaves parameter emits epochs of 16 samples for Crown and 25 for Notion 1 and 2.
   *
   * Example
   * ```typescript
   * neurosity.brainwaves("raw").subscribe(brainwaves => {
   *   console.log(brainwaves);
   * });
   * ```
   *
   * Raw Unfiltered - The `rawUnfiltered` brainwaves parameter emits epochs of 16 samples for Crown and 25 for Notion 1 and 2. 

   * Example
   * ```typescript
   * neurosity.brainwaves("rawUnfiltered").subscribe(brainwaves => {
   *   console.log(brainwaves);
   * });
   * ```
   *
   * Power By Band - The `powerByBand` brainwaves parameter emits epochs 4 times a second. Every frequency label (e.g. beta) contains an average power value per channel.
   * 
   * Example
   * ```typescript
   * neurosity.brainwaves("powerByBand").subscribe(brainwaves => {
   *   console.log(brainwaves);
   * });
   * ```
   *
   * Power Spectral Density (PSD) - The `psd` brainwaves parameter emits epochs 4 times a second. Every frequency label (e.g. alpha) contains the computed FFT (Fast Fourier transform) value per channel (see the `psd` property), as well as the frequency ranges (see the `freqs` property).
   * 
   * Example
   * ```typescript
   * neurosity.brainwaves("psd").subscribe(brainwaves => {
   *   console.log(brainwaves);
   * });
   * ```
   *
   * @param label Name of metric properties to filter by
   * @returns Observable of brainwaves metric events
   */
  public brainwaves(
    label: BrainwavesLabel
  ): Observable<Epoch | PowerByBand | PSD> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "brainwaves"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this._withStreamingModeObservable({
      wifi: () =>
        getCloudMetric(this._getCloudMetricDependencies(), {
          metric: "brainwaves",
          labels: label ? [label] : [],
          atomic: false
        }),
      // @TODO: doesn't support multiple labels, we should make the higher
      // order function only support one label
      bluetooth: () => this.bluetoothClient.brainwaves(label)
    });
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Example
   * ```typescript
   * neurosity.calm().subscribe(calm => {
   *   console.log(calm.probability);
   * });
   *
   * // 0.45
   * // 0.47
   * // 0.53
   * // 0.51
   * // ...
   * ```
   *
   * @returns Observable of calm events - awareness/calm alias
   */
  public calm(): Observable<Calm> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "calm"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this._withStreamingModeObservable({
      wifi: () =>
        getCloudMetric(this._getCloudMetricDependencies(), {
          metric: "awareness",
          labels: ["calm"],
          atomic: false
        }),
      bluetooth: () => this.bluetoothClient.calm()
    });
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Observes signal quality data where each property is the name
   * of the channel and the value includes the standard deviation and
   * a status set by the device
   *
   * ```typescript
   * neurosity.signalQuality().subscribe(signalQuality => {
   *   console.log(signalQuality);
   * });
   *
   * // { FC6: { standardDeviation: 3.5, status: "good" }, C3: {...}, ... }
   * ```
   *
   * @returns Observable of signalQuality metric events
   */
  public signalQuality(): Observable<SignalQuality> {
    const metric = "signalQuality";

    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      metric
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this._withStreamingModeObservable({
      wifi: () =>
        getCloudMetric(this._getCloudMetricDependencies(), {
          metric,
          labels: getLabels(metric),
          atomic: true
        }),
      bluetooth: () => this.bluetoothClient.signalQuality()
    });
  }

  /**
   * <StreamingModes wifi={true} />
   *
   * Observes last state of `settings` and all subsequent `settings` changes
   *
   * ```typescript
   * neurosity.settings().subscribe(settings => {
   *   console.log(settings.lsl);
   * });
   *
   * // true
   * // ...
   * ```
   *
   * @returns Observable of `settings` metric events
   */
  public settings(): Observable<Settings> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "settings"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this.cloudClient.observeNamespace("settings");
  }

  /**
   * <StreamingModes wifi={true} />
   *
   * Observes the current OS version and all subsequent version changes in real-time.
   *
   * ```typescript
   * neurosity.osVersion().subscribe((osVersion) => {
   *   console.log(osVersion);
   * });
   *
   * // "16.0.0"
   * ```
   *
   * @returns Observable of `osVersion` events. e.g 16.0.0
   */
  public osVersion(): Observable<OSVersion> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "osVersion"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this.cloudClient.osVersion();
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Example
   * ```typescript
   * neurosity.focus().subscribe(focus => {
   *   console.log(focus.probability);
   * });
   *
   * // 0.56
   * // 0.46
   * // 0.31
   * // 0.39
   * // ...
   * ```
   *
   * @returns Observable of focus events - awareness/focus alias
   */
  public focus(): Observable<Focus> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "focus"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this._withStreamingModeObservable({
      wifi: () =>
        getCloudMetric(this._getCloudMetricDependencies(), {
          metric: "awareness",
          labels: ["focus"],
          atomic: false
        }),
      bluetooth: () => this.bluetoothClient.focus()
    });
  }

  /**
   * <StreamingModes wifi={true} />
   *
   * @param label Name of metric properties to filter by
   * @returns Observable of kinesis metric events
   */
  public kinesis(label: string): Observable<Kinesis> {
    const metric = "kinesis";

    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      metric
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return getCloudMetric(this._getCloudMetricDependencies(), {
      metric,
      labels: label ? [label] : [],
      atomic: false
    });
  }

  /**
   * <StreamingModes wifi={true} />
   *
   * @param label Name of metric properties to filter by
   * @returns Observable of predictions metric events
   */
  public predictions(label: string): Observable<any> {
    const metric = "predictions";

    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      metric
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return getCloudMetric(this._getCloudMetricDependencies(), {
      metric,
      labels: label ? [label] : [],
      atomic: false
    });
  }

  /**
   * <StreamingModes wifi={true} bluetooth={true} />
   *
   * Observes last state of `status` and all subsequent `status` changes
   *
   * ```typescript
   * neurosity.status().subscribe(status => {
   *   console.log(status.state);
   * });
   *
   * // "online"
   * // ...
   * ```
   *
   * @returns Observable of `status` metric events
   */
  public status(): Observable<DeviceStatus> {
    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "status"
    );

    if (hasOAuthError) {
      return throwError(() => OAuthError);
    }

    return this._withStreamingModeObservable({
      wifi: () => this.cloudClient.status(),
      bluetooth: () => this.bluetoothClient.status()
    });
  }

  /**
   * @internal
   * Not user facing yet
   *
   * <StreamingModes wifi={true} />
   *
   * Changes device settings programmatically. These settings can be
   * also changed from the developer console under device settings.
   *
   * Available settings [[ChangeSettings]]
   *
   * Example
   * ```typescript
   * neurosity.changeSettings({
   *   lsl: true
   * });
   * ```
   */
  public async changeSettings(settings: ChangeSettings): Promise<void> {
    if (!(await this.cloudClient.didSelectDevice())) {
      return Promise.reject(errors.mustSelectDevice);
    }

    const [hasOAuthError, OAuthError] = validateOAuthScopeForFunctionName(
      this.cloudClient.userClaims,
      "changeSettings"
    );

    if (hasOAuthError) {
      return Promise.reject(OAuthError);
    }

    return await this.cloudClient.changeSettings(settings);
  }

  /**
   * <StreamingModes wifi={true} />
   *
   * ```typescript
   * neurosity.training.record({
   *   metric: "kinesis",
   *   label: "push"
   * });
   *
   * neurosity.training.stop({
   *   metric: "kinesis",
   *   label: "push"
   * });
   * ```
   *
   * @returns Training methods
   */
  public get training(): Training {
    return {
      /**
       * <StreamingModes wifi={true} />
       *
       * Records a training for a metric/label pair
       * @category Training
       */
      record: async (training) => {
        if (!(await this.cloudClient.didSelectDevice())) {
          throw errors.mustSelectDevice;
        }

        const userId =
          this.cloudClient.user && "uid" in this.cloudClient.user
            ? this.cloudClient.user.uid
            : null;
        const message = {
          fit: false,
          baseline: false,
          timestamp: this.cloudClient.timestamp,
          ...training,
          userId
        };

        await this.cloudClient.actions.dispatch({
          command: "training",
          action: "record",
          message
        });
      },
      /**
       * <StreamingModes wifi={true} />
       *
       * Stops the training for a metric/label pair
       * @category Training
       */
      stop: async (training) => {
        if (!(await this.cloudClient.didSelectDevice())) {
          throw errors.mustSelectDevice;
        }

        await this.cloudClient.actions.dispatch({
          command: "training",
          action: "stop",
          message: {
            ...training
          }
        });
      },
      /**
       * <StreamingModes wifi={true} />
       *
       * Stops all trainings
       * @category Training
       */
      stopAll: async () => {
        if (!(await this.cloudClient.didSelectDevice())) {
          throw errors.mustSelectDevice;
        }

        await this.cloudClient.actions.dispatch({
          command: "training",
          action: "stopAll",
          message: {}
        });
      }
    };
  }

  /**
   * @internal
   * Proof of Concept for disconnecting db
   */
  public goOffline(): void {
    this.cloudClient.goOffline();
  }

  /**
   * @internal
   * Proof of Concept for resuming db connection
   */
  public goOnline(): void {
    this.cloudClient.goOnline();
  }

  /**
   * @internal
   * Not user facing yet
   *
   * Creates user account and automatically signs in with same credentials
   *
   * @param emailAndPasswordObject
   * @returns user credential
   */
  public createAccount(credentials: EmailAndPassword) {
    return this.cloudClient.createAccount(credentials);
  }

  /**
   * @internal
   * Not user facing yet
   *
   * Removes all devices from an account and then deletes the account
   */
  public deleteAccount() {
    return this.cloudClient.deleteAccount();
  }

  /**
   * @internal
   * Not user facing
   *
   * Creates token (JWT) designed to authenticate and authorize Bluetooth clients/centrals.
   *
   * @returns token
   */
  public createBluetoothToken(): Promise<string> {
    return this.cloudClient.createBluetoothToken();
  }

  /**
   * @internal
   * Not user facing yet
   *
   * Creates custom token (JWT) to use to login with `{ customToken }`.
   *
   * @returns custom token
   */
  public createCustomToken(): Promise<CustomToken> {
    return this.cloudClient.createCustomToken();
  }

  /**
   * @internal
   * Not user facing yet
   *
   * Gets the offset between the device's clock and the client's clock
   * Requires option.timesync to be true
   *
   * @returns timesyncOffset
   */
  public getTimesyncOffset(): number {
    if (!this.options.timesync) {
      console.warn(`getTimesyncOffset() requires options.timesync to be true.`);
    }

    return this.options.timesync ? this.cloudClient.getTimesyncOffset() : 0;
  }

  /**
   * Create OAuth URL
   * 💡 OAuth requires developers to register their apps with Neurosity
   * [Read full OAuth guide](/docs/oauth)
   *
   * Creates client-specific OAuth URL. This is the first step of the OAuth workflow. Use this function to create a URL you can use to redirect users to the Neurosity sign-in page.
   * 💡 This function is designed to only run on the server side for security reasons, as it requires your client secret.
   *
   * ```typescript
   * const { Neurosity } = require("@neurosity/sdk");
   *
   * const neurosity = new Neurosity({
   *   autoSelectDevice: false
   * });
   *
   * exports.handler = async function (event) {
   *   return neurosity
   *     .createOAuthURL({
   *       clientId: process.env.NEUROSITY_OAUTH_CLIENT_ID,
   *       clientSecret: process.env.NEUROSITY_OAUTH_CLIENT_SECRET,
   *       redirectUri: process.env.NEUROSITY_OAUTH_CLIENT_REDIRECT_URI,
   *       responseType: "token",
   *       state: Math.random().toString().split(".")[1],
   *       scope: [
   *         "read:devices-info",
   *         "read:devices-status",
   *         "read:signal-quality",
   *         "read:brainwaves"
   *       ]
   *     })
   *     .then((url) => ({
   *       statusCode: 200,
   *       body: JSON.stringify({ url })
   *     }))
   *     .catch((error) => ({
   *       statusCode: 400,
   *       body: JSON.stringify(error.response.data)
   *     }));
   * };
   * ```
   * @returns custom token
   */
  public createOAuthURL(config: OAuthConfig): Promise<string> {
    if (!isNode) {
      return Promise.reject(
        new Error(
          `${errors.prefix}the createOAuthURL method must be used on the server side (node.js) for security reasons.`
        )
      );
    }

    return createOAuthURL(config, this.options);
  }

  /**
   * Get OAuth Token
   * 💡 OAuth requires developers to register their apps with Neurosity
   * [Read full OAuth guide](/docs/oauth)
   *
   * Gets client-specific OAuth token for a given userId.
   *
   * 💡 This function is designed to only run on the server side for security reasons, as it requires your client secret.
   * Here's an example of a cloud function that receives a `userId` via query params and loads the client id and client secret securely via environment variables.
   *
   *
   * ```typescript
   * const { Neurosity } = require("@neurosity/sdk");
   *
   * const neurosity = new Neurosity({
   *   autoSelectDevice: false
   * });
   *
   * exports.handler = async function (event) {
   *   const userId = event.queryStringParameters?.userId;
   *
   *   return neurosity
   *     .getOAuthToken({
   *       clientId: process.env.NEUROSITY_OAUTH_CLIENT_ID,
   *       clientSecret: process.env.NEUROSITY_OAUTH_CLIENT_SECRET,
   *       userId
   *     })
   *     .then((token) => ({
   *       statusCode: 200,
   *       body: JSON.stringify(token)
   *     }))
   *     .catch((error) => ({
   *       statusCode: 200,
   *       body: JSON.stringify(error.response.data)
   *     }));
   * };
   * ```
   * @returns custom token
   */
  public getOAuthToken(query: OAuthQuery): Promise<OAuthQueryResult> {
    if (!isNode) {
      return Promise.reject(
        new Error(
          `${errors.prefix}the getOAuthToken method must be used on the server side (node.js) for security reasons.`
        )
      );
    }

    return getOAuthToken(query, this.options);
  }

  /**
   * Remove OAuth Access
   * 💡 OAuth requires developers to register their apps with Neurosity
   * [Read full OAuth guide](/docs/oauth)
   *
   * Removes client-specific OAuth token for a given userId. Requires SDK to be signed in with OAuth custom token.
   *
   * ```typescript
   * await neurosity.removeOAuthAccess().catch((error) => {
   *   // handle error here...
   * });
   * ```
   * @returns custom token
   */
  public removeOAuthAccess(): Promise<OAuthRemoveResponse> {
    return this.cloudClient.removeOAuthAccess();
  }

  /**
   * <StreamingModes wifi={true} />
   *
   * Observes and returns a list of all Kinesis `experiments` and all subsequent experiment changes.
   * Here's an example of how to get a list of all Kinesis labels that have been trained:
   *
   * ```typescript
   *
   * const getUniqueLabels = (experiments) => {
   *   const labels = experiments.flatMap((experiment) => experiment.labels);
   *   // only return unique labels
   *   return [...new Set(labels)];
   * }
   *
   * neurosity.onUserExperiments().subscribe((experiments) => {
   *   console.log(experiments);
   *   console.log("labels", getUniqueLabels(experiments));
   * });
   *
   * // [{ id: '...', deviceId: '...', labels: [ 'drop' ], name: 'Lightgray cheetah', timestamp: 1577908381552, totalTrials: 16, userId: '...' }]
   * // ["drop", "lift", "push"]
   * ```
   *
   * @returns Observable of `experiments` events
   */
  public onUserExperiments(): Observable<Experiment[]> {
    return this.cloudClient.onUserExperiments();
  }

  /**
   * <StreamingModes wifi={true} />
   *
   * Deletes a specific experiment provided an experiment ID
   *
   * ```typescript
   * await neurosity.deleteUserExperiment(experiment.id);
   * ```
   *
   * @param experimentId The ID of the Experiment
   * @returns void
   */
  public deleteUserExperiment(experimentId: string): Promise<void> {
    return this.cloudClient.deleteUserExperiment(experimentId);
  }
}

/**
 * @hidden
 * Deprecated class kept for backwards compatibility purposes.
 */
export class Notion extends Neurosity {
  constructor(options: SDKOptions = {}) {
    super(options);
    console.log(
      `The Notion class is deprecated and will be removed in the next version of the SDK. Please use the Neurosity class instead. e.g. new Notion() => new Neurosity()`
    );
  }
}

/**
 * @hidden
 * Internal use only. Will be removed in next versions.
 */
export { __firebase } from "./api/firebase";



================================================
File: src/index.ts
================================================
export * from "./Neurosity";
export * from "./api/bluetooth";
export * from "./types/streaming";



================================================
File: src/__tests__/Neurosity.test.ts
================================================
/// <reference types="node" />

import { describe, it } from "node:test";
import assert from "node:assert";
import { Neurosity } from "../Neurosity";
import { STREAMING_MODE } from "../types/streaming";
import { SDKOptions } from "../types/options";
import { Observable } from "rxjs";
import { DeviceInfo } from "../types/deviceInfo";
import { Epoch } from "../types/epoch";
import { firstValueFrom, take, of, ReplaySubject } from "rxjs";
import { STATUS } from "../types/status";
import { CloudClient } from "../api";

// Mock Firebase modules
jest.mock("../api/firebase", () => {
  const mockFirebaseApp = jest.fn().mockImplementation(() => ({
    disconnect: jest.fn(),
    useEmulator: jest.fn()
  }));
  mockFirebaseApp.prototype.constructor = mockFirebaseApp;

  const mockFirebaseUser = jest.fn().mockImplementation(() => ({
    login: jest.fn().mockResolvedValue({}),
    logout: jest.fn().mockResolvedValue({}),
    onAuthStateChanged: jest.fn().mockReturnValue(of(null)),
    onUserClaimsChange: jest.fn().mockReturnValue(of({}))
  }));
  mockFirebaseUser.prototype.constructor = mockFirebaseUser;

  const mockFirebaseDevice = jest.fn().mockImplementation(() => ({
    disconnect: jest.fn(),
    getInfo: jest.fn().mockResolvedValue({}),
    selectDevice: jest.fn().mockResolvedValue({}),
    dispatchAction: jest.fn()
  }));
  mockFirebaseDevice.prototype.constructor = mockFirebaseDevice;

  return {
    FirebaseApp: mockFirebaseApp,
    FirebaseUser: mockFirebaseUser,
    FirebaseDevice: mockFirebaseDevice
  };
});

// Mock CloudClient
jest.mock("../api", () => {
  const originalModule = jest.requireActual("../api");

  class MockCloudClient {
    public user = null;
    public userClaims = { scopes: ["brainwaves"] };
    protected options: any;
    protected firebaseApp: any;
    protected firebaseUser: any;
    protected firebaseDevice: any;
    public subscriptionManager = {
      add: jest.fn(),
      remove: jest.fn(),
      removeAll: jest.fn()
    };
    private _selectedDevice = new ReplaySubject<DeviceInfo | null | undefined>(
      1
    );

    constructor(options: any) {
      this.options = options;
      this._selectedDevice.next(undefined);
    }

    login = jest.fn().mockResolvedValue({});
    logout = jest.fn().mockResolvedValue({});
    getInfo = jest.fn().mockResolvedValue({});
    selectDevice = jest.fn().mockResolvedValue({});
    didSelectDevice = jest.fn().mockResolvedValue(true);
    onDeviceChange = jest.fn().mockReturnValue(
      of({
        deviceId: "test-device-id",
        status: STATUS.ONLINE
      })
    );
    osVersion = jest.fn().mockReturnValue(of("1.0.0"));
    status = jest.fn().mockReturnValue(of({ state: STATUS.ONLINE }));
    metrics = {
      subscribe: jest.fn().mockReturnValue(of({})),
      on: jest.fn().mockImplementation((subscription, callback) => {
        callback({});
        return jest.fn();
      }),
      unsubscribe: jest.fn()
    };
  }

  return {
    ...originalModule,
    CloudClient: jest
      .fn()
      .mockImplementation((options) => new MockCloudClient(options))
  };
});

describe("Neurosity", () => {
  let neurosity: Neurosity;
  const testDeviceId = "test-device-id";
  const testEmail = "test@example.com";
  const testPassword = "test-password";

  beforeEach(() => {
    jest.clearAllMocks();
    neurosity = new Neurosity({
      deviceId: testDeviceId,
      emulator: true
    });

    // Mock _osHasBluetoothSupport to return false to avoid Bluetooth-related code paths
    neurosity["_osHasBluetoothSupport"] = jest.fn().mockReturnValue(of(false));
  });

  describe("Initialization", () => {
    test("should initialize with default options when no options provided", () => {
      const instance = new Neurosity();
      expect(instance).toBeDefined();
    });

    test("should initialize with provided deviceId", () => {
      const instance = new Neurosity({ deviceId: testDeviceId });
      expect(instance).toBeDefined();
    });

    test("should initialize with custom options", () => {
      const instance = new Neurosity({
        deviceId: testDeviceId,
        emulator: true,
        timesync: false
      });
      expect(instance).toBeDefined();
    });
  });

  describe("Authentication", () => {
    test("should handle login with email and password", async () => {
      await expect(
        neurosity.login({ email: testEmail, password: testPassword })
      ).resolves.not.toThrow();
    });

    test("should handle logout", async () => {
      await expect(neurosity.logout()).resolves.not.toThrow();
    });
  });

  describe("Device Management", () => {
    test("should get device info", async () => {
      const mockInfo: DeviceInfo = {
        deviceId: testDeviceId,
        deviceNickname: "Test Device",
        channelNames: ["CH1", "CH2"],
        channels: 2,
        samplingRate: 250,
        manufacturer: "Neurosity",
        model: "Crown",
        modelName: "Crown",
        modelVersion: "v1",
        apiVersion: "1.0.0",
        osVersion: "1.0.0",
        emulator: false
      };

      (neurosity["cloudClient"].getInfo as jest.Mock).mockResolvedValueOnce(
        mockInfo
      );
      const info = await neurosity.getInfo();
      expect(info).toEqual(mockInfo);
    });

    test("should handle device selection", async () => {
      const mockDevice: DeviceInfo = {
        deviceId: testDeviceId,
        deviceNickname: "Test Device",
        channelNames: ["CH1", "CH2"],
        channels: 2,
        samplingRate: 250,
        manufacturer: "Neurosity",
        model: "Crown",
        modelName: "Crown",
        modelVersion: "v1",
        apiVersion: "1.0.0",
        osVersion: "1.0.0",
        emulator: false
      };

      (
        neurosity["cloudClient"].selectDevice as jest.Mock
      ).mockResolvedValueOnce(mockDevice);
      await expect(
        neurosity.selectDevice((devices) => {
          const device = devices.find((d) => d.deviceId === testDeviceId);
          if (!device) {
            throw new Error("Device not found");
          }
          return device;
        })
      ).resolves.not.toThrow();
    });
  });

  describe("Streaming", () => {
    test("should stream brainwaves", async () => {
      const mockRawData = {
        data: [
          [1, 2, 3, 4, 5, 6, 7, 8],
          [9, 10, 11, 12, 13, 14, 15, 16]
        ],
        info: {
          samplingRate: 256,
          startTime: Date.now()
        }
      };

      // Mock the getCloudMetric function to return our mock data
      neurosity["_getCloudMetricDependencies"] = jest.fn().mockReturnValue({
        options: {
          deviceId: testDeviceId,
          emulator: true
        },
        cloudClient: neurosity["cloudClient"],
        onDeviceChange: neurosity["cloudClient"].onDeviceChange,
        status: neurosity["cloudClient"].status,
        getCloudMetric: jest.fn().mockReturnValue(of(mockRawData))
      });

      const brainwaves = await firstValueFrom(
        neurosity.brainwaves("raw").pipe(take(1))
      );

      expect(brainwaves).toBeDefined();
      if ("data" in brainwaves) {
        expect(Array.isArray(brainwaves.data)).toBe(true);
        expect(brainwaves.data.length).toBe(2);
        expect(brainwaves.data[0].length).toBe(8);
      }
    });
  });
});



================================================
File: src/__tests__/WebBluetoothTransport.test.ts
================================================
import "./setup/webBluetooth.setup";
import { BLUETOOTH_PRIMARY_SERVICE_UUID_HEX } from "@neurosity/ipk";
import { BLUETOOTH_DEVICE_NAME_PREFIXES } from "@neurosity/ipk";
import { BLUETOOTH_COMPANY_IDENTIFIER_HEX } from "@neurosity/ipk";
import { NEVER } from "rxjs";
import { WebBluetoothTransport } from "../api/bluetooth/web/WebBluetoothTransport";
import { BLUETOOTH_CONNECTION, TRANSPORT_TYPE } from "../api/bluetooth/types";
import { DeviceInfo } from "../types/deviceInfo";
import { isWebBluetoothSupported } from "../api/bluetooth/web/isWebBluetoothSupported";

// Get the mock function for isWebBluetoothSupported
const mockIsWebBluetoothSupported = jest.requireMock(
  "../api/bluetooth/web/isWebBluetoothSupported"
).isWebBluetoothSupported;

describe("WebBluetoothTransport", () => {
  let transport: WebBluetoothTransport;
  let mockDevice: BluetoothDevice;
  let mockServer: BluetoothRemoteGATTServer;
  let mockService: BluetoothRemoteGATTService;
  let mockCharacteristic: BluetoothRemoteGATTCharacteristic;

  beforeEach(() => {
    // Mock device and GATT objects
    mockCharacteristic = {
      uuid: "characteristic-uuid",
      properties: {
        write: true,
        notify: true
      },
      startNotifications: jest.fn().mockResolvedValue(undefined),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      writeValue: jest.fn().mockResolvedValue(undefined)
    } as unknown as BluetoothRemoteGATTCharacteristic;

    mockService = {
      uuid: BLUETOOTH_PRIMARY_SERVICE_UUID_HEX,
      getCharacteristics: jest.fn().mockResolvedValue([mockCharacteristic])
    } as unknown as BluetoothRemoteGATTService;

    mockServer = {
      connected: true,
      getPrimaryService: jest.fn().mockResolvedValue(mockService),
      connect: jest.fn().mockResolvedValue(undefined),
      disconnect: jest.fn()
    } as unknown as BluetoothRemoteGATTServer;

    mockDevice = {
      id: "test-device",
      name: "Test Device",
      gatt: mockServer,
      watchAdvertisements: jest.fn().mockResolvedValue(undefined),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    } as unknown as BluetoothDevice;

    // Mock navigator.bluetooth methods
    (window.navigator.bluetooth.getDevices as jest.Mock).mockResolvedValue([]);
    (window.navigator.bluetooth.requestDevice as jest.Mock).mockResolvedValue(
      mockDevice
    );

    transport = new WebBluetoothTransport();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("should initialize with correct type and default options", () => {
    expect(transport.type).toBe(TRANSPORT_TYPE.WEB);
    expect(transport.options.autoConnect).toBe(true);
  });

  it("should throw error if Web Bluetooth is not supported", () => {
    mockIsWebBluetoothSupported.mockReturnValueOnce(false);

    expect(() => new WebBluetoothTransport()).toThrow(
      "Web Bluetooth is not supported"
    );
  });

  it("should enable/disable auto connect", (done) => {
    transport.enableAutoConnect(false);
    transport.connection().subscribe((connection) => {
      expect(connection).toBe(BLUETOOTH_CONNECTION.DISCONNECTED);
      done();
    });
  });

  it("should handle connection state changes", (done) => {
    const states: BLUETOOTH_CONNECTION[] = [];
    transport.connection().subscribe((state) => {
      states.push(state);
      if (states.length === 2) {
        expect(states).toEqual([
          BLUETOOTH_CONNECTION.DISCONNECTED,
          BLUETOOTH_CONNECTION.CONNECTED
        ]);
        done();
      }
    });

    transport.connection$.next(BLUETOOTH_CONNECTION.CONNECTED);
  });

  it("should request device with correct options", async () => {
    const deviceNickname = "Test Device";
    await transport.requestDevice(deviceNickname);

    expect(window.navigator.bluetooth.requestDevice).toHaveBeenCalledWith({
      filters: [
        {
          name: deviceNickname
        },
        {
          manufacturerData: [
            {
              companyIdentifier: BLUETOOTH_COMPANY_IDENTIFIER_HEX
            }
          ]
        }
      ],
      optionalServices: [BLUETOOTH_PRIMARY_SERVICE_UUID_HEX]
    });
  });

  it("should request device with prefixes when no nickname provided", async () => {
    await transport.requestDevice();

    expect(window.navigator.bluetooth.requestDevice).toHaveBeenCalledWith({
      filters: [
        ...BLUETOOTH_DEVICE_NAME_PREFIXES.map((namePrefix) => ({
          namePrefix
        })),
        {
          manufacturerData: [
            {
              companyIdentifier: BLUETOOTH_COMPANY_IDENTIFIER_HEX
            }
          ]
        }
      ],
      optionalServices: [BLUETOOTH_PRIMARY_SERVICE_UUID_HEX]
    });
  });

  it("should connect to device and setup GATT server", async () => {
    (mockServer.connect as jest.Mock).mockResolvedValueOnce(mockServer);
    await transport.getServerServiceAndCharacteristics(mockDevice);

    expect(mockServer.connect).toHaveBeenCalled();
    expect(mockServer.getPrimaryService).toHaveBeenCalledWith(
      BLUETOOTH_PRIMARY_SERVICE_UUID_HEX
    );
    expect(mockService.getCharacteristics).toHaveBeenCalled();
    expect(transport.connection$.getValue()).toBe(
      BLUETOOTH_CONNECTION.CONNECTED
    );
  });

  it("should handle disconnection", (done) => {
    (mockServer.connect as jest.Mock).mockResolvedValueOnce(mockServer);
    transport.device = mockDevice;
    transport.server = mockServer;
    transport.connection$.next(BLUETOOTH_CONNECTION.CONNECTED);

    transport.connection().subscribe((connection) => {
      if (connection === BLUETOOTH_CONNECTION.DISCONNECTED) {
        done();
      }
    });

    // Simulate disconnection
    const disconnectCallback = (
      mockDevice.addEventListener as jest.Mock
    ).mock.calls.find(
      ([eventName]: [string]) => eventName === "gattserverdisconnected"
    )[1];
    disconnectCallback();
  });

  it("should auto connect when enabled", async () => {
    const selectedDevice$ = NEVER;
    const autoConnect$ = transport._autoConnect(selectedDevice$);

    // Subscribe to auto connect observable
    autoConnect$.subscribe();

    // Verify auto connect is enabled
    expect(transport.options.autoConnect).toBe(true);
  });

  it("should get paired devices", async () => {
    const devices = [mockDevice];
    (window.navigator.bluetooth.getDevices as jest.Mock).mockResolvedValueOnce(
      devices
    );

    const result = await transport._getPairedDevices();
    expect(result).toEqual(devices);
  });

  it("should check connection status", () => {
    transport.connection$.next(BLUETOOTH_CONNECTION.CONNECTED);
    expect(transport.isConnected()).toBe(true);

    transport.connection$.next(BLUETOOTH_CONNECTION.DISCONNECTED);
    expect(transport.isConnected()).toBe(false);
  });

  it("should add logs", (done) => {
    const testLog = "Test log message";
    transport.logs$.subscribe((log) => {
      expect(log).toBe(testLog);
      done();
    });

    transport.addLog(testLog);
  });

  it("should handle connection errors", async () => {
    const error = new Error("Connection failed");
    (mockServer.connect as jest.Mock).mockRejectedValueOnce(error);

    await expect(
      transport.getServerServiceAndCharacteristics(mockDevice)
    ).rejects.toThrow("Connection failed");
    expect(transport.connection$.getValue()).not.toBe(
      BLUETOOTH_CONNECTION.CONNECTED
    );
  });

  it("should handle service discovery errors", async () => {
    (mockServer.connect as jest.Mock).mockResolvedValueOnce(mockServer);
    (mockServer.getPrimaryService as jest.Mock).mockRejectedValueOnce(
      new Error("Service not found")
    );

    await expect(
      transport.getServerServiceAndCharacteristics(mockDevice)
    ).rejects.toThrow("Service not found");
    expect(transport.connection$.getValue()).not.toBe(
      BLUETOOTH_CONNECTION.CONNECTED
    );
  });

  it("should handle characteristic discovery errors", async () => {
    (mockServer.connect as jest.Mock).mockResolvedValueOnce(mockServer);
    (mockServer.getPrimaryService as jest.Mock).mockResolvedValueOnce(
      mockService
    );
    (mockService.getCharacteristics as jest.Mock).mockRejectedValueOnce(
      new Error("Characteristics not found")
    );

    await expect(
      transport.getServerServiceAndCharacteristics(mockDevice)
    ).rejects.toThrow("Characteristics not found");
    expect(transport.connection$.getValue()).not.toBe(
      BLUETOOTH_CONNECTION.CONNECTED
    );
  });
});



================================================
File: src/__tests__/accelerometer.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { BehaviorSubject, Subscription } from "rxjs";
import { take } from "rxjs/operators";
import { DeviceInfo } from "../types/deviceInfo";
import { STATUS } from "../types/status";
import { DeviceStatus } from "../types/status";
import { Accelerometer } from "../types/accelerometer";

// Mock CloudClient
jest.mock("../api", () => {
  const originalModule = jest.requireActual("../api");

  class MockCloudClient {
    public user = null;
    public userClaims = { scopes: ["brainwaves"] };
    protected options: any;
    protected firebaseApp: any;
    protected firebaseUser: any;
    protected firebaseDevice: any;
    public subscriptionManager = {
      add: jest.fn(),
      remove: jest.fn(),
      removeAll: jest.fn()
    };

    private _accelerometerData = new BehaviorSubject<Accelerometer>({
      x: 0.1,
      y: -0.2,
      z: 9.8,
      timestamp: Date.now(),
      acceleration: 9.8,
      inclination: 0,
      orientation: 0,
      pitch: 0,
      roll: 0
    });

    public bluetoothClient = {
      accelerometer: jest.fn().mockReturnValue(this._accelerometerData),
      connection: jest.fn().mockReturnValue(new BehaviorSubject("connected"))
    };

    private _selectedDevice = new BehaviorSubject<
      DeviceInfo | null | undefined
    >({
      deviceId: "test-device-id",
      deviceNickname: "Test Device",
      channelNames: ["CH1", "CH2"],
      channels: 2,
      samplingRate: 250,
      manufacturer: "Neurosity",
      model: "Crown",
      modelName: "Crown",
      modelVersion: "3",
      apiVersion: "1.0.0",
      osVersion: "16.0.0",
      emulator: false
    });

    constructor(options: any) {
      this.options = options;
    }

    getInfo = jest.fn().mockResolvedValue(this._selectedDevice.value);
    selectDevice = jest
      .fn()
      .mockImplementation(async () => this._selectedDevice.value);
    didSelectDevice = jest.fn().mockResolvedValue(true);
    onDeviceChange = jest.fn().mockReturnValue(this._selectedDevice);

    status = jest.fn().mockReturnValue(
      new BehaviorSubject<DeviceStatus>({
        state: STATUS.ONLINE,
        charging: false,
        battery: 100,
        sleepMode: false,
        sleepModeReason: null,
        lastHeartbeat: Date.now(),
        ssid: "test-network"
      })
    );

    osVersion = jest.fn().mockReturnValue(new BehaviorSubject("16.0.0"));

    metrics = {
      subscribe: jest.fn().mockImplementation(() => {
        const subscription = new Subscription();
        subscription.add(this._accelerometerData.subscribe());
        return subscription;
      }),
      on: jest.fn().mockImplementation((subscription, callback) => {
        const sub = this._accelerometerData.subscribe(callback);
        return () => sub.unsubscribe();
      })
    };
  }

  return {
    ...originalModule,
    CloudClient: jest
      .fn()
      .mockImplementation((options) => new MockCloudClient(options))
  };
});

describe("Accelerometer", () => {
  let neurosity: Neurosity;
  const testDeviceId = "test-device-id";

  beforeEach(() => {
    neurosity = new Neurosity({
      deviceId: testDeviceId,
      emulator: true
    });
  });

  describe("Accelerometer Data", () => {
    it("should get accelerometer readings", (done) => {
      neurosity
        .accelerometer()
        .pipe(take(1))
        .subscribe({
          next: (accel) => {
            expect(accel).toBeDefined();
            expect(typeof accel.x).toBe("number");
            expect(typeof accel.y).toBe("number");
            expect(typeof accel.z).toBe("number");
            expect(accel.timestamp).toBeDefined();

            // Check for reasonable values
            expect(accel.x).toBe(0.1);
            expect(accel.y).toBe(-0.2);
            expect(accel.z).toBe(9.8); // Approximately Earth's gravity
            done();
          },
          error: done
        });
    });

    it("should provide continuous accelerometer updates", (done) => {
      neurosity
        .accelerometer()
        .pipe(take(1))
        .subscribe({
          next: (reading) => {
            expect(reading.x).toBeDefined();
            expect(reading.y).toBeDefined();
            expect(reading.z).toBeDefined();
            expect(reading.timestamp).toBeDefined();
            done();
          },
          error: done
        });
    });
  });

  describe("Error Handling", () => {
    it("should handle device offline state", (done) => {
      // Mock device going offline
      const cloudClient = (neurosity as any).cloudClient;
      cloudClient.status.mockReturnValueOnce(
        new BehaviorSubject<DeviceStatus>({
          state: STATUS.OFFLINE,
          charging: false,
          battery: 100,
          sleepMode: false,
          sleepModeReason: null,
          lastHeartbeat: Date.now(),
          ssid: "test-network"
        })
      );

      neurosity.accelerometer().subscribe({
        error: (err) => {
          expect(err).toBeDefined();
          done();
        }
      });
    });
  });
});



================================================
File: src/__tests__/auth.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { firstValueFrom, of, ReplaySubject, BehaviorSubject, take } from "rxjs";
import { EmailAndPassword } from "../types/credentials";
import { DeviceInfo } from "../types/deviceInfo";
import { STATUS } from "../types/status";

// Mock CloudClient
jest.mock("../api", () => {
  const originalModule = jest.requireActual("../api");

  class MockCloudClient {
    public user = null;
    public userClaims = { scopes: ["brainwaves"] };
    protected options: any;
    protected firebaseApp: any;
    protected firebaseUser: any;
    protected firebaseDevice: any;
    public subscriptionManager = {
      add: jest.fn(),
      remove: jest.fn(),
      removeAll: jest.fn()
    };
    private _selectedDevice = new BehaviorSubject<
      DeviceInfo | null | undefined
    >(undefined);
    private _authStateSubject = new BehaviorSubject<any>(null);

    constructor(options: any) {
      this.options = options;
    }

    login = jest.fn().mockImplementation(async (credentials) => {
      if (credentials.email === "invalid@example.com") {
        throw new Error("Invalid credentials");
      }
      this._authStateSubject.next({ email: credentials.email });
      return { user: { email: credentials.email } };
    });

    logout = jest.fn().mockImplementation(async () => {
      this._authStateSubject.next(null);
      return {};
    });

    createAccount = jest.fn().mockImplementation(async (credentials) => {
      if (this._existingAccounts?.includes(credentials.email)) {
        throw new Error("Account already exists");
      }
      if (!this._existingAccounts) {
        this._existingAccounts = [];
      }
      this._existingAccounts.push(credentials.email);
      return { user: { email: credentials.email } };
    });

    deleteAccount = jest.fn().mockImplementation(async () => {
      this._authStateSubject.next(null);
      return {};
    });

    onAuthStateChanged = jest.fn().mockImplementation(() => {
      return this._authStateSubject.asObservable();
    });

    private _existingAccounts: string[] = [];
  }

  return {
    ...originalModule,
    CloudClient: jest
      .fn()
      .mockImplementation((options) => new MockCloudClient(options))
  };
});

describe("Authentication", () => {
  let neurosity: Neurosity;
  const testDeviceId = "test-device-id";
  const credentials: EmailAndPassword = {
    email: "test@example.com",
    password: "testPassword123"
  };

  beforeEach(() => {
    neurosity = new Neurosity({
      deviceId: testDeviceId,
      emulator: true
    });
  });

  afterEach(async () => {
    try {
      await neurosity.logout();
    } catch (error) {
      // Ignore logout errors in cleanup
    }
  });

  describe("Basic Authentication", () => {
    it("should handle login and logout flow", (done) => {
      neurosity.login(credentials).then(() => {
        neurosity
          .onAuthStateChanged()
          .pipe(take(1))
          .subscribe({
            next: (authState) => {
              expect(authState).toBeTruthy();
              expect(authState.email).toBe(credentials.email);
              done();
            },
            error: done
          });
      });
    });

    it("should handle logout", (done) => {
      neurosity.login(credentials).then(() => {
        neurosity.logout().then(() => {
          neurosity
            .onAuthStateChanged()
            .pipe(take(1))
            .subscribe({
              next: (loggedOutState) => {
                expect(loggedOutState).toBeFalsy();
                done();
              },
              error: done
            });
        });
      });
    });

    it("should reject invalid credentials", async () => {
      const invalidCredentials: EmailAndPassword = {
        email: "invalid@example.com",
        password: "wrongPassword"
      };

      await expect(neurosity.login(invalidCredentials)).rejects.toThrow(
        "Invalid credentials"
      );
    });
  });

  describe("Account Management", () => {
    it("should create account", (done) => {
      const newAccount: EmailAndPassword = {
        email: "new@example.com",
        password: "newPassword123"
      };

      neurosity.createAccount(newAccount).then(() => {
        neurosity.login(newAccount).then(() => {
          neurosity
            .onAuthStateChanged()
            .pipe(take(1))
            .subscribe({
              next: (authState) => {
                expect(authState).toBeTruthy();
                expect(authState.email).toBe(newAccount.email);
                done();
              },
              error: done
            });
        });
      });
    });

    it("should delete account", (done) => {
      const account: EmailAndPassword = {
        email: "delete@example.com",
        password: "deletePassword123"
      };

      neurosity.createAccount(account).then(() => {
        neurosity.login(account).then(() => {
          neurosity.deleteAccount().then(() => {
            neurosity
              .onAuthStateChanged()
              .pipe(take(1))
              .subscribe({
                next: (deletedState) => {
                  expect(deletedState).toBeFalsy();
                  done();
                },
                error: done
              });
          });
        });
      });
    });

    it("should prevent duplicate account creation", async () => {
      const existingAccount: EmailAndPassword = {
        email: "existing@example.com",
        password: "existingPassword123"
      };

      await expect(
        neurosity.createAccount(existingAccount)
      ).resolves.not.toThrow();
      await expect(neurosity.createAccount(existingAccount)).rejects.toThrow(
        "Account already exists"
      );

      // Cleanup
      await neurosity.login(existingAccount);
      await neurosity.deleteAccount();
    });
  });

  describe("Auth State Changes", () => {
    it("should emit initial auth state", (done) => {
      neurosity
        .onAuthStateChanged()
        .pipe(take(1))
        .subscribe({
          next: (state) => {
            expect(state).toBeFalsy(); // Initial state should be null
            done();
          },
          error: done
        });
    });

    it("should emit logged in state", (done) => {
      neurosity.login(credentials).then(() => {
        neurosity
          .onAuthStateChanged()
          .pipe(take(1))
          .subscribe({
            next: (loggedInState) => {
              expect(loggedInState).toBeTruthy();
              expect(loggedInState.email).toBe(credentials.email);
              done();
            },
            error: done
          });
      });
    });

    it("should handle session expiration", (done) => {
      neurosity.login(credentials).then(() => {
        const cloudClient = (neurosity as any).cloudClient;
        cloudClient._authStateSubject.next(null);

        neurosity
          .onAuthStateChanged()
          .pipe(take(1))
          .subscribe({
            next: (expiredState) => {
              expect(expiredState).toBeFalsy();
              done();
            },
            error: done
          });
      });
    });
  });

  describe("Error Handling", () => {
    it("should handle network errors during login", async () => {
      const cloudClient = (neurosity as any).cloudClient;
      cloudClient.login.mockRejectedValueOnce(new Error("Network error"));

      await expect(neurosity.login(credentials)).rejects.toThrow(
        "Network error"
      );
    });

    it("should handle server errors during account creation", async () => {
      const cloudClient = (neurosity as any).cloudClient;
      cloudClient.createAccount.mockRejectedValueOnce(
        new Error("Server error")
      );

      await expect(neurosity.createAccount(credentials)).rejects.toThrow(
        "Server error"
      );
    });
  });
});



================================================
File: src/__tests__/brainwaves.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { firstValueFrom, of, ReplaySubject } from "rxjs";
import { DeviceInfo } from "../types/deviceInfo";
import { STATUS } from "../types/status";
import { DeviceStatus } from "../types/status";
import { MODEL_VERSION_2 } from "../utils/platform";
import {
  Epoch,
  PowerByBand,
  PSD,
  BrainwavesLabel,
  RawUnfilteredEpoch
} from "../types/brainwaves";

// Mock CloudClient
jest.mock("../api", () => {
  const originalModule = jest.requireActual("../api");

  class MockCloudClient {
    public user = null;
    public userClaims = { scopes: ["brainwaves"] };
    protected options: any;
    protected firebaseApp: any;
    protected firebaseUser: any;
    protected firebaseDevice: any;
    public subscriptionManager = {
      add: jest.fn(),
      remove: jest.fn(),
      removeAll: jest.fn()
    };
    private _selectedDevice = new ReplaySubject<DeviceInfo | null | undefined>(
      1
    );
    private _deviceInfo: DeviceInfo = {
      deviceId: "test-device-id",
      deviceNickname: "Test Device",
      channelNames: ["CH1", "CH2"],
      channels: 2,
      samplingRate: 250,
      manufacturer: "Neurosity",
      model: "Crown",
      modelName: "Crown",
      modelVersion: MODEL_VERSION_2,
      apiVersion: "1.0.0",
      osVersion: "1.0.0",
      emulator: false
    };

    constructor(options: any) {
      this.options = options;
      this._selectedDevice.next(this._deviceInfo);
    }

    getInfo = jest.fn().mockResolvedValue(this._deviceInfo);

    selectDevice = jest
      .fn()
      .mockImplementation(
        async (selector: (devices: DeviceInfo[]) => DeviceInfo) => {
          const selectedDevice = selector([this._deviceInfo]);
          this._selectedDevice.next(selectedDevice);
          return selectedDevice;
        }
      );

    getSelectedDevice = jest.fn().mockResolvedValue(this._deviceInfo);

    didSelectDevice = jest.fn().mockResolvedValue(true);

    onDeviceChange = jest.fn().mockReturnValue(
      of({
        state: STATUS.ONLINE,
        charging: false,
        battery: 100,
        sleepMode: false,
        updatingProgress: 0,
        bluetoothEnabled: false,
        sleepModeReason: null,
        lastHeartbeat: Date.now(),
        ssid: "test-network"
      } as DeviceStatus)
    );

    status = jest.fn().mockReturnValue(
      of({
        state: STATUS.ONLINE,
        charging: false,
        battery: 100,
        sleepMode: false,
        updatingProgress: 0,
        bluetoothEnabled: false,
        sleepModeReason: null,
        lastHeartbeat: Date.now(),
        ssid: "test-network"
      } as DeviceStatus)
    );

    osVersion = jest.fn().mockReturnValue(of("1.0.0"));

    metrics = {
      subscribe: jest.fn().mockImplementation((subscription) => {
        return subscription;
      }),
      unsubscribe: jest.fn(),
      on: jest.fn().mockImplementation((subscription, callback) => {
        switch (subscription.labels[0]) {
          case "raw":
            callback({
              data: [
                [100, 200],
                [150, 250]
              ],
              info: {
                samplingRate: 250,
                startTime: Date.now(),
                notchFrequency: "60Hz",
                channelNames: [
                  "CP3",
                  "C3",
                  "F5",
                  "PO3",
                  "PO4",
                  "F6",
                  "C4",
                  "CP4"
                ]
              }
            } as Epoch);
            break;
          case "rawUnfiltered":
            callback({
              data: [
                [100, 200],
                [150, 250]
              ],
              info: {
                samplingRate: 250,
                startTime: Date.now(),
                channelNames: [
                  "CP3",
                  "C3",
                  "F5",
                  "PO3",
                  "PO4",
                  "F6",
                  "C4",
                  "CP4"
                ]
              }
            } as RawUnfilteredEpoch);
            break;
          case "powerByBand":
            callback({
              gamma: [0.5, 0.6],
              beta: [0.4, 0.5],
              alpha: [0.3, 0.4],
              theta: [0.2, 0.3],
              delta: [0.1, 0.2],
              info: {
                channelNames: [
                  "CP3",
                  "C3",
                  "F5",
                  "PO3",
                  "PO4",
                  "F6",
                  "C4",
                  "CP4"
                ],
                samplingRate: 256,
                startTime: Date.now()
              }
            } as PowerByBand);
            break;
          case "psd":
            callback({
              label: "psd",
              psd: [
                [0.1, 0.2],
                [0.3, 0.4]
              ],
              freqs: [1, 2],
              info: {
                notchFrequency: "60Hz",
                samplingRate: 250,
                startTime: Date.now(),
                channelNames: [
                  "CP3",
                  "C3",
                  "F5",
                  "PO3",
                  "PO4",
                  "F6",
                  "C4",
                  "CP4"
                ]
              }
            } as PSD);
            break;
          default:
            throw new Error(
              `One ore more labels provided to brainwaves are invalid. The valid labels for brainwaves are raw, rawUnfiltered, frequency, powerByBand, psd`
            );
        }
        return () => {};
      })
    };
  }

  return {
    ...originalModule,
    CloudClient: jest
      .fn()
      .mockImplementation((options) => new MockCloudClient(options))
  };
});

describe("Brainwaves", () => {
  let neurosity: Neurosity;
  const testDeviceId = "test-device-id";

  beforeEach(() => {
    neurosity = new Neurosity({
      deviceId: testDeviceId,
      emulator: true
    });
  });

  describe("Raw Brainwaves", () => {
    it("should get raw brainwaves data", async () => {
      const data = (await firstValueFrom(neurosity.brainwaves("raw"))) as Epoch;
      expect(data).toBeDefined();
      expect(data.data).toBeInstanceOf(Array);
      expect(data.data[0]).toBeInstanceOf(Array);
      expect(data.info.samplingRate).toBe(250);
      expect(data.info.startTime).toBeDefined();
      expect(data.info.notchFrequency).toBe("60Hz");
      expect(data.info.channelNames).toEqual([
        "CP3",
        "C3",
        "F5",
        "PO3",
        "PO4",
        "F6",
        "C4",
        "CP4"
      ]);
    });

    it("should get raw unfiltered brainwaves data", async () => {
      const data = (await firstValueFrom(
        neurosity.brainwaves("rawUnfiltered")
      )) as RawUnfilteredEpoch;
      expect(data).toBeDefined();
      expect(data.data).toBeInstanceOf(Array);
      expect(data.data[0]).toBeInstanceOf(Array);
      expect(data.info.samplingRate).toBe(250);
      expect(data.info.startTime).toBeDefined();
      expect(data.info.channelNames).toEqual([
        "CP3",
        "C3",
        "F5",
        "PO3",
        "PO4",
        "F6",
        "C4",
        "CP4"
      ]);
      expect((data.info as any).notchFrequency).toBeUndefined();
    });
  });

  describe("Power by Band", () => {
    it("should get power by band data", async () => {
      const data = (await firstValueFrom(
        neurosity.brainwaves("powerByBand")
      )) as PowerByBand;
      expect(data).toBeDefined();
      expect(data.gamma).toBeInstanceOf(Array);
      expect(data.beta).toBeInstanceOf(Array);
      expect(data.alpha).toBeInstanceOf(Array);
      expect(data.theta).toBeInstanceOf(Array);
      expect(data.delta).toBeInstanceOf(Array);
      // Verify info object exists and has correct properties
      expect(data.info).toBeDefined();
      expect(data.info.samplingRate).toBe(256);
      expect(data.info.startTime).toBeDefined();
      expect(data.info.channelNames).toEqual([
        "CP3",
        "C3",
        "F5",
        "PO3",
        "PO4",
        "F6",
        "C4",
        "CP4"
      ]);
    });
  });

  describe("Power Spectral Density", () => {
    it("should get PSD data", async () => {
      const data = (await firstValueFrom(neurosity.brainwaves("psd"))) as PSD;
      expect(data).toBeDefined();
      expect(data.label).toBe("psd");
      expect(data.psd).toBeInstanceOf(Array);
      expect(data.freqs).toBeInstanceOf(Array);
      expect(data.info.samplingRate).toBe(250);
      expect(data.info.startTime).toBeDefined();
      expect(data.info.notchFrequency).toBe("60Hz");
      expect(data.info.channelNames).toEqual([
        "CP3",
        "C3",
        "F5",
        "PO3",
        "PO4",
        "F6",
        "C4",
        "CP4"
      ]);
    });
  });

  describe("Error Handling", () => {
    it("should handle invalid brainwaves label", async () => {
      await expect(
        firstValueFrom(neurosity.brainwaves("invalid" as any))
      ).rejects.toThrow(
        "One ore more labels provided to brainwaves are invalid. The valid labels for brainwaves are raw, rawUnfiltered, frequency, powerByBand, psd"
      );
    });
  });
});



================================================
File: src/__tests__/device.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { firstValueFrom, of, ReplaySubject, BehaviorSubject, take } from "rxjs";
import { DeviceInfo } from "../types/deviceInfo";
import { STATUS, SLEEP_MODE_REASON, DeviceStatus } from "../types/status";
import { SignalQuality } from "../types/signalQuality";

// Mock CloudClient
jest.mock("../api", () => {
  const originalModule = jest.requireActual("../api");

  class MockCloudClient {
    public user = null;
    public userClaims = { scopes: ["brainwaves"] };
    protected options: any;
    protected firebaseApp: any;
    protected firebaseUser: any;
    protected firebaseDevice: any;
    public subscriptionManager = {
      add: jest.fn(),
      remove: jest.fn(),
      removeAll: jest.fn()
    };
    private _deviceInfo: DeviceInfo = {
      deviceId: "test-device-id",
      deviceNickname: "Test Device",
      channelNames: ["CH1", "CH2"],
      channels: 2,
      samplingRate: 250,
      manufacturer: "Neurosity",
      model: "Crown",
      modelName: "Crown",
      modelVersion: "v1",
      apiVersion: "1.0.0",
      osVersion: "1.0.0",
      emulator: false
    };
    private _selectedDevice = new BehaviorSubject<
      DeviceInfo | null | undefined
    >(this._deviceInfo);
    private _deviceStatus = new BehaviorSubject<DeviceStatus>({
      state: STATUS.ONLINE,
      charging: false,
      battery: 100,
      sleepMode: false,
      sleepModeReason: null,
      lastHeartbeat: Date.now(),
      ssid: "test-network"
    });
    private _signalQuality = new BehaviorSubject<SignalQuality>({
      CH1: {
        standardDeviation: 0.1,
        status: "good"
      },
      CH2: {
        standardDeviation: 0.1,
        status: "good"
      }
    });

    constructor(options: any) {
      this.options = options;
    }

    getInfo = jest.fn().mockResolvedValue(this._deviceInfo);

    selectDevice = jest
      .fn()
      .mockImplementation(
        async (selector: (devices: DeviceInfo[]) => DeviceInfo) => {
          try {
            const selectedDevice = selector([this._deviceInfo]);
            this._selectedDevice.next(selectedDevice);
            return selectedDevice;
          } catch (error) {
            this._selectedDevice.next(null);
            throw error;
          }
        }
      );

    didSelectDevice = jest.fn().mockResolvedValue(true);

    onDeviceChange = jest
      .fn()
      .mockReturnValue(this._selectedDevice.asObservable());

    status = jest.fn().mockReturnValue(this._deviceStatus.asObservable());

    signalQuality = jest
      .fn()
      .mockReturnValue(this._signalQuality.asObservable());

    osVersion = jest.fn().mockReturnValue(of("1.0.0"));

    metrics = {
      subscribe: jest.fn().mockImplementation((subscription) => {
        return { id: "test-id", ...subscription };
      }),
      on: jest.fn().mockImplementation((subscription, callback) => {
        if (subscription.metric === "signalQuality") {
          const sub = this._signalQuality.subscribe(callback);
          return () => sub.unsubscribe();
        }
        return () => {};
      })
    };

    addDevice = jest.fn().mockImplementation(async (deviceId: string) => {
      if (deviceId === "invalid-id") {
        throw new Error("Invalid device ID");
      }
      return Promise.resolve();
    });

    removeDevice = jest.fn().mockImplementation(async (deviceId: string) => {
      if (deviceId === "invalid-id") {
        throw new Error("Invalid device ID");
      }
      return Promise.resolve();
    });

    transferDevice = jest
      .fn()
      .mockImplementation(
        async (options: { deviceId: string; recipientsUserId: string }) => {
          if (
            options.deviceId === "invalid-id" ||
            options.recipientsUserId === "invalid-user"
          ) {
            throw new Error("Invalid transfer parameters");
          }
          return Promise.resolve();
        }
      );

    onUserDevicesChange = jest.fn().mockReturnValue(of([this._deviceInfo]));

    // Helper methods for tests
    _updateDeviceStatus(status: Partial<DeviceStatus>) {
      this._deviceStatus.next({
        ...this._deviceStatus.value,
        ...status
      });
    }

    _updateSignalQuality(quality: SignalQuality) {
      this._signalQuality.next(quality);
    }
  }

  return {
    ...originalModule,
    CloudClient: jest
      .fn()
      .mockImplementation((options) => new MockCloudClient(options))
  };
});

describe("Device Management", () => {
  let neurosity: Neurosity;
  let cloudClient: any;
  const testDeviceId = "test-device-id";

  beforeEach(() => {
    neurosity = new Neurosity({
      deviceId: testDeviceId,
      emulator: true
    });
    cloudClient = (neurosity as any).cloudClient;
  });

  describe("Device Information", () => {
    it("should get device info", async () => {
      const info = await neurosity.getInfo();
      expect(info).toBeDefined();
      expect(info.deviceId).toBe(testDeviceId);
      expect(info.manufacturer).toBe("Neurosity");
      expect(info.model).toBe("Crown");
    });

    it("should get device status", async () => {
      const status = await firstValueFrom(neurosity.status());
      expect(status).toBeDefined();
      expect(status.state).toBe(STATUS.ONLINE);
      expect(status.charging).toBe(false);
      expect(status.battery).toBe(100);
      expect(status.sleepMode).toBe(false);
      expect(status.ssid).toBe("test-network");
    });

    it("should get signal quality", async () => {
      const quality = await firstValueFrom(neurosity.signalQuality());
      expect(quality).toBeDefined();
      expect(quality.CH1.status).toBe("good");
      expect(quality.CH1.standardDeviation).toBe(0.1);
    });

    it("should get OS version", async () => {
      const version = await firstValueFrom(neurosity.osVersion());
      expect(version).toBeDefined();
      expect(version).toBe("1.0.0");
    });

    it("should handle device status changes", (done) => {
      const newStatus: Partial<DeviceStatus> = {
        state: STATUS.ONLINE,
        charging: true,
        battery: 80,
        sleepMode: true,
        sleepModeReason: SLEEP_MODE_REASON.CHARGING
      };

      neurosity.status().subscribe({
        next: (status) => {
          if (status.charging === true) {
            expect(status.battery).toBe(80);
            expect(status.sleepMode).toBe(true);
            expect(status.sleepModeReason).toBe(SLEEP_MODE_REASON.CHARGING);
            done();
          }
        },
        error: done
      });

      cloudClient._updateDeviceStatus(newStatus);
    });

    it("should handle signal quality changes", (done) => {
      const newQuality: SignalQuality = {
        CH1: {
          standardDeviation: 0.5,
          status: "bad"
        },
        CH2: {
          standardDeviation: 0.5,
          status: "bad"
        }
      };

      cloudClient._updateSignalQuality(newQuality);

      neurosity
        .signalQuality()
        .pipe(take(1))
        .subscribe({
          next: (quality) => {
            expect(quality.CH1.standardDeviation).toBe(0.5);
            expect(quality.CH2.status).toBe("bad");
            done();
          },
          error: done
        });
    }, 10000);
  });

  describe("Device Selection", () => {
    it("should select device", async () => {
      await expect(
        neurosity.selectDevice((devices) => {
          const device = devices.find((d) => d.deviceId === testDeviceId);
          if (!device) throw new Error("Device not found");
          return device;
        })
      ).resolves.not.toThrow();

      const deviceInfo = await neurosity.getInfo();
      expect(deviceInfo.deviceId).toBe(testDeviceId);
    });

    it("should handle device selection failure", async () => {
      await expect(
        neurosity.selectDevice(() => {
          throw new Error("Device not found");
        })
      ).rejects.toThrow("Device not found");
    });

    it("should monitor device changes", (done) => {
      neurosity
        .onDeviceChange()
        .pipe(take(1))
        .subscribe({
          next: (deviceInfo) => {
            expect(deviceInfo).toBeDefined();
            expect(deviceInfo.deviceId).toBe(testDeviceId);
            done();
          },
          error: done
        });
    });
  });

  describe("Device Management", () => {
    it("should add device", async () => {
      await expect(neurosity.addDevice(testDeviceId)).resolves.not.toThrow();
    });

    it("should handle invalid device ID when adding", async () => {
      await expect(neurosity.addDevice("invalid-id")).rejects.toThrow(
        "Invalid device ID"
      );
    });

    it("should remove device", async () => {
      await expect(neurosity.removeDevice(testDeviceId)).resolves.not.toThrow();
    });

    it("should handle invalid device ID when removing", async () => {
      await expect(neurosity.removeDevice("invalid-id")).rejects.toThrow(
        "Invalid device ID"
      );
    });

    it("should transfer device", async () => {
      const transferOptions = {
        deviceId: testDeviceId,
        recipientsUserId: "target-user-id"
      };
      await expect(
        neurosity.transferDevice(transferOptions)
      ).resolves.not.toThrow();
    });

    it("should handle invalid transfer parameters", async () => {
      const invalidOptions = {
        deviceId: "invalid-id",
        recipientsUserId: "invalid-user"
      };
      await expect(neurosity.transferDevice(invalidOptions)).rejects.toThrow(
        "Invalid transfer parameters"
      );
    });

    it("should monitor user devices changes", async () => {
      const devices = await firstValueFrom(neurosity.onUserDevicesChange());
      expect(devices).toBeDefined();
      expect(Array.isArray(devices)).toBe(true);
      expect(devices[0].deviceId).toBe(testDeviceId);
    });
  });
});



================================================
File: src/__tests__/haptics.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { firstValueFrom, of, ReplaySubject } from "rxjs";
import { DeviceInfo } from "../types/deviceInfo";
import { STATUS } from "../types/status";
import { DeviceStatus } from "../types/status";
import {
  strongClick100,
  strongBuzz100,
  alert750ms,
  doubleClick100,
  sharpClick100
} from "../utils/hapticEffects";
import { MODEL_VERSION_2, HAPTIC_P7, HAPTIC_P8 } from "../utils/platform";

// Mock CloudClient
jest.mock("../api", () => {
  const originalModule = jest.requireActual("../api");

  class MockCloudClient {
    public user = null;
    public userClaims = { scopes: ["brainwaves"] };
    protected options: any;
    protected firebaseApp: any;
    protected firebaseUser: any;
    protected firebaseDevice: any;
    public subscriptionManager = {
      add: jest.fn(),
      remove: jest.fn(),
      removeAll: jest.fn()
    };
    private _selectedDevice = new ReplaySubject<DeviceInfo | null | undefined>(
      1
    );
    private _deviceInfo: DeviceInfo = {
      deviceId: "test-device-id",
      deviceNickname: "Test Device",
      channelNames: ["CH1", "CH2"],
      channels: 2,
      samplingRate: 250,
      manufacturer: "Neurosity",
      model: "Crown",
      modelName: "Crown",
      modelVersion: MODEL_VERSION_2,
      apiVersion: "1.0.0",
      osVersion: "1.0.0",
      emulator: false
    };

    constructor(options: any) {
      this.options = options;
      this._selectedDevice.next(this._deviceInfo);
    }

    getInfo = jest.fn().mockResolvedValue(this._deviceInfo);

    selectDevice = jest
      .fn()
      .mockImplementation(
        async (selector: (devices: DeviceInfo[]) => DeviceInfo) => {
          const selectedDevice = selector([this._deviceInfo]);
          this._selectedDevice.next(selectedDevice);
          return selectedDevice;
        }
      );

    getSelectedDevice = jest.fn().mockResolvedValue(this._deviceInfo);

    didSelectDevice = jest.fn().mockResolvedValue(true);

    onDeviceChange = jest.fn().mockReturnValue(
      of({
        state: STATUS.ONLINE,
        charging: false,
        battery: 100,
        sleepMode: false,
        updatingProgress: 0,
        bluetoothEnabled: false,
        sleepModeReason: null,
        lastHeartbeat: Date.now(),
        ssid: "test-network"
      } as DeviceStatus)
    );

    osVersion = jest.fn().mockReturnValue(of("1.0.0"));

    status = jest.fn().mockReturnValue(
      of({
        state: STATUS.ONLINE,
        charging: false,
        battery: 100,
        sleepMode: false,
        updatingProgress: 0,
        bluetoothEnabled: false,
        sleepModeReason: null,
        lastHeartbeat: Date.now(),
        ssid: "test-network"
      } as DeviceStatus)
    );

    dispatchAction = jest.fn().mockImplementation(async (payload: any) => {
      const { effects } = payload.message;
      for (const location of Object.keys(effects)) {
        if (![HAPTIC_P7, HAPTIC_P8].includes(location)) {
          throw new Error(`Invalid haptic location: ${location}`);
        }
        const effectList = effects[location];
        if (!Array.isArray(effectList)) {
          throw new Error("Effects must be an array");
        }
        if (effectList.length > 7) {
          throw new Error("Maximum items in array is 7");
        }
        for (const effect of effectList) {
          const validEffects = [
            strongClick100,
            strongBuzz100,
            alert750ms,
            doubleClick100,
            sharpClick100
          ];
          if (!validEffects.includes(effect)) {
            throw new Error("Invalid haptic effect");
          }
        }
      }
      return Promise.resolve();
    });
  }

  return {
    ...originalModule,
    CloudClient: jest
      .fn()
      .mockImplementation((options) => new MockCloudClient(options))
  };
});

describe("Haptics", () => {
  let neurosity: Neurosity;
  const testDeviceId = "test-device-id";

  beforeEach(() => {
    neurosity = new Neurosity({
      deviceId: testDeviceId,
      emulator: true
    });
  });

  describe("Haptic Effects", () => {
    it("should trigger strong click haptic effect on P7", async () => {
      await expect(
        neurosity.haptics({
          [HAPTIC_P7]: [strongClick100]
        })
      ).resolves.not.toThrow();
    });

    it("should trigger strong buzz haptic effect on P8", async () => {
      await expect(
        neurosity.haptics({
          [HAPTIC_P8]: [strongBuzz100]
        })
      ).resolves.not.toThrow();
    });

    it("should trigger effects on both motors", async () => {
      await expect(
        neurosity.haptics({
          [HAPTIC_P7]: [alert750ms],
          [HAPTIC_P8]: [doubleClick100]
        })
      ).resolves.not.toThrow();
    });

    it("should trigger multiple effects on one motor", async () => {
      await expect(
        neurosity.haptics({
          [HAPTIC_P7]: [sharpClick100, strongClick100, doubleClick100]
        })
      ).resolves.not.toThrow();
    });
  });

  describe("Error Handling", () => {
    it("should handle invalid haptic location", async () => {
      await expect(
        neurosity.haptics({
          invalid: [strongClick100]
        })
      ).rejects.toThrow(/location not supported/);
    });

    it("should handle invalid haptic effect", async () => {
      await expect(
        neurosity.haptics({
          [HAPTIC_P7]: ["invalid"]
        })
      ).rejects.toThrow("Invalid haptic effect");
    });

    it("should handle too many effects", async () => {
      await expect(
        neurosity.haptics({
          [HAPTIC_P7]: Array(8).fill(strongClick100)
        })
      ).rejects.toThrow(/Maximum items in array is 7/);
    });
  });
});



================================================
File: src/__tests__/metrics.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { BehaviorSubject, Observable, of, throwError } from "rxjs";
import { take } from "rxjs/operators";
import { DeviceInfo } from "../types/deviceInfo";
import { STATUS } from "../types/status";
import { DeviceStatus } from "../types/status";
import { PendingSubscription, Subscription } from "../types/subscriptions";

// Mock CloudClient
jest.mock("../api/index", () => {
  const mockSubscriptions = new Map();
  const mockListeners = new Map();
  let subscriptionId = 0;

  const mockCloudClient = {
    login: jest.fn(),
    logout: jest.fn(),
    onAuthStateChanged: jest.fn(),
    onDeviceChange: jest.fn(),
    status: jest.fn(),
    metrics: {
      on: jest.fn(
        (subscription: Subscription, callback: (value: any) => void) => {
          const listener = (value: any) => callback(value);
          const key = `${subscription.id}-${
            subscription.metric
          }-${subscription.labels.join(",")}`;
          if (!mockListeners.has(key)) {
            mockListeners.set(key, []);
          }
          mockListeners.get(key).push(listener);
          return listener;
        }
      ),
      subscribe: jest.fn((subscription: PendingSubscription) => {
        const id = `subscription-${subscriptionId++}`;
        const sub = { id, ...subscription };
        mockSubscriptions.set(id, sub);
        return sub;
      }),
      unsubscribe: jest.fn(
        (subscription: Subscription, listener: (value: any) => void) => {
          const key = `${subscription.id}-${
            subscription.metric
          }-${subscription.labels.join(",")}`;
          const listeners = mockListeners.get(key) || [];
          const index = listeners.indexOf(listener);
          if (index > -1) {
            listeners.splice(index, 1);
          }
          mockSubscriptions.delete(subscription.id);
        }
      )
    },
    osVersion: jest.fn(),
    userClaims: {
      scopes: ["focus", "kinesis"]
    }
  };

  return {
    CloudClient: jest.fn().mockImplementation(() => mockCloudClient)
  };
});

const testDeviceId = "mock-device-id";

describe("Metrics", () => {
  let neurosity: Neurosity;
  let mockFocusData: BehaviorSubject<any>;
  let mockKinesisData: BehaviorSubject<any>;
  let cloudClient: any;

  beforeEach(() => {
    neurosity = new Neurosity({
      deviceId: testDeviceId,
      emulator: true
    });

    cloudClient = (neurosity as any).cloudClient;

    // Mock device info
    const mockDeviceInfo = {
      deviceId: testDeviceId,
      channelNames: ["CP3", "C3", "F5", "PO3", "PO4", "F6", "C4", "CP4"],
      samplingRate: 256,
      modelName: "crown",
      modelVersion: "v3"
    };

    // Mock device status
    const mockDeviceStatus: DeviceStatus = {
      state: STATUS.ONLINE,
      charging: false,
      battery: 100,
      sleepMode: false,
      sleepModeReason: null,
      lastHeartbeat: Date.now(),
      ssid: "test-network"
    };

    // Setup mock data
    mockFocusData = new BehaviorSubject({
      probability: 0.85,
      label: "focus",
      metric: "awareness",
      timestamp: Date.now()
    });

    mockKinesisData = new BehaviorSubject({
      probability: 0.75,
      label: "leftArm",
      metric: "kinesis",
      timestamp: Date.now()
    });

    // Mock cloud client methods
    cloudClient.onDeviceChange.mockReturnValue(of(mockDeviceInfo));
    cloudClient.status.mockReturnValue(of(mockDeviceStatus));
    cloudClient.osVersion.mockReturnValue(of("16.0.0"));

    // Setup metrics subscription behavior
    cloudClient.metrics.subscribe.mockImplementation(
      (subscription: PendingSubscription) => {
        return { id: "test-id", ...subscription };
      }
    );

    cloudClient.metrics.on.mockImplementation(
      (subscription: Subscription, callback: (value: any) => void) => {
        if (subscription.metric === "awareness") {
          const sub = mockFocusData.subscribe((value) => callback(value));
          return () => sub.unsubscribe();
        } else if (subscription.metric === "kinesis") {
          const sub = mockKinesisData.subscribe((value) => callback(value));
          return () => sub.unsubscribe();
        }
        return () => {};
      }
    );
  });

  describe("Focus", () => {
    it("should get focus metrics", (done) => {
      neurosity
        .focus()
        .pipe(take(1))
        .subscribe({
          next: (focus) => {
            expect(focus).toBeDefined();
            expect(focus.probability).toBe(0.85);
            expect(focus.label).toBe("focus");
            expect(focus.metric).toBe("awareness");
            expect(focus.timestamp).toBeDefined();
            done();
          },
          error: done
        });
    });
  });

  describe("Kinesis", () => {
    it("should get kinesis metrics", (done) => {
      neurosity
        .kinesis("leftArm")
        .pipe(take(1))
        .subscribe({
          next: (kinesis) => {
            expect(kinesis).toBeDefined();
            expect(kinesis.probability).toBe(0.75);
            expect(kinesis.label).toBe("leftArm");
            expect(kinesis.metric).toBe("kinesis");
            expect(kinesis.timestamp).toBeDefined();
            done();
          },
          error: done
        });
    });
  });

  describe("Error Handling", () => {
    it("should handle device offline state", (done) => {
      // Mock device going offline
      cloudClient.onDeviceChange.mockReturnValue(
        of({
          deviceId: testDeviceId,
          channelNames: ["CP3", "C3", "F5", "PO3", "PO4", "F6", "C4", "CP4"],
          samplingRate: 256,
          modelName: "crown",
          modelVersion: "v3"
        })
      );

      cloudClient.status.mockReturnValue(
        throwError(() => new Error("Device is offline"))
      );

      neurosity
        .focus()
        .pipe(take(1))
        .subscribe({
          next: () => {
            done(new Error("Should not emit when device is offline"));
          },
          error: (err) => {
            expect(err).toBeDefined();
            expect(err.message).toContain("offline");
            done();
          }
        });
    });
  });
});



================================================
File: src/__tests__/oauth.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { createOAuthURL } from "../api/https/createOAuthURL";
import { getOAuthToken } from "../api/https/getOAuthToken";
import { OAuthConfig } from "../types/oauth";
import { OAuthQuery } from "../types/oauth";
import { SDKOptions } from "../types/options";
import axios from "axios";

// Mock axios
jest.mock("axios", () => ({
  get: jest.fn().mockImplementation((url, config) => {
    if (!config?.params?.client_id) {
      return Promise.reject(new Error("Missing required parameter: clientId"));
    }
    return Promise.resolve({
      data: {
        url: `/oauth/createOAuthURL?client_id=${
          config.params.client_id
        }&redirect_uri=${encodeURIComponent(
          config.params.redirect_uri
        )}&response_type=${config.params.response_type}&state=${
          config.params.state
        }&scope=${encodeURIComponent(config.params.scope)}`
      }
    });
  }),
  post: jest.fn().mockImplementation((url, data) => {
    if (!data.clientId || !data.clientSecret || !data.userId) {
      return Promise.reject(new Error("Missing OAuth credentials"));
    }
    if (data.clientId === "expired") {
      return Promise.reject(new Error("Token expired"));
    }
    return Promise.resolve({
      data: {
        userId: "test-user-id",
        accessToken: "test-access-token",
        refreshToken: "test-refresh-token",
        expiresIn: 3600
      }
    });
  })
}));

// Mock getOAuthToken
jest.mock("../api/https/getOAuthToken", () => {
  return {
    __esModule: true,
    getOAuthToken: jest
      .fn()
      .mockImplementation(async (query: OAuthQuery, options: SDKOptions) => {
        try {
          const baseURL = options.emulator
            ? `http://${options.emulatorHost}:${options.emulatorFunctionsPort}/neurosity-device/us-central1`
            : "https://us-central1-neurosity-device.cloudfunctions.net";
          const response = await axios.post(baseURL, query);
          return response.data;
        } catch (error) {
          throw error;
        }
      })
  };
});

describe("OAuth and Token Management", () => {
  const options: SDKOptions = {
    emulator: true,
    emulatorHost: "localhost",
    emulatorFunctionsPort: 5001
  };

  describe("OAuth URL Creation", () => {
    const config: OAuthConfig = {
      clientId: "test-client-id",
      redirectUri: "http://localhost:3000/callback",
      responseType: "token",
      state: "random-state",
      scope: ["read:devices-info", "read:brainwaves"]
    };

    it("should create OAuth URL with valid credentials", async () => {
      const url = await createOAuthURL(config, options);
      expect(url).toContain(`client_id=${config.clientId}`);
      expect(url).toContain(
        `redirect_uri=${encodeURIComponent(config.redirectUri)}`
      );
      expect(url).toContain(`response_type=${config.responseType}`);
      expect(url).toContain(`state=${config.state}`);
      expect(url).toContain(
        `scope=${encodeURIComponent(config.scope.join(","))}`
      );
    });

    it("should reject OAuth URL creation with missing credentials", async () => {
      const { clientId, ...invalidConfig } = config;
      await expect(
        createOAuthURL(invalidConfig as OAuthConfig, options)
      ).rejects.toThrow("Missing required parameter: clientId");
    });
  });

  describe("OAuth Token Management", () => {
    it("should get OAuth token with valid credentials", async () => {
      const query: OAuthQuery = {
        clientId: "test-client-id",
        clientSecret: "test-client-secret",
        userId: "test-user-id"
      };

      const token = await getOAuthToken(query, options);
      expect(token).toEqual({
        userId: "test-user-id",
        accessToken: "test-access-token",
        refreshToken: "test-refresh-token",
        expiresIn: 3600
      });
    });

    it("should handle expired token", async () => {
      const query: OAuthQuery = {
        clientId: "expired",
        clientSecret: "test-client-secret",
        userId: "test-user-id"
      };

      await expect(getOAuthToken(query, options)).rejects.toThrow(
        "Token expired"
      );
    });

    it("should handle missing credentials", async () => {
      const query: OAuthQuery = {
        clientId: "test-client-id",
        clientSecret: "",
        userId: ""
      };

      await expect(getOAuthToken(query, options)).rejects.toThrow(
        "Missing OAuth credentials"
      );
    });
  });
});



================================================
File: src/__tests__/settings.test.ts
================================================
import { BehaviorSubject, of } from "rxjs";
import { take } from "rxjs/operators";
import { Settings } from "../types/settings";
import { Neurosity } from "../Neurosity";

// Mock CloudClient
jest.mock("../api/index", () => {
  const mockSettings = new BehaviorSubject<Settings>({
    lsl: false,
    bluetooth: false,
    timesync: false,
    deviceNickname: "test-device"
  });

  const mockCloudClient = {
    login: jest.fn(),
    logout: jest.fn(),
    onAuthStateChanged: jest.fn(),
    onDeviceChange: jest.fn(),
    status: jest.fn(),
    didSelectDevice: jest.fn().mockResolvedValue(true),
    observeNamespace: jest.fn((namespace) => {
      if (namespace === "settings") {
        return mockSettings;
      }
      return of(null);
    }),
    changeSettings: jest.fn(async (settings) => {
      // Validate settings
      const validKeys = ["lsl", "bluetooth", "timesync", "deviceNickname"];
      const hasInvalidKey = Object.keys(settings).some(
        (key) => !validKeys.includes(key)
      );
      if (hasInvalidKey) {
        throw new Error("Invalid settings");
      }

      mockSettings.next({ ...mockSettings.value, ...settings });
      return Promise.resolve();
    }),
    userClaims: {
      scopes: ["settings"]
    }
  };

  return {
    CloudClient: jest.fn().mockImplementation(() => mockCloudClient)
  };
});

const testDeviceId = "mock-device-id";

describe("Settings", () => {
  let neurosity: Neurosity;
  let cloudClient: any;

  beforeEach(() => {
    neurosity = new Neurosity({
      deviceId: testDeviceId
    });

    cloudClient = (neurosity as any).cloudClient;
  });

  describe("Settings Management", () => {
    it("should get current settings", (done) => {
      neurosity
        .settings()
        .pipe(take(1))
        .subscribe({
          next: (settings) => {
            expect(settings).toBeDefined();
            expect(settings.lsl).toBe(false);
            expect(settings.bluetooth).toBe(false);
            expect(settings.timesync).toBe(false);
            expect(settings.deviceNickname).toBe("test-device");
            done();
          },
          error: done
        });
    });

    it("should update settings", (done) => {
      const newSettings = {
        lsl: true,
        bluetooth: true,
        timesync: true
      };

      neurosity
        .changeSettings(newSettings)
        .then(() => {
          neurosity
            .settings()
            .pipe(take(1))
            .subscribe({
              next: (settings) => {
                expect(settings.lsl).toBe(true);
                expect(settings.bluetooth).toBe(true);
                expect(settings.timesync).toBe(true);
                done();
              },
              error: done
            });
        })
        .catch(done);
    });

    it("should update device nickname", (done) => {
      const newNickname = "my-crown";

      neurosity
        .changeSettings({ deviceNickname: newNickname })
        .then(() => {
          neurosity
            .settings()
            .pipe(take(1))
            .subscribe({
              next: (settings) => {
                expect(settings.deviceNickname).toBe(newNickname);
                done();
              },
              error: done
            });
        })
        .catch(done);
    });
  });

  describe("Error Handling", () => {
    it("should handle invalid settings changes", async () => {
      const invalidChanges = {
        invalidSetting: true
      };

      // @ts-ignore - Testing invalid settings
      await expect(neurosity.changeSettings(invalidChanges)).rejects.toThrow(
        "Invalid settings"
      );
    });
  });
});



================================================
File: src/__tests__/setup.ts
================================================
/// <reference types="jest" />

// Increase the default timeout for async operations
jest.setTimeout(10000);

// Add custom matchers if needed
expect.extend({
  // Add custom matchers here if needed in the future
});



================================================
File: src/__tests__/streaming.test.ts
================================================
import { Neurosity } from "../Neurosity";
import { firstValueFrom, take, of, throwError } from "rxjs";
import { BrainwavesLabel, Epoch, PowerByBand, PSD } from "../types/brainwaves";
import { STATUS } from "../types/status";

// Mock Firebase modules
jest.mock("../api/firebase", () => ({
  FirebaseApp: jest.fn().mockImplementation(() => ({
    disconnect: jest.fn(),
    useEmulator: jest.fn()
  })),
  FirebaseUser: jest.fn().mockImplementation(() => ({
    login: jest.fn(),
    logout: jest.fn(),
    onAuthStateChanged: jest.fn().mockReturnValue(of(null)),
    onUserClaimsChange: jest.fn().mockReturnValue(of({}))
  })),
  FirebaseDevice: jest.fn().mockImplementation(() => ({
    disconnect: jest.fn(),
    getInfo: jest.fn(),
    dispatchAction: jest.fn()
  }))
}));

describe("Data Streaming", () => {
  let neurosity: Neurosity;
  const testDeviceId = "test-device-id";
  const options = {
    deviceId: testDeviceId,
    emulator: true,
    skill: {
      id: "test-skill-id",
      bundleId: "test-bundle-id",
      spec: "1.0.0",
      name: "Test Skill",
      description: "A test skill",
      metrics: ["brainwaves"],
      userId: "test-user-id",
      timestamp: Date.now(),
      status: "active",
      thumbnail: "test-thumbnail"
    }
  };

  beforeEach(() => {
    neurosity = new Neurosity(options);

    // Mock cloudClient with userClaims for OAuth scope validation
    // and required methods
    neurosity["cloudClient"] = {
      userClaims: {
        scopes: ["brainwaves"]
      },
      onDeviceChange: jest.fn().mockReturnValue(
        of({
          deviceId: testDeviceId,
          status: STATUS.ONLINE
        })
      ),
      osVersion: jest.fn().mockReturnValue(of("1.0.0")),
      status: jest.fn().mockReturnValue(of({ state: STATUS.ONLINE })),
      metrics: {
        subscribe: jest.fn().mockReturnValue(of({})),
        on: jest.fn().mockImplementation((subscription, callback) => {
          // Simulate metric data
          callback({});
          return jest.fn();
        }),
        unsubscribe: jest.fn()
      },
      subscriptionManager: {
        add: jest.fn(),
        remove: jest.fn(),
        removeAll: jest.fn()
      }
    } as any;

    // Mock _osHasBluetoothSupport to return false to avoid Bluetooth-related code paths
    neurosity["_osHasBluetoothSupport"] = jest.fn().mockReturnValue(of(false));
  });

  afterEach(async () => {
    try {
      await neurosity.logout();
    } catch (error) {
      // Ignore logout errors in cleanup
    }
  });

  describe("Brainwaves", () => {
    it("should stream raw brainwaves data", async () => {
      const mockRawData: Epoch = {
        data: [
          [1, 2, 3, 4, 5, 6, 7, 8],
          [9, 10, 11, 12, 13, 14, 15, 16]
        ],
        info: {
          samplingRate: 256,
          startTime: Date.now()
        }
      };

      // Mock the getCloudMetric function to return our mock data
      neurosity["_getCloudMetricDependencies"] = jest.fn().mockReturnValue({
        options,
        cloudClient: neurosity["cloudClient"],
        onDeviceChange: neurosity["cloudClient"].onDeviceChange,
        status: neurosity["cloudClient"].status,
        getCloudMetric: jest.fn().mockReturnValue(of(mockRawData))
      });

      const brainwaves = await firstValueFrom(
        neurosity.brainwaves("raw").pipe(take(1))
      );

      expect(brainwaves).toBeDefined();
      if ("data" in brainwaves) {
        expect(Array.isArray(brainwaves.data)).toBe(true);
        expect(brainwaves.data.length).toBe(2);
        expect(brainwaves.data[0].length).toBe(8);
        expect(brainwaves.info.samplingRate).toBe(256);
      }
    });

    it("should stream power by band data", async () => {
      const mockPowerByBand: PowerByBand = {
        gamma: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8],
        beta: [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
        alpha: [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
        theta: [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
        delta: [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2]
      };

      // Mock the getCloudMetric function to return our mock data
      neurosity["_getCloudMetricDependencies"] = jest.fn().mockReturnValue({
        options,
        cloudClient: neurosity["cloudClient"],
        onDeviceChange: neurosity["cloudClient"].onDeviceChange,
        status: neurosity["cloudClient"].status,
        getCloudMetric: jest.fn().mockReturnValue(of(mockPowerByBand))
      });

      const powerByBand = await firstValueFrom(
        neurosity.brainwaves("powerByBand").pipe(take(1))
      );

      expect(powerByBand).toBeDefined();
      if ("gamma" in powerByBand) {
        expect(powerByBand.gamma).toBeDefined();
        expect(powerByBand.beta).toBeDefined();
        expect(powerByBand.alpha).toBeDefined();
        expect(powerByBand.theta).toBeDefined();
        expect(powerByBand.delta).toBeDefined();
        expect(powerByBand.gamma.length).toBe(8);
      }
    });

    it("should stream PSD data", async () => {
      const mockPSD: PSD = {
        psd: [
          [1, 2, 3, 4],
          [5, 6, 7, 8]
        ],
        freqs: [0, 2, 4, 6],
        info: {
          samplingRate: 256,
          startTime: Date.now()
        }
      };

      // Mock the getCloudMetric function to return our mock data
      neurosity["_getCloudMetricDependencies"] = jest.fn().mockReturnValue({
        options,
        cloudClient: neurosity["cloudClient"],
        onDeviceChange: neurosity["cloudClient"].onDeviceChange,
        status: neurosity["cloudClient"].status,
        getCloudMetric: jest.fn().mockReturnValue(of(mockPSD))
      });

      const psd = await firstValueFrom(
        neurosity.brainwaves("psd").pipe(take(1))
      );

      expect(psd).toBeDefined();
      if ("psd" in psd) {
        expect(Array.isArray(psd.psd)).toBe(true);
        expect(Array.isArray(psd.freqs)).toBe(true);
        expect(psd.info.samplingRate).toBe(256);
      }
    });

    it("should throw error when OAuth scope is missing", async () => {
      // Remove brainwaves scope
      neurosity["cloudClient"].userClaims.scopes = [];

      // Mock the getCloudMetric function to throw an error
      neurosity["_getCloudMetricDependencies"] = jest.fn().mockReturnValue({
        options,
        cloudClient: neurosity["cloudClient"],
        onDeviceChange: neurosity["cloudClient"].onDeviceChange,
        status: neurosity["cloudClient"].status,
        getCloudMetric: jest.fn().mockImplementation(() => {
          throw new Error(
            "Neurosity SDK: No permission to access the brainwaves metric. To access this metric, edit the skill's permissions"
          );
        })
      });

      // Mock the metrics subscription to throw an error
      neurosity["cloudClient"].metrics.subscribe = jest
        .fn()
        .mockImplementation(() => {
          throw new Error(
            "Neurosity SDK: No permission to access the brainwaves metric. To access this metric, edit the skill's permissions"
          );
        });

      await expect(
        firstValueFrom(neurosity.brainwaves("raw").pipe(take(1)))
      ).rejects.toThrow(
        "Neurosity SDK: No permission to access the brainwaves metric. To access this metric, edit the skill's permissions"
      );
    });
  });

  describe("Metrics", () => {
    // TODO: Issue #XYZ - Metric streaming tests need to be implemented
    // These tests require proper mocking of the metric data streams
    it.skip("should stream focus data", async () => {
      const focus = await firstValueFrom(neurosity.focus().pipe(take(1)));
      expect(focus).toBeDefined();
      expect(typeof focus.probability).toBe("number");
      expect(focus.probability).toBeGreaterThanOrEqual(0);
      expect(focus.probability).toBeLessThanOrEqual(1);
    });

    it.skip("should stream calm data", async () => {
      const calm = await firstValueFrom(neurosity.calm().pipe(take(1)));
      expect(calm).toBeDefined();
      expect(typeof calm.probability).toBe("number");
      expect(calm.probability).toBeGreaterThanOrEqual(0);
      expect(calm.probability).toBeLessThanOrEqual(1);
    });

    it.skip("should stream kinesis data", async () => {
      const kinesis = await firstValueFrom(
        neurosity.kinesis("someAction").pipe(take(1))
      );
      expect(kinesis).toBeDefined();
      expect(typeof kinesis.probability).toBe("number");
      expect(kinesis.probability).toBeGreaterThanOrEqual(0);
      expect(kinesis.probability).toBeLessThanOrEqual(1);
    });
  });

  describe("Accelerometer", () => {
    // TODO: Issue #XYZ - Accelerometer streaming tests need to be implemented
    // These tests require proper mocking of the accelerometer data
    it.skip("should stream accelerometer data", async () => {
      const accelerometer = await firstValueFrom(
        neurosity.accelerometer().pipe(take(1))
      );
      expect(accelerometer).toBeDefined();
      expect(accelerometer.x).toBeDefined();
      expect(accelerometer.y).toBeDefined();
      expect(accelerometer.z).toBeDefined();
    });
  });

  describe("Error Handling", () => {
    // TODO: Issue #XYZ - Error handling tests need to be implemented
    // These tests require proper error simulation and handling
    it.skip("should handle subscription errors gracefully", async () => {
      // Mock a subscription error
      const errorSubscription = neurosity.brainwaves("raw").pipe(take(1));
      await expect(firstValueFrom(errorSubscription)).rejects.toThrow();
    });

    it.skip("should handle rate limiting", async () => {
      // Test rapid subscription creation and cleanup
      const subscriptions = Array(10)
        .fill(null)
        .map(() => neurosity.brainwaves("raw").pipe(take(1)));

      await expect(
        Promise.all(subscriptions.map((sub) => firstValueFrom(sub)))
      ).rejects.toThrow();
    });
  });
});



================================================
File: src/__tests__/timesync.test.ts
================================================
import { Neurosity } from "../Neurosity";

// Mock CloudClient
jest.mock("../api", () => {
  const originalModule = jest.requireActual("../api");

  class MockCloudClient {
    public user = null;
    public userClaims = { scopes: ["brainwaves"] };
    protected options: any;

    constructor(options: any) {
      this.options = options;
    }

    getTimesyncOffset = jest.fn().mockImplementation(() => {
      return 150; // Mock 150ms offset
    });
  }

  return {
    ...originalModule,
    CloudClient: jest
      .fn()
      .mockImplementation((options) => new MockCloudClient(options))
  };
});

describe("Timesync", () => {
  let neurosity: Neurosity;
  const testDeviceId = "test-device-id";

  describe("with timesync enabled", () => {
    beforeEach(() => {
      neurosity = new Neurosity({
        deviceId: testDeviceId,
        emulator: true,
        timesync: true
      });
    });

    it("should get timesync offset", () => {
      const offset = neurosity.getTimesyncOffset();
      expect(offset).toBeDefined();
      expect(typeof offset).toBe("number");
      expect(offset).toBe(150);
    });
  });

  describe("with timesync disabled", () => {
    beforeEach(() => {
      neurosity = new Neurosity({
        deviceId: testDeviceId,
        emulator: true,
        timesync: false
      });
    });

    it("should return 0 when timesync is disabled", () => {
      const offset = neurosity.getTimesyncOffset();
      expect(offset).toBeDefined();
      expect(typeof offset).toBe("number");
      expect(offset).toBe(0);
    });
  });
});



================================================
File: src/__tests__/utils.test.ts
================================================
import { create6DigitPin } from "../api/bluetooth/utils/create6DigitPin";
import { decodeJSONChunks } from "../api/bluetooth/utils/decodeJSONChunks";
import { stitchChunks } from "../api/bluetooth/utils/stitch";
import { TextCodec } from "../api/bluetooth/utils/textCodec";
import { TRANSPORT_TYPE } from "../api/bluetooth/types";
import { of } from "rxjs";
import { toArray } from "rxjs/operators";

describe("Bluetooth Utils", () => {
  describe("create6DigitPin", () => {
    it("should create a 6-digit pin", () => {
      const pin = create6DigitPin();
      expect(pin.toString()).toMatch(/^\d{6}$/);
    });
  });

  describe("decodeJSONChunks", () => {
    let textCodec: TextCodec;
    let addLog: jest.Mock;

    beforeEach(() => {
      textCodec = new TextCodec(TRANSPORT_TYPE.WEB);
      addLog = jest.fn();
    });

    it("should decode complete JSON chunks", (done) => {
      const chunks = [
        new Uint8Array(textCodec.encode('{"id":1,"name":"test"}\n')),
        new Uint8Array(textCodec.encode('{"id":2,"name":"test2"}\n'))
      ];

      of(...chunks)
        .pipe(
          decodeJSONChunks({
            textCodec,
            characteristicName: "test",
            delimiter: "\n",
            addLog
          }),
          toArray()
        )
        .subscribe((result) => {
          expect(result).toEqual([
            { id: 1, name: "test" },
            { id: 2, name: "test2" }
          ]);
          done();
        });
    });

    it("should handle invalid JSON", (done) => {
      const chunks = [
        new Uint8Array(textCodec.encode('{"id":1\n')),
        new Uint8Array(textCodec.encode("invalid json\n"))
      ];

      of(...chunks)
        .pipe(
          decodeJSONChunks({
            textCodec,
            characteristicName: "test",
            delimiter: "\n",
            addLog
          }),
          toArray()
        )
        .subscribe((result) => {
          expect(result).toEqual(['{"id":1', "invalid json"]);
          done();
        });
    });

    it("should handle empty chunks", (done) => {
      const chunks = [
        new Uint8Array(textCodec.encode("\n")),
        new Uint8Array(textCodec.encode("\n"))
      ];

      of(...chunks)
        .pipe(
          decodeJSONChunks({
            textCodec,
            characteristicName: "test",
            delimiter: "\n",
            addLog
          }),
          toArray()
        )
        .subscribe((result) => {
          expect(result).toEqual([]);
          done();
        });
    });

    it("should handle chunks without delimiters", (done) => {
      const chunks = [
        new Uint8Array(textCodec.encode('{"id":1}')),
        new Uint8Array(textCodec.encode('{"id":2}'))
      ];

      of(...chunks)
        .pipe(
          decodeJSONChunks({
            textCodec,
            characteristicName: "test",
            delimiter: "\n",
            addLog
          }),
          toArray()
        )
        .subscribe((result) => {
          expect(result).toEqual([]);
          done();
        });
    });

    it("should handle invalid JSON with custom error", (done) => {
      const chunks = [
        new Uint8Array(textCodec.encode('{"id":1\n')),
        new Uint8Array(textCodec.encode("invalid json\n"))
      ];

      // Mock error without message property
      const originalJSONParse = JSON.parse;
      JSON.parse = jest.fn().mockImplementation(() => {
        const error = Object.create(Error.prototype);
        throw error;
      });

      of(...chunks)
        .pipe(
          decodeJSONChunks({
            textCodec,
            characteristicName: "test",
            delimiter: "\n",
            addLog
          }),
          toArray()
        )
        .subscribe({
          next: (result) => {
            expect(result).toEqual(['{"id":1', "invalid json"]);
            JSON.parse = originalJSONParse;
            done();
          },
          error: (error) => {
            JSON.parse = originalJSONParse;
            done(error);
          }
        });
    });
  });

  describe("stitch", () => {
    it("should stitch complete chunks", (done) => {
      const chunks = ['{"id":1}\n', '{"id":2}\n'];

      of(...chunks)
        .pipe(stitchChunks({ delimiter: "\n" }), toArray())
        .subscribe({
          next: (result) => {
            expect(result).toEqual(['{"id":1}', '{"id":2}']);
            done();
          },
          error: (error) => {
            done(error);
          }
        });
    });

    it("should stitch incomplete chunks", (done) => {
      const chunks = ['{"id":', "1}\n", '{"id":2', "}\n"];

      of(...chunks)
        .pipe(stitchChunks({ delimiter: "\n" }), toArray())
        .subscribe({
          next: (result) => {
            expect(result).toEqual(['{"id":1}', '{"id":2}']);
            done();
          },
          error: (error) => {
            done(error);
          }
        });
    });

    it("should handle chunks with multiple delimiters", (done) => {
      const chunks = ['{"id":1}\n', '{"id":2}\n', '{"id":3}\n'];

      of(...chunks)
        .pipe(stitchChunks({ delimiter: "\n" }), toArray())
        .subscribe({
          next: (result) => {
            expect(result).toEqual(['{"id":1}', '{"id":2}', '{"id":3}']);
            done();
          },
          error: (error) => {
            done(error);
          }
        });
    });

    it("should handle empty chunks", (done) => {
      of<string>()
        .pipe(stitchChunks({ delimiter: "\n" }), toArray())
        .subscribe({
          next: (result) => {
            expect(result).toEqual([]);
            done();
          },
          error: (error) => {
            done(error);
          }
        });
    });

    it("should handle chunks without delimiters", (done) => {
      const chunks = ['{"id":1}', '{"id":2}'];

      of(...chunks)
        .pipe(stitchChunks({ delimiter: "\n" }), toArray())
        .subscribe({
          next: (result) => {
            expect(result).toEqual([]);
            done();
          },
          error: (error) => {
            done(error);
          }
        });
    });

    it("should handle chunks ending with delimiter", (done) => {
      const chunks = ['{"id":1}\n', '{"id":2}\n'];

      of(...chunks)
        .pipe(stitchChunks({ delimiter: "\n" }), toArray())
        .subscribe({
          next: (result) => {
            expect(result).toEqual(['{"id":1}', '{"id":2}']);
            done();
          },
          error: (error) => {
            done(error);
          }
        });
    });

    it("should handle remainder with delimiter", (done) => {
      const chunks = ['{"id":1}\n{"id', ":2}\n"];

      of(...chunks)
        .pipe(stitchChunks({ delimiter: "\n" }), toArray())
        .subscribe({
          next: (result) => {
            expect(result).toEqual(['{"id":1}', '{"id:2}']);
            done();
          },
          error: (error) => {
            done(error);
          }
        });
    });
  });

  describe("TextCodec", () => {
    let textCodec: TextCodec;

    beforeEach(() => {
      textCodec = new TextCodec(TRANSPORT_TYPE.WEB);
    });

    it("should encode and decode text", () => {
      const text = "Hello, World!";
      const encoded = textCodec.encode(text);
      const decoded = textCodec.decode(encoded as Uint8Array);
      expect(decoded).toBe(text);
    });

    it("should handle empty text", () => {
      const text = "";
      const encoded = textCodec.encode(text);
      const decoded = textCodec.decode(encoded as Uint8Array);
      expect(decoded).toBe(text);
    });

    it("should handle special characters", () => {
      const text = "Hello, 世界!";
      const encoded = textCodec.encode(text);
      const decoded = textCodec.decode(encoded as Uint8Array);
      expect(decoded).toBe(text);
    });

    it("should handle different transport types", () => {
      const nativeCodec = new TextCodec(TRANSPORT_TYPE.REACT_NATIVE);
      const text = "Hello, World!";
      const encoded = nativeCodec.encode(text);
      expect(Array.isArray(encoded)).toBe(true);
      const decoded = nativeCodec.decode(Uint8Array.from(encoded));
      expect(decoded).toBe(text);
    });

    it("should handle invalid input for decode", () => {
      const invalidInput = new Uint8Array([0xff, 0xff, 0xff]);
      const decoded = textCodec.decode(invalidInput);
      expect(decoded).toBeDefined();
      expect(typeof decoded).toBe("string");
    });

    it("should handle null input in decode", () => {
      const emptyArray = new Uint8Array(0);
      const result = textCodec.decode(emptyArray);
      expect(result).toBe("");
    });

    it("should handle undefined input in decode", () => {
      const emptyArray = new Uint8Array(0);
      const result = textCodec.decode(emptyArray);
      expect(result).toBe("");
    });

    it("should handle non-web transport type", () => {
      const nodeCodec = new TextCodec("node" as TRANSPORT_TYPE);
      const text = "Hello, World!";
      const encoded = nodeCodec.encode(text);
      expect(encoded).toBeDefined();
      const decoded = nodeCodec.decode(encoded as Uint8Array);
      expect(decoded).toBe(text);
    });
  });
});



================================================
File: src/__tests__/setup/webBluetooth.setup.ts
================================================
/**
 * Setup file for Web Bluetooth tests
 * This configures a minimal browser-like environment for testing Web Bluetooth functionality
 */

// Mock window and navigator.bluetooth
const mockBluetooth = {
  getDevices: jest.fn(),
  requestDevice: jest.fn()
};

const mockNavigator = {
  bluetooth: mockBluetooth
} as unknown as Navigator;

const mockWindow = {
  navigator: mockNavigator
} as unknown as Window & typeof globalThis;

// Set up global object for Node environment
(global as any).window = mockWindow;
(global as any).navigator = mockWindow.navigator;

// Mock isWebBluetoothSupported
jest.mock("../../api/bluetooth/web/isWebBluetoothSupported", () => ({
  isWebBluetoothSupported: jest.fn().mockReturnValue(true)
}));

// Mock IPK constants
jest.mock("@neurosity/ipk", () => ({
  BLUETOOTH_PRIMARY_SERVICE_UUID_HEX: "test-service-uuid",
  BLUETOOTH_COMPANY_IDENTIFIER_HEX: 0x1234,
  BLUETOOTH_DEVICE_NAME_PREFIXES: ["Crown"],
  BLUETOOTH_CHUNK_DELIMITER: "\n",
  BLUETOOTH_CHARACTERISTICS: {
    ACTION: "test-action-uuid",
    ACTION_STATUS: "test-action-status-uuid",
    COMMAND: "test-command-uuid",
    STATE: "test-state-uuid"
  }
}));



================================================
File: src/api/index.ts
================================================
import { Observable, ReplaySubject, EMPTY } from "rxjs";
import { fromEventPattern, firstValueFrom } from "rxjs";
import { filter, shareReplay, share, switchMap } from "rxjs/operators";

import { FirebaseApp, FirebaseUser, FirebaseDevice } from "./firebase";
import { UserWithMetadata } from "./firebase";
import { Timesync } from "../timesync";
import { SubscriptionManager } from "../subscriptions/SubscriptionManager";
import { heartbeatAwareStatus } from "../utils/heartbeat";
import { filterInternalKeys } from "../utils/filterInternalKeys";
import { Client } from "../types/client";
import { Action, Actions } from "../types/actions";
import { Metrics } from "../types/metrics";
import { SDKOptions } from "../types/options";
import { SkillsClient, DeviceSkill } from "../types/skill";
import { Credentials, CustomToken } from "../types/credentials";
import { EmailAndPassword } from "../types/credentials";
import { ChangeSettings } from "../types/settings";
import { Subscription } from "../types/subscriptions";
import { DeviceStatus } from "../types/status";
import { DeviceInfo, DeviceSelector, OSVersion } from "../types/deviceInfo";
import { UserClaims } from "../types/user";
import { OAuthRemoveResponse } from "../types/oauth";
import { Experiment } from "../types/experiment";
import { TransferDeviceOptions } from "../utils/transferDevice";

export {
  credentialWithLink,
  createUser,
  SERVER_TIMESTAMP,
  __firebase
} from "./firebase";

/**
 * @hidden
 */
export class CloudClient implements Client {
  public user;
  public userClaims;
  protected options: SDKOptions;
  protected firebaseApp: FirebaseApp;
  protected firebaseUser: FirebaseUser;
  protected firebaseDevice: FirebaseDevice;
  protected timesync: Timesync;
  protected subscriptionManager: SubscriptionManager;
  protected status$: Observable<DeviceStatus>;
  protected osVersion$: Observable<OSVersion>;

  /**
   * @internal
   */
  private _selectedDevice = new ReplaySubject<DeviceInfo | null | undefined>(1);

  constructor(options: SDKOptions) {
    this.options = options;
    this.subscriptionManager = new SubscriptionManager();
    this.firebaseApp = new FirebaseApp(options);
    this.firebaseUser = new FirebaseUser(this.firebaseApp);

    this._selectedDevice.next(undefined);

    this.status$ = heartbeatAwareStatus(
      this.observeNamespace("status").pipe(share())
    ).pipe(filterInternalKeys(), shareReplay(1));

    this.osVersion$ = this.observeNamespace("info/osVersion").pipe(
      shareReplay(1)
    );

    this.firebaseUser.onAuthStateChanged().subscribe((user) => {
      this.user = user;
    });

    this.firebaseUser.onUserClaimsChange().subscribe((userClaims) => {
      this.userClaims = userClaims;
    });

    this.onDeviceChange().subscribe((device) => {
      if (this.firebaseDevice) {
        this.firebaseDevice.disconnect();
      }

      if (!device) {
        return;
      }

      this.firebaseDevice = new FirebaseDevice({
        deviceId: device.deviceId,
        firebaseApp: this.firebaseApp,
        dependencies: {
          subscriptionManager: this.subscriptionManager
        }
      });

      if (this.options.timesync) {
        this.timesync = new Timesync({
          status$: this.status(),
          getTimesync: this.firebaseDevice.getTimesync.bind(this.firebaseDevice)
        });
      }
    });
  }

  public onDeviceChange(): Observable<DeviceInfo> {
    return this._selectedDevice
      .asObservable()
      .pipe(filter((value) => value !== undefined));
  }

  public osVersion(): Observable<OSVersion> {
    return this.osVersion$;
  }

  // Automatically select device when user logs in
  private async setAutoSelectedDevice(): Promise<DeviceInfo | null> {
    // Select based on `deviceId` passed
    if (this.options.deviceId) {
      return await this.selectDevice((devices) => {
        return devices.find(
          (device) => device.deviceId === this.options.deviceId
        );
      });
    }

    // Auto select first-claimed device
    if (!this.options.deviceId && this.options.autoSelectDevice) {
      return await this.selectDevice((devices) => {
        // Auto select first device
        return devices[0];
      });
    }

    return null;
  }

  public get actions(): Actions {
    return {
      dispatch: (action) => {
        return this.firebaseDevice.dispatchAction(action);
      }
    };
  }

  public async dispatchAction(action: Action): Promise<any> {
    return await this.firebaseDevice.dispatchAction(action);
  }

  public async disconnect(): Promise<any> {
    return this.firebaseApp.disconnect();
  }

  public async getInfo(): Promise<any> {
    return await this.firebaseDevice.getInfo();
  }

  public async login(credentials: Credentials): Promise<any> {
    if (this.user) {
      return Promise.reject(`Already logged in.`);
    }

    const auth = await this.firebaseUser.login(credentials);
    const selectedDevice = await this.setAutoSelectedDevice();

    return {
      ...auth,
      selectedDevice
    };
  }

  public async logout(): Promise<any> {
    if (this.firebaseDevice) {
      this.firebaseDevice.disconnect();
    }

    return await this.firebaseUser.logout();
  }

  public onAuthStateChanged() {
    return this.firebaseUser.onAuthStateChanged().pipe(
      switchMap(async (user): Promise<UserWithMetadata> => {
        if (!user) {
          return null;
        }

        const selectedDevice = this.didSelectDevice()
          ? await this.getSelectedDevice()
          : await this.setAutoSelectedDevice();

        const userWithMetadata: UserWithMetadata = Object.assign(user, {
          selectedDevice
        });

        return userWithMetadata;
      })
    );
  }

  public getDevices() {
    return this.firebaseUser.getDevices();
  }

  public addDevice(deviceId: string): Promise<void> {
    return this.firebaseUser.addDevice(deviceId);
  }

  public async removeDevice(deviceId: string): Promise<void> {
    const [hasError, errorMessage] = await this.firebaseUser
      .removeDevice(deviceId)
      .then(() => [false])
      .catch((error) => [true, error]);

    if (hasError) {
      return Promise.reject(errorMessage);
    }

    const selectedDevice = await this.getSelectedDevice();

    if (selectedDevice?.deviceId === deviceId) {
      this._selectedDevice.next(null);
    }
  }

  public async transferDevice(options: TransferDeviceOptions): Promise<void> {
    const [hasError, error] = await this.firebaseUser
      .transferDevice(options)
      .then(() => [false])
      .catch((error) => [true, error]);

    if (hasError) {
      return Promise.reject(error);
    }

    const selectedDevice = await this.getSelectedDevice();

    if (selectedDevice?.deviceId === options.deviceId) {
      this._selectedDevice.next(null);
    }
  }

  public onUserDevicesChange(): Observable<DeviceInfo[]> {
    return this.firebaseUser.onUserDevicesChange();
  }

  public onUserClaimsChange(): Observable<UserClaims> {
    return this.firebaseUser.onUserClaimsChange();
  }

  public async didSelectDevice(): Promise<boolean> {
    const selectedDevice = await this.getSelectedDevice();
    return !!selectedDevice;
  }

  public async selectDevice(
    deviceSelector: DeviceSelector
  ): Promise<DeviceInfo> {
    const devices = await this.getDevices();

    if (!devices) {
      return Promise.reject(
        `Did not find any devices for this user. Make sure your device is claimed by your Neurosity account.`
      );
    }

    const deviceTupleSelector = (devices: DeviceInfo[]) =>
      devices.find((device) => {
        if (!Array.isArray(deviceSelector)) {
          return false;
        }

        const [deviceKey, deviceValue] = deviceSelector;
        return (
          JSON.stringify(device?.[deviceKey]) === JSON.stringify(deviceValue)
        );
      });

    const device =
      typeof deviceSelector === "function"
        ? deviceSelector(devices)
        : deviceTupleSelector(devices);

    if (!device) {
      return Promise.reject(
        `A device was not provided. Try returning a device from the devicesList provided in the callback.`
      );
    }

    const hasPermission = await this.firebaseUser.hasDevicePermission(
      device.deviceId
    );

    if (!hasPermission) {
      return Promise.reject(`Rejected device access due to permissions.`);
    }

    this._selectedDevice.next(device);

    return device;
  }

  public async getSelectedDevice(): Promise<DeviceInfo | null> {
    return await firstValueFrom(this._selectedDevice);
  }

  public status(): Observable<DeviceStatus> {
    return this.status$;
  }

  public observeNamespace(namespace: string): Observable<any> {
    const getNamespaceValues = () =>
      fromEventPattern(
        (handler) => this.firebaseDevice.onNamespace(namespace, handler),
        (handler) => this.firebaseDevice.offNamespace(namespace, handler)
      );

    return this.onDeviceChange().pipe(
      switchMap((selectedDevice) => {
        return selectedDevice ? getNamespaceValues() : EMPTY;
      })
    );
  }

  public async onceNamespace(namespace: string): Promise<any> {
    return await this.firebaseDevice.onceNamespace(namespace);
  }

  public get metrics(): Metrics {
    return {
      next: (metricName: string, metricValue: any): void => {
        this.firebaseDevice.nextMetric(metricName, metricValue);
      },
      on: (subscription: Subscription, callback: Function): Function => {
        return this.firebaseDevice.onMetric(subscription, callback);
      },
      subscribe: (subscription: Subscription): Subscription => {
        const subscriptionCreated =
          this.firebaseDevice.subscribeToMetric(subscription);
        this.subscriptionManager.add(subscriptionCreated);
        return subscriptionCreated;
      },
      unsubscribe: (subscription: Subscription, listener: Function): void => {
        this.subscriptionManager.remove(subscription);
        this.firebaseDevice.unsubscribeFromMetric(subscription);
        this.firebaseDevice.removeMetricListener(subscription, listener);
      }
    };
  }

  public createAccount(credentials: EmailAndPassword) {
    return this.firebaseUser.createAccount(credentials);
  }

  public deleteAccount() {
    return this.firebaseUser.deleteAccount();
  }

  public createBluetoothToken(): Promise<string> {
    return this.firebaseDevice.createBluetoothToken();
  }

  public createCustomToken(): Promise<CustomToken> {
    return this.firebaseUser.createCustomToken();
  }

  public removeOAuthAccess(): Promise<OAuthRemoveResponse> {
    return this.firebaseUser.removeOAuthAccess();
  }

  public onUserExperiments(): Observable<Experiment[]> {
    return this.firebaseUser.onUserExperiments();
  }

  public deleteUserExperiment(experimentId: string): Promise<void> {
    return this.firebaseUser.deleteUserExperiment(experimentId);
  }

  public get skills(): SkillsClient {
    return {
      get: async (bundleId: string): Promise<DeviceSkill> => {
        return this.firebaseDevice.getSkill(bundleId);
      }
    };
  }

  public get timestamp(): number {
    return this.options.timesync ? this.timesync.timestamp : Date.now();
  }

  public getTimesyncOffset(): number {
    return this.timesync.offset;
  }

  public changeSettings(settings: ChangeSettings): Promise<void> {
    return this.firebaseDevice.changeSettings(settings);
  }

  public goOffline() {
    this.firebaseApp.goOffline();
  }

  public goOnline() {
    this.firebaseApp.goOnline();
  }

  /**
   * @internal
   */
  public __getApp() {
    return this.firebaseApp.app;
  }
}



================================================
File: src/api/bluetooth/BluetoothClient.ts
================================================
import { defer, Observable, timer } from "rxjs";
import { ReplaySubject, firstValueFrom, EMPTY } from "rxjs";
import { switchMap, share, tap, distinctUntilChanged } from "rxjs/operators";

import { WebBluetoothTransport } from "./web/WebBluetoothTransport";
import { ReactNativeTransport } from "./react-native/ReactNativeTransport";
import { binaryBufferToEpoch } from "./utils/binaryBufferToEpoch";
import { DeviceInfo } from "../../types/deviceInfo";
import { Action } from "../../types/actions";
import { Epoch } from "../../types/epoch";
import { BLUETOOTH_CONNECTION } from "./types";
import { DeviceNicknameOrPeripheral } from "./BluetoothTransport";
import { Peripheral } from "./react-native/types/BleManagerTypes";

export type BluetoothTransport = WebBluetoothTransport | ReactNativeTransport;

type IsAuthenticated = boolean;
type ExpiresIn = number;
type IsAuthenticatedResponse = [IsAuthenticated, ExpiresIn];

type CreateBluetoothToken = () => Promise<string>;

type Options = {
  transport: BluetoothTransport;
  selectedDevice$: Observable<DeviceInfo>;
  osHasBluetoothSupport$: Observable<boolean>;
  createBluetoothToken: CreateBluetoothToken;
};

export class BluetoothClient {
  transport: BluetoothTransport;
  deviceInfo: DeviceInfo;
  selectedDevice$ = new ReplaySubject<DeviceInfo>(1);
  osHasBluetoothSupport$ = new ReplaySubject<boolean>(1);
  isAuthenticated$ = new ReplaySubject<IsAuthenticated>(1);

  _focus$: Observable<any>;
  _calm$: Observable<any>;
  _accelerometer$: Observable<any>;
  _brainwavesRaw$: Observable<any>;
  _brainwavesRawUnfiltered$: Observable<any>;
  _brainwavesPSD$: Observable<any>;
  _brainwavesPowerByBand$: Observable<any>;
  _signalQuality$: Observable<any>;
  _status$: Observable<any>;
  _settings$: Observable<any>;
  _wifiNearbyNetworks$: Observable<any>;
  _wifiConnections$: Observable<any>;

  constructor(options: Options) {
    const {
      transport,
      selectedDevice$,
      osHasBluetoothSupport$,
      createBluetoothToken
    } = options ?? {};

    if (!transport) {
      throw new Error(`No bluetooth transport provided.`);
    }

    this.transport = transport;

    // Pass events to the internal selectedDevice$ if selectedDevice$ is passed via options
    if (selectedDevice$) {
      selectedDevice$.subscribe(this.selectedDevice$);
    }

    // Pass events to the internal osHasBluetoothSupport$ if osHasBluetoothSupport$ is passed via options
    if (osHasBluetoothSupport$) {
      osHasBluetoothSupport$.subscribe(this.osHasBluetoothSupport$);
    }

    this.osHasBluetoothSupport$
      .pipe(
        switchMap((osHasBluetoothSupport: boolean) =>
          osHasBluetoothSupport
            ? this.transport._autoConnect(this.selectedDevice$)
            : EMPTY
        )
      )
      .subscribe({
        error: (error: Error) => {
          this.transport.addLog(
            `Auto connect: error -> ${error?.message ?? error}`
          );
        }
      });

    // Auto authentication
    if (typeof createBluetoothToken === "function") {
      this.transport.addLog("Auto authentication enabled");
      this._autoAuthenticate(createBluetoothToken).subscribe();
    } else {
      this.transport.addLog("Auto authentication not enabled");
    }

    // Auto manage action notifications
    this.osHasBluetoothSupport$
      .pipe(
        switchMap((osHasBluetoothSupport: boolean) =>
          osHasBluetoothSupport
            ? this.transport._autoToggleActionNotifications()
            : EMPTY
        )
      )
      .subscribe();

    // Multicast metrics (share)
    this._focus$ = this._subscribeWhileAuthenticated("focus");
    this._calm$ = this._subscribeWhileAuthenticated("calm");
    this._accelerometer$ = this._subscribeWhileAuthenticated("accelerometer");
    this._brainwavesRaw$ = this._subscribeWhileAuthenticated(
      "raw",
      true // skipJSONDecoding
    );
    this._brainwavesRawUnfiltered$ = this._subscribeWhileAuthenticated(
      "rawUnfiltered",
      true // skipJSONDecoding
    );
    this._brainwavesPSD$ = this._subscribeWhileAuthenticated("psd");
    this._brainwavesPowerByBand$ =
      this._subscribeWhileAuthenticated("powerByBand");
    this._signalQuality$ = this._subscribeWhileAuthenticated("signalQuality");
    this._status$ = this._subscribeWhileAuthenticated("status");
    this._settings$ = this._subscribeWhileAuthenticated("settings");
    this._wifiNearbyNetworks$ =
      this._subscribeWhileAuthenticated("wifiNearbyNetworks");
    this._wifiConnections$ =
      this._subscribeWhileAuthenticated("wifiConnections");
  }

  _autoAuthenticate(createBluetoothToken: CreateBluetoothToken) {
    const REAUTHENTICATE_INTERVAL = 3600000; // 1 hour
    const reauthenticateInterval$ = timer(0, REAUTHENTICATE_INTERVAL).pipe(
      tap(() => {
        this.transport.addLog(`Auto authentication in progress...`);
      })
    );

    return this.osHasBluetoothSupport$.pipe(
      switchMap((osHasBluetoothSupport) =>
        osHasBluetoothSupport ? this.connection() : EMPTY
      ),
      switchMap((connection) =>
        connection === BLUETOOTH_CONNECTION.CONNECTED
          ? reauthenticateInterval$
          : EMPTY
      ),
      switchMap(async () => await this.isAuthenticated()),
      tap(async ([isAuthenticated]) => {
        if (!isAuthenticated) {
          const token = await createBluetoothToken();
          await this.authenticate(token);
        } else {
          this.transport.addLog(`Already authenticated`);
        }
      })
    );
  }

  enableAutoConnect(autoConnect: boolean): void {
    this.transport.enableAutoConnect(autoConnect);
  }

  async _hasBluetoothSupport(): Promise<boolean> {
    return await firstValueFrom(this.osHasBluetoothSupport$);
  }

  async authenticate(token: string): Promise<IsAuthenticatedResponse> {
    const hasBluetoothSupport = await this._hasBluetoothSupport();
    if (!hasBluetoothSupport) {
      const errorMessage = `authenticate method: The OS version does not support Bluetooth.`;
      this.transport.addLog(errorMessage);
      return Promise.reject(errorMessage);
    }

    await this.transport.writeCharacteristic("auth", token);

    const isAuthenticatedResponse = await this.isAuthenticated();

    const [isAuthenticated] = isAuthenticatedResponse;

    this.transport.addLog(
      `Authentication ${isAuthenticated ? "succeeded" : "failed"}`
    );

    this.isAuthenticated$.next(isAuthenticated);

    return isAuthenticatedResponse;
  }

  async isAuthenticated(): Promise<IsAuthenticatedResponse> {
    try {
      const [isAuthenticated, expiresIn] =
        await this.transport.readCharacteristic("auth", true);

      this.isAuthenticated$.next(isAuthenticated);

      return [isAuthenticated, expiresIn];
    } catch (error) {
      const failedResponse: IsAuthenticatedResponse = [false, null];

      this.transport.addLog(`Authentication error -> ${error}`);

      this.isAuthenticated$.next(false);

      return failedResponse;
    }
  }

  // Method for React Native only
  scan(options?) {
    if (this.transport instanceof ReactNativeTransport) {
      return this.transport.scan(options);
    }

    if (this.transport instanceof WebBluetoothTransport) {
      throw new Error(
        `scan method is compatibly with the React Native transport only`
      );
    }

    throw new Error(`unknown transport`);
  }

  // Argument for React Native only
  connect(deviceNicknameORPeripheral?: DeviceNicknameOrPeripheral) {
    if (this.transport instanceof ReactNativeTransport) {
      return this.transport.connect(deviceNicknameORPeripheral as Peripheral);
    }

    if (this.transport instanceof WebBluetoothTransport) {
      return deviceNicknameORPeripheral
        ? this.transport.connect(deviceNicknameORPeripheral as string)
        : this.transport.connect();
    }
  }

  disconnect() {
    return this.transport.disconnect();
  }

  connection() {
    return this.transport.connection();
  }

  logs() {
    return this.transport.logs$.asObservable();
  }

  async getDeviceId(): Promise<string> {
    // This is a public characteristic and does not require authentication
    return this.transport.readCharacteristic("deviceId");
  }

  async _withAuthentication<T>(getter: () => Promise<T>): Promise<T> {
    // First check if the OS supports Bluetooth before checking if the device is authenticated
    const hasBluetoothSupport = await this._hasBluetoothSupport();
    if (!hasBluetoothSupport) {
      const errorMessage = `The OS version does not support Bluetooth.`;
      this.transport.addLog(errorMessage);
      return Promise.reject(errorMessage);
    }

    const isAuthenticated = await firstValueFrom(this.isAuthenticated$);
    if (!isAuthenticated) {
      const errorMessage = `Authentication required.`;
      this.transport.addLog(errorMessage);
      return Promise.reject(errorMessage);
    }

    return await getter();
  }

  _subscribeWhileAuthenticated(
    characteristicName: string,
    skipJSONDecoding = false
  ): Observable<any> {
    return this.osHasBluetoothSupport$.pipe(
      switchMap((osHasBluetoothSupport) =>
        osHasBluetoothSupport ? this.isAuthenticated$ : EMPTY
      ),
      distinctUntilChanged(),
      switchMap((isAuthenticated) =>
        isAuthenticated
          ? this.transport.subscribeToCharacteristic({
              characteristicName,
              skipJSONDecoding
            })
          : EMPTY
      ),
      share()
    );
  }

  focus() {
    return this._focus$;
  }

  calm() {
    return this._calm$;
  }

  accelerometer() {
    return this._accelerometer$;
  }

  brainwaves(label: string): Observable<Epoch | any> {
    switch (label) {
      default:
      case "raw":
        return defer(() => this.getInfo()).pipe(
          switchMap((deviceInfo: DeviceInfo) =>
            this._brainwavesRaw$.pipe(binaryBufferToEpoch(deviceInfo))
          )
        );

      case "rawUnfiltered":
        return defer(() => this.getInfo()).pipe(
          switchMap((deviceInfo: DeviceInfo) =>
            this._brainwavesRawUnfiltered$.pipe(binaryBufferToEpoch(deviceInfo))
          )
        );

      case "psd":
        return this._brainwavesPSD$;

      case "powerByBand":
        return this._brainwavesPowerByBand$;
    }
  }

  signalQuality() {
    return this._signalQuality$;
  }

  async addMarker(label: string): Promise<void> {
    await this.dispatchAction({
      action: "marker",
      command: "add",
      message: {
        timestamp: Date.now(),
        label
      }
    });
  }

  async getInfo(): Promise<DeviceInfo> {
    return await this._withAuthentication(() =>
      firstValueFrom(
        this.transport.subscribeToCharacteristic({
          characteristicName: "deviceInfo"
        })
      )
    );
  }

  status() {
    return this._status$;
  }

  async dispatchAction(action: Action): Promise<any> {
    return await this._withAuthentication(() =>
      this.transport.dispatchAction({
        characteristicName: "actions",
        action
      })
    );
  }

  settings() {
    return this._settings$;
  }

  haptics(effects) {
    const metric = "haptics";

    return this.dispatchAction({
      action: metric,
      command: "queue",
      responseRequired: true,
      responseTimeout: 4000,
      //  @TODO: implement validation logic as per SDK
      message: { effects }
    });
  }

  get wifi() {
    return {
      nearbyNetworks: (): Observable<any> => this._wifiNearbyNetworks$,

      connections: (): Observable<any> => this._wifiConnections$,

      connect: (ssid: string, password?: string) => {
        if (!ssid) {
          return Promise.reject(`Missing ssid`);
        }

        return this.dispatchAction({
          action: "wifi",
          command: "connect",
          responseRequired: true,
          responseTimeout: 1000 * 60 * 2, // 2 minutes
          message: {
            ssid,
            password: password ?? null
          }
        });
      },

      forgetConnection: (ssid: string): Promise<any> => {
        if (!ssid) {
          return Promise.reject(`Missing ssid`);
        }

        return this.dispatchAction({
          action: "wifi",
          command: "forget-connection",
          responseRequired: true,
          responseTimeout: 1000 * 15, // 15 seconds
          message: {
            ssid
          }
        });
      },

      reset: () => {
        return this.dispatchAction({
          action: "wifi",
          command: "reset",
          responseRequired: true,
          responseTimeout: 1000 * 30, // 30 seconds
          message: {
            // without this, the action will resolve as soon as the
            // action is received by the OS
            respondOnSuccess: true
          }
        });
      },

      speedTest: () => {
        return this.dispatchAction({
          action: "wifi",
          command: "speed-test",
          responseRequired: true,
          responseTimeout: 1000 * 60 * 1 // 1 minute
        });
      }
    };
  }
}



================================================
File: src/api/bluetooth/BluetoothTransport.ts
================================================
import { Observable, Subject } from "rxjs";

import { BLUETOOTH_CONNECTION, TRANSPORT_TYPE } from "./types";
import { Action } from "../../types/actions";
import { DeviceInfo, OSVersion } from "../../types/deviceInfo";
import { Peripheral } from "./react-native/types/BleManagerTypes";

export type DeviceNicknameOrPeripheral = string | Peripheral;

/**
 * @hidden
 */
export interface BluetoothTransport {
  type: TRANSPORT_TYPE;
  connect(
    deviceNicknameORPeripheral?: DeviceNicknameOrPeripheral
  ): Promise<void>;
  _autoConnect(
    selectedDevice$: Observable<DeviceInfo>,
    osVersion: Observable<OSVersion>
  ): Observable<void>;
  disconnect(): Promise<void>;
  connection(): Observable<BLUETOOTH_CONNECTION>;
  requestDevice?(): any;
  addLog: (log: string) => void;
  logs$: Subject<string>;

  enableAutoConnect?(value: boolean): void;

  // React Native only
  scan?(options?: { seconds?: number }): Observable<Peripheral[]>;

  subscribeToCharacteristic(args: {
    characteristicName: string;
    manageNotifications?: boolean;
  }): Observable<any>;

  readCharacteristic(characteristicName: string, parse?: boolean): Promise<any>;

  writeCharacteristic(characteristicName: string, data: string): Promise<void>;

  dispatchAction(args: {
    characteristicName: string;
    action: Action;
  }): Promise<any>;
}



================================================
File: src/api/bluetooth/constants.ts
================================================
import { BLUETOOTH_CHARACTERISTICS } from "@neurosity/ipk";

export const ANDROID_MAX_MTU: number = 512;
export const REACT_NATIVE_MAX_BYTE_SIZE: number = 512; // the default is 20

export const DEFAULT_ACTION_RESPONSE_TIMEOUT: number = 1000 * 60; // 1 minute

// Reverse BLUETOOTH_CHARACTERISTICS key/values for easy lookup
export const CHARACTERISTIC_UUIDS_TO_NAMES = Object.fromEntries(
  Object.entries(BLUETOOTH_CHARACTERISTICS).map((entries) => entries.reverse())
);



================================================
File: src/api/bluetooth/index.ts
================================================
export * from "./BluetoothClient";
export * from "./web/WebBluetoothTransport";
export * from "./react-native/ReactNativeTransport";
export * from "./utils/osHasBluetoothSupport";
export * from "./types/index";



================================================
File: src/api/bluetooth/react-native/ReactNativeTransport.ts
================================================
import { BLUETOOTH_PRIMARY_SERVICE_UUID_STRING } from "@neurosity/ipk";
import { BLUETOOTH_CHUNK_DELIMITER } from "@neurosity/ipk";
import { BLUETOOTH_DEVICE_NAME_PREFIXES } from "@neurosity/ipk";
import { Observable, BehaviorSubject, ReplaySubject, NEVER } from "rxjs";
import { defer, merge, of, timer, fromEventPattern, identity } from "rxjs";
import { switchMap, map, filter, takeUntil, tap } from "rxjs/operators";
import { shareReplay, distinctUntilChanged, finalize } from "rxjs/operators";
import { take, share, scan, distinct } from "rxjs/operators";

import { BluetoothTransport } from "../BluetoothTransport";
import { create6DigitPin } from "../utils/create6DigitPin";
import { TextCodec } from "../utils/textCodec";
import { ActionOptions, SubscribeOptions } from "../types";
import { TRANSPORT_TYPE, BLUETOOTH_CONNECTION } from "../types";
import { BleManager } from "./types/BleManagerTypes";
import { Peripheral, PeripheralInfo } from "./types/BleManagerTypes";
import { NativeEventEmitter } from "./types/ReactNativeTypes";
import { PlatformOSType } from "./types/ReactNativeTypes";
import { DEFAULT_ACTION_RESPONSE_TIMEOUT } from "../constants";
import { CHARACTERISTIC_UUIDS_TO_NAMES } from "../constants";
import { ANDROID_MAX_MTU } from "../constants";
import { REACT_NATIVE_MAX_BYTE_SIZE } from "../constants";
import { DeviceInfo } from "../../../types/deviceInfo";
import { decodeJSONChunks } from "../utils/decodeJSONChunks";

type Characteristic = {
  characteristicUUID: string;
  serviceUUID: string;
  peripheralId: string;
};

type CharacteristicsByName = {
  [name: string]: Characteristic;
};

type Options = {
  BleManager: BleManager;
  bleManagerEmitter: NativeEventEmitter;
  platform: PlatformOSType;
  autoConnect?: boolean;
};

type BleManagerEvents = {
  stopScan$: Observable<void>;
  discoverPeripheral$: Observable<Peripheral>;
  connectPeripheral$: Observable<void>;
  disconnectPeripheral$: Observable<void>;
  didUpdateValueForCharacteristic$: Observable<any>;
  didUpdateState$: Observable<any>;
};

const defaultOptions: Pick<Options, "autoConnect"> = {
  autoConnect: true
};

export class ReactNativeTransport implements BluetoothTransport {
  type: TRANSPORT_TYPE = TRANSPORT_TYPE.REACT_NATIVE;
  textCodec = new TextCodec(this.type);
  options: Options;
  BleManager: BleManager;
  bleManagerEmitter: NativeEventEmitter;
  platform: PlatformOSType;
  bleEvents: BleManagerEvents;

  device: Peripheral;
  characteristicsByName: CharacteristicsByName = {};

  connection$ = new BehaviorSubject<BLUETOOTH_CONNECTION>(
    BLUETOOTH_CONNECTION.DISCONNECTED
  );
  pendingActions$ = new BehaviorSubject<any[]>([]);
  logs$ = new ReplaySubject<string>(10);
  onDisconnected$: Observable<void>;
  connectionStream$: Observable<BLUETOOTH_CONNECTION> = this.connection$
    .asObservable()
    .pipe(
      filter((connection) => !!connection),
      distinctUntilChanged(),
      shareReplay(1)
    );

  _isAutoConnectEnabled$ = new ReplaySubject<boolean>(1);

  constructor(options: Options) {
    if (!options) {
      const errorMessage = "React Native transport: missing options.";
      this.addLog(errorMessage);
      throw new Error(errorMessage);
    }

    this.options = { ...defaultOptions, ...options };

    const { BleManager, bleManagerEmitter, platform, autoConnect } =
      this.options;

    if (!BleManager) {
      const errorMessage = "React Native option: BleManager not provided.";
      this.addLog(errorMessage);
      throw new Error(errorMessage);
    }

    if (!bleManagerEmitter) {
      const errorMessage =
        "React Native option: bleManagerEmitter not provided.";
      this.addLog(errorMessage);
      throw new Error(errorMessage);
    }

    if (!platform) {
      const errorMessage = "React Native option: platform not provided.";
      this.addLog(errorMessage);
      throw new Error(errorMessage);
    }

    this.BleManager = BleManager;
    this.bleManagerEmitter = bleManagerEmitter;
    this.platform = platform;

    this._isAutoConnectEnabled$.next(autoConnect);

    this._isAutoConnectEnabled$.subscribe((autoConnect) => {
      this.addLog(`Auto connect: ${autoConnect ? "enabled" : "disabled"}`);
    });

    // We create a single listener per event type to
    // avoid missing events when multiple listeners are attached.
    this.bleEvents = {
      stopScan$: this._fromEvent("BleManagerStopScan"),
      discoverPeripheral$: this._fromEvent("BleManagerDiscoverPeripheral"),
      connectPeripheral$: this._fromEvent("BleManagerConnectPeripheral"),
      disconnectPeripheral$: this._fromEvent("BleManagerDisconnectPeripheral"),
      didUpdateValueForCharacteristic$: this._fromEvent(
        "BleManagerDidUpdateValueForCharacteristic"
      ),
      didUpdateState$: this._fromEvent("BleManagerDidUpdateState")
    };

    this.onDisconnected$ = this.bleEvents.disconnectPeripheral$.pipe(share());

    // Initializes the module. This can only be called once.
    this.BleManager.start({ showAlert: false })
      .then(() => {
        this.addLog(`BleManger started`);
      })
      .catch((error) => {
        this.addLog(`BleManger failed to start. ${error?.message ?? error}`);
      });

    this.connection$.asObservable().subscribe((connection) => {
      this.addLog(`connection status is ${connection}`);
    });

    this.onDisconnected$.subscribe(() => {
      this.connection$.next(BLUETOOTH_CONNECTION.DISCONNECTED);
    });
  }

  addLog(log: string) {
    this.logs$.next(log);
  }

  isConnected() {
    const connection = this.connection$.getValue();
    return connection === BLUETOOTH_CONNECTION.CONNECTED;
  }

  _autoConnect(selectedDevice$: Observable<DeviceInfo>): Observable<void> {
    const selectedDeviceAfterDisconnect$ = this.onDisconnected$.pipe(
      switchMap(() => selectedDevice$)
    );

    return this._isAutoConnectEnabled$.pipe(
      switchMap((isAutoConnectEnabled) =>
        isAutoConnectEnabled
          ? merge(selectedDevice$, selectedDeviceAfterDisconnect$)
          : NEVER
      ),
      switchMap((selectedDevice) =>
        this.scan().pipe(
          switchMap((peripherals: Peripheral[]) => {
            const peripheralMatch = peripherals.find(
              (peripheral) => peripheral.name === selectedDevice?.deviceNickname
            );

            return peripheralMatch ? of(peripheralMatch) : NEVER;
          }),
          distinct((peripheral: Peripheral) => peripheral.id),
          take(1)
        )
      ),
      switchMap(async (peripheral) => {
        return await this.connect(peripheral);
      })
    );
  }

  enableAutoConnect(autoConnect: boolean): void {
    this._isAutoConnectEnabled$.next(autoConnect);
  }

  connection(): Observable<BLUETOOTH_CONNECTION> {
    return this.connectionStream$;
  }

  _fromEvent(eventName: string): Observable<any> {
    return fromEventPattern(
      (addHandler) => {
        this.bleManagerEmitter.addListener(eventName, addHandler);
      },
      () => {
        this.bleManagerEmitter.removeAllListeners(eventName);
      }
    ).pipe(
      // @important: we need to share the subscription
      // to avoid missing events
      share()
    );
  }

  scan(options?: {
    seconds?: number;
    once?: boolean;
    skipConnectionUpdate?: boolean;
  }): Observable<Peripheral[]> {
    const RESCAN_INTERVAL = 10_000; // 10 seconds
    const seconds = options?.seconds ?? RESCAN_INTERVAL / 1000;
    const once = options?.once ?? false;
    // If we are already connected to a peripheral and start scanning,
    // be default, it will set the connection status to SCANNING and not
    // update it back if no device is connected to
    const skipConnectionUpdate = options?.skipConnectionUpdate ?? false;
    const serviceUUIDs = [BLUETOOTH_PRIMARY_SERVICE_UUID_STRING];
    const allowDuplicates = true;
    const scanOptions = {};

    const scanOnce$ = new Observable((subscriber) => {
      try {
        this.BleManager.scan(
          serviceUUIDs,
          seconds,
          allowDuplicates,
          scanOptions
        ).then(() => {
          this.addLog(`BleManger scanning ${once ? "once" : "indefintely"}`);
          subscriber.next();
        });
      } catch (error) {
        this.addLog(
          `BleManger scanning ${once ? "once" : "indefintely"} failed. ${
            error?.message ?? error
          }`
        );
        subscriber.error(error);
      }

      return () => {
        this.BleManager.stopScan();
      };
    });

    const scan$ = once
      ? scanOnce$
      : timer(0, RESCAN_INTERVAL).pipe(switchMap(() => scanOnce$));

    const peripherals$ = scan$.pipe(
      tap(() => {
        if (!skipConnectionUpdate) {
          this.connection$.next(BLUETOOTH_CONNECTION.SCANNING);
        }
      }),
      takeUntil(this.onDisconnected$),
      switchMap(() => this.bleEvents.discoverPeripheral$),
      // Filter out devices that are not Neurosity devices
      filter((peripheral: Peripheral) => {
        const peripheralName: string =
          peripheral?.advertising?.localName ?? peripheral.name ?? "";

        if (!peripheralName) {
          return false;
        }

        const startsWithPrefix =
          BLUETOOTH_DEVICE_NAME_PREFIXES.findIndex((prefix) =>
            peripheralName.startsWith(prefix)
          ) !== -1;

        return startsWithPrefix;
      }),
      scan((acc, peripheral): { [name: string]: Peripheral } => {
        // normalized peripheral name for backwards compatibility
        // Neurosity OS v15 doesn't have peripheral.name as deviceNickname
        // it only has peripheral.advertising.localName as deviceNickname
        // and OS v16 has both as deviceNickname
        const peripheralName: string =
          peripheral?.advertising?.localName ?? peripheral.name ?? "";

        const manufactureDataString = this.textCodec
          .decode(peripheral?.advertising?.manufacturerData?.bytes ?? [])
          ?.slice?.(2); // First 2 bytes are reserved for the Neurosity company code

        return {
          ...acc,
          [peripheral.id]: {
            ...peripheral,
            name: peripheralName,
            manufactureDataString
          }
        };
      }, {}),
      distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),
      map((peripheralMap): Peripheral[] => Object.values(peripheralMap)),
      share()
    );

    return peripherals$;
  }

  async connect(peripheral: Peripheral): Promise<void> {
    return new Promise(async (resolve, reject) => {
      try {
        if (!peripheral) {
          this.addLog("Peripheral not found");
          return;
        }

        this.connection$.next(BLUETOOTH_CONNECTION.CONNECTING);

        await this.BleManager.connect(peripheral.id);

        this.addLog(`Getting service...`);

        const peripheralInfo: PeripheralInfo =
          await this.BleManager.retrieveServices(peripheral.id, [
            BLUETOOTH_PRIMARY_SERVICE_UUID_STRING
          ]);

        if (!peripheralInfo) {
          this.addLog("Could not retreive services");
          reject(new Error(`Could not retreive services`));
          return;
        }

        this.addLog(
          `Got service ${BLUETOOTH_PRIMARY_SERVICE_UUID_STRING}, getting characteristics...`
        );

        this.device = peripheral;

        this.characteristicsByName = Object.fromEntries(
          peripheralInfo.characteristics.map((characteristic: any) => [
            CHARACTERISTIC_UUIDS_TO_NAMES[
              characteristic.characteristic.toLowerCase() // react native uses uppercase
            ],
            {
              characteristicUUID: characteristic.characteristic,
              serviceUUID: characteristic.service,
              peripheralId: peripheral.id
            }
          ])
        );

        this.addLog(`Got characteristics.`);

        if (this.platform === "android") {
          await this.BleManager.requestMTU(peripheral.id, ANDROID_MAX_MTU)
            .then((updatedMTU) => {
              this.addLog(
                `Successfully updated Android MTU to ${updatedMTU} bytes. Requested MTU: ${ANDROID_MAX_MTU} bytes.`
              );
            })
            .catch((error) => {
              this.addLog(
                `Failed to set Android MTU of ${ANDROID_MAX_MTU} bytes. Error: ${error}`
              );
            });
        }

        this.addLog(`Successfully connected to peripheral ${peripheral.id}`);

        this.connection$.next(BLUETOOTH_CONNECTION.CONNECTED);

        resolve();
      } catch (error) {
        reject(error);
      }
    });
  }

  async disconnect(): Promise<void> {
    try {
      if (this.isConnected() && this?.device?.id) {
        await this.BleManager.disconnect(this.device.id);
      }
    } catch (error) {
      return Promise.reject(error);
    }
  }

  getCharacteristicByName(characteristicName: string): Characteristic {
    if (!(characteristicName in this.characteristicsByName)) {
      throw new Error(
        `Characteristic by name ${characteristicName} is not found`
      );
    }

    return this.characteristicsByName?.[characteristicName];
  }

  subscribeToCharacteristic({
    characteristicName,
    manageNotifications = true,
    skipJSONDecoding = false
  }: SubscribeOptions): Observable<any> {
    const getData = ({
      peripheralId,
      serviceUUID,
      characteristicUUID
    }: Characteristic) =>
      defer(async () => {
        if (manageNotifications) {
          try {
            await this.BleManager.startNotification(
              peripheralId,
              serviceUUID,
              characteristicUUID
            );

            this.addLog(
              `Started notifications for ${characteristicName} characteristic`
            );
          } catch (error) {
            this.addLog(
              `Attemped to stop notifications for ${characteristicName} characteristic: ${
                error?.message ?? error
              }`
            );
          }
        }
      }).pipe(
        switchMap(() => this.bleEvents.didUpdateValueForCharacteristic$),
        finalize(async () => {
          if (manageNotifications) {
            try {
              await this.BleManager.stopNotification(
                peripheralId,
                serviceUUID,
                characteristicUUID
              );
              this.addLog(
                `Stopped notifications for ${characteristicName} characteristic`
              );
            } catch (error) {
              this.addLog(
                `Attemped to stop notifications for ${characteristicName} characteristic: ${
                  error?.message ?? error
                }`
              );
            }
          }
        }),
        filter(({ characteristic }) => characteristic === characteristicUUID),
        map(
          ({
            value
          }: {
            value: number[];
            characteristic: string;
          }): Uint8Array => new Uint8Array(value)
        )
      );

    return this.connection$.pipe(
      switchMap((connection) =>
        connection === BLUETOOTH_CONNECTION.CONNECTED
          ? getData(this.getCharacteristicByName(characteristicName)).pipe(
              skipJSONDecoding
                ? identity // noop
                : decodeJSONChunks({
                    textCodec: this.textCodec,
                    characteristicName,
                    delimiter: BLUETOOTH_CHUNK_DELIMITER,
                    addLog: (message: string) => this.addLog(message)
                  })
            )
          : NEVER
      )
    );
  }

  async readCharacteristic(
    characteristicName: string,
    parse: boolean = false
  ): Promise<any> {
    this.addLog(`Reading characteristic: ${characteristicName}`);

    const { peripheralId, serviceUUID, characteristicUUID } =
      this.getCharacteristicByName(characteristicName);

    if (!characteristicUUID) {
      return Promise.reject(
        new Error(`Did not find characteristic matching ${characteristicName}`)
      );
    }

    try {
      const value: number[] = await this.BleManager.read(
        peripheralId,
        serviceUUID,
        characteristicUUID
      );

      const decodedValue = this.textCodec.decode(new Uint8Array(value));
      const data = parse ? JSON.parse(decodedValue) : decodedValue;

      this.addLog(
        `Received read data from ${characteristicName} characteristic: \n${data}`
      );

      return data;
    } catch (error) {
      return Promise.reject(
        new Error(
          `readCharacteristic ${characteristicName} error. ${
            error?.message ?? error
          }`
        )
      );
    }
  }

  async writeCharacteristic(
    characteristicName: string,
    data: string
  ): Promise<void> {
    this.addLog(`Writing characteristic: ${characteristicName}`);

    const { peripheralId, serviceUUID, characteristicUUID } =
      this.getCharacteristicByName(characteristicName);

    if (!characteristicUUID) {
      return Promise.reject(
        new Error(`Did not find characteristic matching ${characteristicName}`)
      );
    }

    const encoded = this.textCodec.encode(data);

    await this.BleManager.write(
      peripheralId,
      serviceUUID,
      characteristicUUID,
      encoded,
      REACT_NATIVE_MAX_BYTE_SIZE
    );
  }

  _addPendingAction(actionId: number): void {
    const actions = this.pendingActions$.getValue();
    this.pendingActions$.next([...actions, actionId]);
  }

  _removePendingAction(actionId: number): void {
    const actions = this.pendingActions$.getValue();
    this.pendingActions$.next(
      actions.filter((id: number): boolean => id !== actionId)
    );
  }

  _autoToggleActionNotifications(): Observable<any> {
    let started: boolean = false;

    return this.connection$.asObservable().pipe(
      switchMap((connection) =>
        connection === BLUETOOTH_CONNECTION.CONNECTED
          ? this.pendingActions$
          : NEVER
      ),
      tap(async (pendingActions: string[]) => {
        const { peripheralId, serviceUUID, characteristicUUID } =
          this.getCharacteristicByName("actions");

        const hasPendingActions = !!pendingActions.length;

        if (hasPendingActions && !started) {
          started = true;
          try {
            await this.BleManager.startNotification(
              peripheralId,
              serviceUUID,
              characteristicUUID
            );
            this.addLog(`Started notifications for [actions] characteristic`);
          } catch (error) {
            this.addLog(
              `Attemped to start notifications for [actions] characteristic: ${
                error?.message ?? error
              }`
            );
          }
        }

        if (!hasPendingActions && started) {
          started = false;
          try {
            await this.BleManager.stopNotification(
              peripheralId,
              serviceUUID,
              characteristicUUID
            );
            this.addLog(`Stopped notifications for actions characteristic`);
          } catch (error) {
            this.addLog(
              `Attemped to stop notifications for [actions] characteristic: ${
                error?.message ?? error
              }`
            );
          }
        }
      })
    );
  }

  async dispatchAction({
    characteristicName,
    action
  }: ActionOptions): Promise<any> {
    const {
      responseRequired = false,
      responseTimeout = DEFAULT_ACTION_RESPONSE_TIMEOUT
    } = action;

    return new Promise(async (resolve, reject) => {
      const actionId: number = create6DigitPin(); // use to later identify and filter response
      const payload = JSON.stringify({ actionId, ...action }); // add the response id to the action

      this.addLog(`Dispatched action with id ${actionId}`);

      if (responseRequired && responseTimeout) {
        this._addPendingAction(actionId);

        const timeout = timer(responseTimeout).subscribe(() => {
          this._removePendingAction(actionId);
          reject(
            new Error(
              `Action with id ${actionId} timed out after ${responseTimeout}ms`
            )
          );
        });

        // listen for a response before writing
        this.subscribeToCharacteristic({
          characteristicName,
          manageNotifications: false
        })
          .pipe(
            filter((response: any) => response?.actionId === actionId),
            take(1)
          )
          .subscribe((response) => {
            timeout.unsubscribe();
            this._removePendingAction(actionId);
            resolve(response);
          });

        // register action by writing
        this.writeCharacteristic(characteristicName, payload).catch((error) => {
          this._removePendingAction(actionId);
          reject(error);
        });
      } else {
        this.writeCharacteristic(characteristicName, payload)
          .then(() => {
            resolve(null);
          })
          .catch((error) => {
            reject(error);
          });
      }
    });
  }
}



================================================
File: src/api/bluetooth/react-native/types/BleManagerTypes.ts
================================================
// Taken from react-native-ble-manager project

export declare class BleManager {
  start(options?: StartOptions): Promise<void>;

  scan(
    serviceUUIDs: string[],
    seconds: number,
    allowDuplicates?: boolean,
    options?: ScanOptions
  ): Promise<void>;
  stopScan(): Promise<void>;
  connect(peripheralID: string): Promise<void>;
  disconnect(peripheralID: string, force?: boolean): Promise<void>;
  checkState(): void;
  startNotification(
    peripheralID: string,
    serviceUUID: string,
    characteristicUUID: string
  ): Promise<void>;

  /// Android only
  startNotificationUseBuffer(
    peripheralID: string,
    serviceUUID: string,
    characteristicUUID: string,
    buffer: number
  ): Promise<void>;

  stopNotification(
    peripheralID: string,
    serviceUUID: string,
    characteristicUUID: string
  ): Promise<void>;

  read(
    peripheralID: string,
    serviceUUID: string,
    characteristicUUID: string
  ): Promise<any>;
  write(
    peripheralID: string,
    serviceUUID: string,
    characteristicUUID: string,
    data: any,
    maxByteSize?: number
  ): Promise<void>;
  writeWithoutResponse(
    peripheralID: string,
    serviceUUID: string,
    characteristicUUID: string,
    data: any,
    maxByteSize?: number,
    queueSleepTime?: number
  ): Promise<void>;

  readRSSI(peripheralID: string): Promise<void>;

  getConnectedPeripherals(
    serviceUUIDs: string[]
  ): Promise<Peripheral[]>;
  getDiscoveredPeripherals(): Promise<Peripheral[]>;
  isPeripheralConnected(
    peripheralID: string,
    serviceUUIDs: string[]
  ): Promise<boolean>;

  requestConnectionPriority(
    peripheralID: string,
    connectionPriority: ConnectionPriority
  ): Promise<void>;
  /// Android only
  enableBluetooth(): Promise<void>;
  // [Android only]
  refreshCache(peripheralID: string): Promise<void>;
  // [Android only API 21+]
  requestMTU(peripheralID: string, mtu: number): Promise<void>;

  createBond(
    peripheralID: string,
    peripheralPin?: string
  ): Promise<void>;
  removeBond(peripheralID: string): Promise<void>;
  getBondedPeripherals(): Promise<Peripheral[]>;
  removePeripheral(peripheralID: string): Promise<void>;

  retrieveServices(
    peripheralID: string,
    serviceUUIDs?: string[]
  ): Promise<PeripheralInfo>;
}

export interface Peripheral {
  id: string;
  rssi: number;
  name?: string;
  advertising: AdvertisingData;
}

export interface AdvertisingData {
  isConnectable?: boolean;
  localName?: string;
  manufacturerData?: any;
  serviceUUIDs?: string[];
  txPowerLevel?: number;
}

export interface StartOptions {
  showAlert?: boolean;
  restoreIdentifierKey?: string;
  queueIdentifierKey?: string;
  forceLegacy?: boolean;
}

export interface ScanOptions {
  numberOfMatches?: number;
  matchMode?: number;
  scanMode?: number;
  reportDelay?: number;
}

// [Android only API 21+]
export enum ConnectionPriority {
  balanced = 0,
  high = 1,
  low = 2
}

// Custom
export interface PeripheralInfo {
  characteristics: Characteristic[];
}

// Custom
export interface Characteristic {
  characteristic: string; // characteristic UUID
}



================================================
File: src/api/bluetooth/react-native/types/ReactNativeTypes.ts
================================================
// This is a subset of React Native's types
// EmitterSubscription
// EventSubscription
// EventSubscriptionVendor
// EventEmitter
// NativeModule
// NativeEventEmitter
// PlatformOSType

// Type definitions for react-native 0.70
// Project: https://github.com/facebook/react-native
// Definitions by: Eloy Durán <https://github.com/alloy>
//                 HuHuanming <https://github.com/huhuanming>
//                 Kyle Roach <https://github.com/iRoachie>
//                 Tim Wang <https://github.com/timwangdev>
//                 Kamal Mahyuddin <https://github.com/kamal>
//                 Alex Dunne <https://github.com/alexdunne>
//                 Manuel Alabor <https://github.com/swissmanu>
//                 Michele Bombardi <https://github.com/bm-software>
//                 Martin van Dam <https://github.com/mvdam>
//                 Kacper Wiszczuk <https://github.com/esemesek>
//                 Ryan Nickel <https://github.com/mrnickel>
//                 Souvik Ghosh <https://github.com/souvik-ghosh>
//                 Cheng Gibson <https://github.com/nossbigg>
//                 Saransh Kataria <https://github.com/saranshkataria>
//                 Wojciech Tyczynski <https://github.com/tykus160>
//                 Jake Bloom <https://github.com/jakebloom>
//                 Ceyhun Ozugur <https://github.com/ceyhun>
//                 Mike Martin <https://github.com/mcmar>
//                 Theo Henry de Villeneuve <https://github.com/theohdv>
//                 Romain Faust <https://github.com/romain-faust>
//                 Be Birchall <https://github.com/bebebebebe>
//                 Jesse Katsumata <https://github.com/Naturalclar>
//                 Xianming Zhong <https://github.com/chinesedfan>
//                 Valentyn Tolochko <https://github.com/vtolochk>
//                 Sergey Sychev <https://github.com/SychevSP>
//                 Daiki Ihara <https://github.com/sasurau4>
//                 Abe Dolinger <https://github.com/256hz>
//                 Dominique Richard <https://github.com/doumart>
//                 Mohamed Shaban <https://github.com/drmas>
//                 Jérémy Barbet <https://github.com/jeremybarbet>
//                 David Sheldrick <https://github.com/ds300>
//                 Natsathorn Yuthakovit <https://github.com/natsathorn>
//                 ConnectDotz <https://github.com/connectdotz>
//                 Alexey Molchan <https://github.com/alexeymolchan>
//                 Alex Brazier <https://github.com/alexbrazier>
//                 Arafat Zahan <https://github.com/kuasha420>
//                 Pedro Hernández <https://github.com/phvillegas>
//                 Sebastian Silbermann <https://github.com/eps1lon>
//                 Zihan Chen <https://github.com/ZihanChen-MSFT>
//                 Lorenzo Sciandra <https://github.com/kelset>
//                 Mateusz Wit <https://github.com/MateWW>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.0

/**
 * EmitterSubscription represents a subscription with listener and context data.
 */
interface EmitterSubscription extends EventSubscription {
  emitter: EventEmitter;
  listener: () => any;
  context: any;

  /**
   * @param emitter - The event emitter that registered this
   *   subscription
   * @param subscriber - The subscriber that controls
   *   this subscription
   * @param listener - Function to invoke when the specified event is
   *   emitted
   * @param context - Optional context object to use when invoking the
   *   listener
   */
  new (
    emitter: EventEmitter,
    subscriber: EventSubscriptionVendor,
    listener: () => any,
    context: any
  ): EmitterSubscription;

  /**
   * Removes this subscription from the emitter that registered it.
   * Note: we're overriding the `remove()` method of EventSubscription here
   * but deliberately not calling `super.remove()` as the responsibility
   * for removing the subscription lies with the EventEmitter.
   */
  remove(): void;
}

/**
 * EventSubscription represents a subscription to a particular event. It can
 * remove its own subscription.
 */
interface EventSubscription {
  eventType: string;
  key: number;
  subscriber: EventSubscriptionVendor;

  /**
   * @param subscriber the subscriber that controls
   *   this subscription.
   */
  new (subscriber: EventSubscriptionVendor): EventSubscription;

  /**
   * Removes this subscription from the subscriber that controls it.
   */
  remove(): void;
}

/**
 * EventSubscriptionVendor stores a set of EventSubscriptions that are
 * subscribed to a particular event type.
 */
declare class EventSubscriptionVendor {
  constructor();

  /**
   * Adds a subscription keyed by an event type.
   *
   */
  addSubscription(
    eventType: string,
    subscription: EventSubscription
  ): EventSubscription;

  /**
   * Removes a bulk set of the subscriptions.
   *
   * @param eventType - Optional name of the event type whose
   *   registered supscriptions to remove, if null remove all subscriptions.
   */
  removeAllSubscriptions(eventType?: string): void;

  /**
   * Removes a specific subscription. Instead of calling this function, call
   * `subscription.remove()` directly.
   *
   */
  removeSubscription(subscription: any): void;

  /**
   * Returns the array of subscriptions that are currently registered for the
   * given event type.
   *
   * Note: This array can be potentially sparse as subscriptions are deleted
   * from it when they are removed.
   *
   */
  getSubscriptionsForType(eventType: string): EventSubscription[];
}

declare class EventEmitter {
  /**
   *
   * @param subscriber - Optional subscriber instance
   *   to use. If omitted, a new subscriber will be created for the emitter.
   */
  constructor(subscriber?: EventSubscriptionVendor | null);

  /**
   * Adds a listener to be invoked when events of the specified type are
   * emitted. An optional calling context may be provided. The data arguments
   * emitted will be passed to the listener function.
   *
   * @param eventType - Name of the event to listen to
   * @param listener - Function to invoke when the specified event is
   *   emitted
   * @param context - Optional context object to use when invoking the
   *   listener
   */
  addListener(
    eventType: string,
    listener: (...args: any[]) => any,
    context?: any
  ): EmitterSubscription;

  /**
   * Removes all of the registered listeners, including those registered as
   * listener maps.
   *
   * @param eventType - Optional name of the event whose registered
   *   listeners to remove
   */
  removeAllListeners(eventType?: string): void;

  /**
   * Returns the number of listeners that are currently registered for the given
   * event.
   *
   * @param eventType - Name of the event to query
   */
  listenerCount(eventType: string): number;

  /**
   * Emits an event of the given type with the given data. All handlers of that
   * particular type will be notified.
   *
   * @param eventType - Name of the event to emit
   * @param Arbitrary arguments to be passed to each registered listener
   *
   * @example
   *   emitter.addListener('someEvent', function(message) {
   *     console.log(message);
   *   });
   *
   *   emitter.emit('someEvent', 'abc'); // logs 'abc'
   */
  emit(eventType: string, ...params: any[]): void;
}

/**
 * The React Native implementation of the IOS RCTEventEmitter which is required when creating
 * a module that communicates with IOS
 */
type NativeModule = {
  /**
   * Add the provided eventType as an active listener
   * @param eventType name of the event for which we are registering listener
   */
  addListener: (eventType: string) => void;

  /**
   * Remove a specified number of events.  There are no eventTypes in this case, as
   * the native side doesn't remove the name, but only manages a counter of total
   * listeners
   * @param count number of listeners to remove (of any type)
   */
  removeListeners: (count: number) => void;
};

/**
 * Abstract base class for implementing event-emitting modules. This implements
 * a subset of the standard EventEmitter node module API.
 */
export declare class NativeEventEmitter extends EventEmitter {
  /**
   * @param nativeModule the NativeModule implementation.  This is required on IOS and will throw
   *      an invariant error if undefined.
   */
  constructor(nativeModule?: NativeModule);

  /**
   * Add the specified listener, this call passes through to the NativeModule
   * addListener
   *
   * @param eventType name of the event for which we are registering listener
   * @param listener the listener function
   * @param context context of the listener
   */
  addListener(
    eventType: string,
    listener: (event: any) => void,
    context?: Object
  ): EmitterSubscription;

  /**
   * @param eventType  name of the event whose registered listeners to remove
   */
  removeAllListeners(eventType: string): void;

  /**
   * Removes a subscription created by the addListener, the EventSubscription#remove()
   * function actually calls through to this.
   */
  removeSubscription(subscription: EmitterSubscription): void;
}

/**
 * @see https://reactnative.dev/docs/platform-specific-code#content
 */
export type PlatformOSType =
  | "ios"
  | "android"
  | "macos"
  | "windows"
  | "web"
  | "native";



================================================
File: src/api/bluetooth/types/index.ts
================================================
/**
 * @hidden
 */
export type ActionOptions = {
  characteristicName: string;
  action: any;
};

/**
 * @hidden
 */
export type SubscribeOptions = {
  characteristicName: string;
  manageNotifications?: boolean;
  skipJSONDecoding?: boolean;
};

/**
 * @hidden
 */
export enum BLUETOOTH_CONNECTION {
  SCANNING = "scanning",
  CONNECTED = "connected",
  CONNECTING = "connecting",
  DISCONNECTING = "disconnecting",
  DISCONNECTED = "disconnected"
}

/**
 * @hidden
 */
export enum TRANSPORT_TYPE {
  WEB = "web",
  REACT_NATIVE = "reactNative"
}



================================================
File: src/api/bluetooth/utils/binaryBufferToEpoch.ts
================================================
import { pipe, from, Observable, UnaryFunction } from "rxjs";
import { mergeMap } from "rxjs/operators";
import { Buffer } from "buffer/index.js"; // not including /index.js causes typescript to uses Node's native Buffer built-in and we want to use this npm package for both node and the browser

import { epoch, addInfo } from "../../../utils/pipes";
import { Sample } from "../../../types/sample";
import { Epoch } from "../../../types/epoch";
import { DeviceInfo } from "../../../types/deviceInfo";

const EPOCH_BUFFER_SIZE = 16;
const SAMPLING_RATE_FALLBACK = 256; // Crown's sampling rate

/** Size in bytes for each channel's payload. */
const TimestampSize = 8; // UInt64
const MarkerSize = 2; // UInt16
const ChannelDataSize = 8; // Double
/** Size in bytes for the static payload of every sample (Timestamp + Marker) */
const SampleFixedSize = TimestampSize + MarkerSize;

/**
 * @hidden
 */
export function binaryBufferToEpoch(
  deviceInfo: DeviceInfo
): UnaryFunction<Observable<Epoch>, any> {
  if (!deviceInfo?.samplingRate) {
    console.warn(
      `Didn't receive a sampling rate, defaulting to ${SAMPLING_RATE_FALLBACK}`
    );
  }

  return pipe(
    binaryBufferToSamples(deviceInfo.channels),
    epoch({
      duration: EPOCH_BUFFER_SIZE,
      interval: EPOCH_BUFFER_SIZE,
      samplingRate: deviceInfo?.samplingRate ?? SAMPLING_RATE_FALLBACK
    }),
    addInfo({
      channelNames: deviceInfo.channelNames,
      samplingRate: deviceInfo.samplingRate
    })
  );
}

/**
 * @hidden
 */
export function binaryBufferToSamples(
  channelCount: number
): UnaryFunction<any, any> {
  return pipe(
    mergeMap((arrayBuffer: Uint8Array): Observable<Sample> => {
      const buffer = Buffer.from(arrayBuffer);
      const decoded = decode(buffer, channelCount);
      return from(decoded); // `from` creates an Observable emission from each item (Sample) in the array
    })
  );
}

/**
 * @hidden
 *
 * Decode the supplied Buffer as a list of Sample.
 *
 * Supplied buffer's length must be multiple of
 * `encodedSampleSize(channelCount)`.
 *
 * NB: This method does not guarantee validity of decoded samples. When
 * supplied with a buffer of appropriate length, it will always return a
 * matching number of Sample8. Since the encoding protocol defines no
 * metadata/checksum, correctness must be guaranteed via test coverage.
 *
 * @param buffer Buffer with binary payload to decode.
 * @param channelCount Number of expected channels in each sample.
 *
 * @returns List of decoded Samples present in buffer.
 */
export function decode(buffer: Buffer, channelCount: number): Array<Sample> {
  let sampleLen = encodedSampleSize(channelCount);
  // Alternative: relax this check, process sampleLen at a time, discard remainder?
  if (buffer.length % sampleLen != 0) {
    throw new Error(
      `buffer.length (${buffer.length}) for ${channelCount} channels must be multiple of ${sampleLen}B)`
    );
  }

  let sampleCount = buffer.length / sampleLen;
  let samples = new Array<Sample>(sampleCount);

  for (let i = 0; i < sampleCount; i++) {
    let offset = i * sampleLen;
    let channelData = new Array<number>(channelCount);
    // Read 8 bytes for timestamp & advance offset
    let ts = buffer.readBigUInt64BE(offset);
    offset += TimestampSize;
    // Read 1 byte for marker & advance offset
    let marker = buffer.readUInt16BE(offset);
    offset += MarkerSize;
    // Read 8 bytes for each channel & advance offset
    for (let i = 0; i < channelCount; i++) {
      channelData[i] = buffer.readDoubleBE(offset);
      offset += ChannelDataSize;
    }

    samples[i] = {
      timestamp: Number(ts),
      // TODO: uncomment when ready
      // marker: marker,
      data: channelData
    };
  }

  return samples;
}

/**
 * @hidden
 *
 * Calculate the size of each sample based on the number of channels.
 *
 * Each sample has the following 3 segments:
 * - Timestamp: 8 bytes (UInt64); contains current time in millis since epoch)
 * - Marker: 2 bytes (UInt16); for classifier data
 * - Data: N * 8 bytes (Double), each entry representing data from a different
 *   electrode.
 *
 *  +-----------+--------+------------------+
 *  | timestamp | marker | data (e1 ... eN) |
 *  +-----------+--------+------------------+
 *
 * The number of entries for Data varies per hardware model. It can be assumed
 * to remain constant for the lifetime of the program.
 */
export function encodedSampleSize(channelCount: number): number {
  return SampleFixedSize + channelCount * ChannelDataSize;
}



================================================
File: src/api/bluetooth/utils/create6DigitPin.ts
================================================
// Creates a number of 6 digits and ensures the first digit will never be 0
export function create6DigitPin(): number {
  return Math.floor(100000 + Math.random() * 900000);
}



================================================
File: src/api/bluetooth/utils/csvBufferToEpoch.ts
================================================
import { pipe, from, Observable, UnaryFunction } from "rxjs";
import { mergeMap, map } from "rxjs/operators";

import { epoch, addInfo } from "../../../utils/pipes";
import { Sample, CSVSample } from "../../../types/sample";
import { Epoch } from "../../../types/epoch";
import { DeviceInfo } from "../../../types/deviceInfo";

const EPOCH_BUFFER_SIZE = 16;
const SAMPLING_RATE_FALLBACK = 256; // Crown's sampling rate

/**
 * @hidden
 */
export function csvBufferToEpoch(
  deviceInfo: DeviceInfo
): UnaryFunction<Observable<Epoch>, any> {
  if (!deviceInfo?.samplingRate) {
    console.warn(
      `Didn't receive a sampling rate, defaulting to ${SAMPLING_RATE_FALLBACK}`
    );
  }

  return pipe(
    csvBufferToSamples(),
    epoch({
      duration: EPOCH_BUFFER_SIZE,
      interval: EPOCH_BUFFER_SIZE,
      samplingRate: deviceInfo?.samplingRate ?? SAMPLING_RATE_FALLBACK
    }),
    addInfo({
      channelNames: deviceInfo.channelNames,
      samplingRate: deviceInfo.samplingRate
    })
  );
}

/**
 * @hidden
 */
export function csvBufferToSamples(): UnaryFunction<any, any> {
  return pipe(
    mergeMap((samples: CSVSample[]): Observable<CSVSample> => from(samples)),
    map(
      ([timestamp, marker, ...data]: CSVSample): Sample => ({
        timestamp,
        data
      })
    )
  );
}



================================================
File: src/api/bluetooth/utils/decodeJSONChunks.ts
================================================
import { map, pipe } from "rxjs";

import { stitchChunks } from "./stitch";
import { TextCodec } from "./textCodec";

/**
 * @hidden
 */
type Options = {
  textCodec: TextCodec;
  characteristicName: string;
  delimiter: string;
  addLog: (message: string) => void;
};

/**
 * @hidden
 */
export function decodeJSONChunks({
  textCodec,
  characteristicName,
  delimiter,
  addLog
}: Options) {
  return pipe(
    map((arrayBuffer: Uint8Array): string => {
      const decoded: string = textCodec.decode(arrayBuffer);

      addLog(
        `Received chunk with buffer size of ${arrayBuffer.byteLength} and decoded size ${decoded.length} for ${characteristicName} characteristic: \n${decoded}`
      );

      return decoded;
    }),
    stitchChunks({ delimiter }),
    map((payload: any) => {
      try {
        return JSON.parse(payload);
      } catch (error) {
        addLog(
          `Failed to parse JSON for ${characteristicName} characteristic. Falling back to unparsed string. ${
            error?.message ?? error
          }`
        );

        return payload;
      }
    })
  );
}



================================================
File: src/api/bluetooth/utils/osHasBluetoothSupport.ts
================================================
import semverGte from "semver/functions/gte";
import valid from "semver/functions/valid";

import { DeviceInfo, OSVersion } from "../../../types/deviceInfo";

export function osHasBluetoothSupport(
  selectedDevice: DeviceInfo,
  osVersion?: OSVersion
) {
  if (!selectedDevice) {
    return false;
  }

  // Only the Crown supports Bluetooth
  const isCrown = Number(selectedDevice.modelVersion) >= 3;
  if (!isCrown) {
    return false;
  }

  const isEmulator = !!selectedDevice?.emulator;
  if (isEmulator) {
    return false;
  }

  // `osVersion` is updated in real time,
  // unlike accessing via `selectedDevice.osVersion`
  return semverGte(osVersion ?? selectedDevice.osVersion, "16.0.0");
}



================================================
File: src/api/bluetooth/utils/stitch.ts
================================================
import { pipe } from "rxjs";
import { map, scan, filter } from "rxjs/operators";

type StitchChunkOptions = {
  delimiter: string;
};

export function stitchChunks({ delimiter }: StitchChunkOptions) {
  return pipe(
    scan(
      (
        [remainder]: [string, string],
        currentBuffer: string
      ): [string, string] => {
        const nextBuffer = remainder + currentBuffer;

        if (!nextBuffer.includes(delimiter)) {
          return [nextBuffer, ""];
        }

        if (nextBuffer.endsWith(delimiter)) {
          return ["", nextBuffer];
        }

        const remainderStart = nextBuffer.lastIndexOf(delimiter);
        const remainderIndex = remainderStart + delimiter.length;
        const nextPacket = nextBuffer.slice(0, remainderIndex);
        const nextRemainder = nextBuffer.slice(remainderIndex);

        return [nextRemainder, nextPacket];
      },
      ["", ""]
    ),
    map(([, nextPacket]: string[]): string =>
      nextPacket.slice(0, -delimiter.length)
    ),
    filter((nextPacket: string): boolean => !!nextPacket.length)
  );
}



================================================
File: src/api/bluetooth/utils/textCodec.ts
================================================
import { Buffer } from "buffer/index.js"; // not including /index.js causes typescript to uses Node's native Buffer built-in and we want to use this npm package for both node and the browser

import { TRANSPORT_TYPE } from "../types";

/**
 * @hidden
 * Uint8Array in Web | number[] in React Native
 */
export type BufferLike = Uint8Array | number[];

/**
 * @hidden
 */
export class TextCodec {
  transportType: TRANSPORT_TYPE;
  webEncoder: TextEncoder;
  webDecoder: TextDecoder;

  constructor(transportType: TRANSPORT_TYPE) {
    this.transportType = transportType;

    if (transportType === TRANSPORT_TYPE.WEB) {
      this.webEncoder = new TextEncoder();
      this.webDecoder = new TextDecoder("utf-8");
    }
  }

  encode(data: string): BufferLike {
    if (this.transportType === TRANSPORT_TYPE.WEB) {
      const encoded: Uint8Array = this.webEncoder.encode(data);
      return encoded;
    }

    if (this.transportType === TRANSPORT_TYPE.REACT_NATIVE) {
      // React Native BLE Manager expects a number[] instead of a Uint8Array
      const encoded: number[] = [...Buffer.from(data)];
      return encoded;
    }

    const encoded: Buffer = Buffer.from(data);
    return encoded;
  }

  decode(arrayBuffer: Uint8Array): string {
    if (this.transportType === TRANSPORT_TYPE.WEB) {
      const decoded: string = this.webDecoder.decode(arrayBuffer);
      return decoded;
    }

    // For React Native, and as a default
    const decoded: string = Buffer.from(arrayBuffer).toString("utf-8");
    return decoded;
  }
}



================================================
File: src/api/bluetooth/web/WebBluetoothTransport.ts
================================================
import { BLUETOOTH_PRIMARY_SERVICE_UUID_HEX } from "@neurosity/ipk";
import { BLUETOOTH_CHUNK_DELIMITER } from "@neurosity/ipk";
import { BLUETOOTH_DEVICE_NAME_PREFIXES } from "@neurosity/ipk";
import { BLUETOOTH_COMPANY_IDENTIFIER_HEX } from "@neurosity/ipk";
import { Observable, BehaviorSubject, ReplaySubject, identity } from "rxjs";
import { defer, merge, timer, fromEventPattern, NEVER } from "rxjs";
import { switchMap, map, filter, tap } from "rxjs/operators";
import { shareReplay, distinctUntilChanged } from "rxjs/operators";
import { take, share } from "rxjs/operators";

import { BluetoothTransport } from "../BluetoothTransport";
import { isWebBluetoothSupported } from "./isWebBluetoothSupported";
import { create6DigitPin } from "../utils/create6DigitPin";
import { TextCodec } from "../utils/textCodec";
import { ActionOptions, SubscribeOptions } from "../types";
import { TRANSPORT_TYPE, BLUETOOTH_CONNECTION } from "../types";
import { DEFAULT_ACTION_RESPONSE_TIMEOUT } from "../constants";
import { CHARACTERISTIC_UUIDS_TO_NAMES } from "../constants";
import { DeviceInfo } from "../../../types/deviceInfo";
import { decodeJSONChunks } from "../utils/decodeJSONChunks";

type Options = {
  autoConnect?: boolean;
};

const defaultOptions: Options = {
  autoConnect: true
};

export class WebBluetoothTransport implements BluetoothTransport {
  type: TRANSPORT_TYPE = TRANSPORT_TYPE.WEB;
  textCodec = new TextCodec(this.type);
  options: Options;
  device: BluetoothDevice;
  server: BluetoothRemoteGATTServer;
  service: BluetoothRemoteGATTService;
  characteristicsByName: {
    [name: string]: BluetoothRemoteGATTCharacteristic;
  } = {};

  connection$ = new BehaviorSubject<BLUETOOTH_CONNECTION>(
    BLUETOOTH_CONNECTION.DISCONNECTED
  );
  pendingActions$ = new BehaviorSubject<any[]>([]);
  logs$ = new ReplaySubject<string>(10);
  onDisconnected$: Observable<void> = this._onDisconnected().pipe(share());
  connectionStream$: Observable<BLUETOOTH_CONNECTION> = this.connection$
    .asObservable()
    .pipe(
      filter((connection) => !!connection),
      distinctUntilChanged(),
      shareReplay(1)
    );

  _isAutoConnectEnabled$ = new ReplaySubject<boolean>(1);

  constructor(options: Options = {}) {
    this.options = { ...defaultOptions, ...options };

    if (!isWebBluetoothSupported()) {
      const errorMessage = "Web Bluetooth is not supported";
      this.addLog(errorMessage);
      throw new Error(errorMessage);
    }

    this._isAutoConnectEnabled$.subscribe((autoConnect) => {
      this.addLog(`Auto connect: ${autoConnect ? "enabled" : "disabled"}`);
    });

    this._isAutoConnectEnabled$.next(this.options.autoConnect);

    this.connection$.asObservable().subscribe((connection) => {
      this.addLog(`connection status is ${connection}`);
    });

    this.onDisconnected$.subscribe(() => {
      this.connection$.next(BLUETOOTH_CONNECTION.DISCONNECTED);
    });
  }

  async _getPairedDevices(): Promise<BluetoothDevice[]> {
    return await navigator.bluetooth.getDevices();
  }

  _autoConnect(selectedDevice$: Observable<DeviceInfo>): Observable<void> {
    return this._isAutoConnectEnabled$.pipe(
      switchMap((isAutoConnectEnabled) =>
        isAutoConnectEnabled
          ? merge(
              selectedDevice$,
              this.onDisconnected$.pipe(switchMap(() => selectedDevice$))
            )
          : NEVER
      ),
      switchMap(async (selectedDevice) => {
        const { deviceNickname } = selectedDevice;

        if (this.isConnected()) {
          this.addLog(
            `Auto connect: ${deviceNickname} is already connected. Skipping auto connect.`
          );
          return;
        }

        const [devicesError, devices] = await this._getPairedDevices()
          .then((devices) => [null, devices])
          .catch((error) => [error, null]);

        if (devicesError) {
          throw new Error(
            `failed to get devices: ${devicesError?.message ?? devicesError}`
          );
        }

        this.addLog(
          `Auto connect: found ${devices.length} devices ${devices
            .map(({ name }) => name)
            .join(", ")}`
        );

        // @important - Using `findLast` instead of `find` because somehow the browser
        // is finding multiple peripherals with the same name
        const device = devices.findLast(
          (device: BluetoothDevice) => device.name === deviceNickname
        );

        if (!device) {
          throw new Error(
            `couldn't find selected device in the list of paired devices.`
          );
        }

        this.addLog(
          `Auto connect: ${deviceNickname} was detected and previously paired`
        );

        return device;
      }),
      tap(() => {
        this.connection$.next(BLUETOOTH_CONNECTION.SCANNING);
      }),
      switchMap((device: BluetoothDevice) => onAdvertisementReceived(device)),
      switchMap(async (advertisement) => {
        this.addLog(`Advertisement received for ${advertisement.device.name}`);
        return await this.getServerServiceAndCharacteristics(
          advertisement.device
        );
      })
    );
  }

  enableAutoConnect(autoConnect: boolean): void {
    this._isAutoConnectEnabled$.next(autoConnect);
  }

  addLog(log: string) {
    this.logs$.next(log);
  }

  isConnected() {
    const connection = this.connection$.getValue();
    return connection === BLUETOOTH_CONNECTION.CONNECTED;
  }

  connection(): Observable<BLUETOOTH_CONNECTION> {
    return this.connectionStream$;
  }

  async connect(deviceNickname?: string): Promise<void> {
    try {
      // requires user gesture
      const device: BluetoothDevice = await this.requestDevice(deviceNickname);

      await this.getServerServiceAndCharacteristics(device);
    } catch (error) {
      return Promise.reject(error);
    }
  }

  async requestDevice(deviceNickname?: string): Promise<BluetoothDevice> {
    try {
      this.addLog("Requesting Bluetooth Device...");

      const prefixes = BLUETOOTH_DEVICE_NAME_PREFIXES.map((namePrefix) => ({
        namePrefix
      }));

      // Ability to only show selectedDevice if provided
      const filters = deviceNickname
        ? [
            {
              name: deviceNickname
            }
          ]
        : prefixes;

      const device = await window.navigator.bluetooth.requestDevice({
        filters: [
          ...filters,
          {
            manufacturerData: [
              {
                companyIdentifier: BLUETOOTH_COMPANY_IDENTIFIER_HEX
              }
            ]
          }
        ],
        optionalServices: [BLUETOOTH_PRIMARY_SERVICE_UUID_HEX]
      });

      return device;
    } catch (error) {
      return Promise.reject(error);
    }
  }

  async getServerServiceAndCharacteristics(device: BluetoothDevice) {
    try {
      this.device = device;

      const isConnecting =
        this.connection$.getValue() === BLUETOOTH_CONNECTION.CONNECTING;
      if (!isConnecting) {
        this.connection$.next(BLUETOOTH_CONNECTION.CONNECTING);
      }

      this.server = await device.gatt.connect();

      this.addLog(`Getting service...`);
      this.service = await this.server.getPrimaryService(
        BLUETOOTH_PRIMARY_SERVICE_UUID_HEX
      );
      this.addLog(
        `Got service ${this.service.uuid}, getting characteristics...`
      );

      const characteristicsList = await this.service.getCharacteristics();

      this.addLog(`Got characteristics`);

      this.characteristicsByName = Object.fromEntries(
        characteristicsList.map((characteristic) => [
          CHARACTERISTIC_UUIDS_TO_NAMES[characteristic.uuid],
          characteristic
        ])
      );

      this.connection$.next(BLUETOOTH_CONNECTION.CONNECTED);
    } catch (error) {
      return Promise.reject(error);
    }
  }

  _onDisconnected(): Observable<any> {
    return this.connection$
      .asObservable()
      .pipe(
        switchMap((connection) =>
          connection === BLUETOOTH_CONNECTION.CONNECTED
            ? fromDOMEvent(this.device, "gattserverdisconnected")
            : NEVER
        )
      );
  }

  async disconnect(): Promise<void> {
    const isDeviceConnected = this?.device?.gatt?.connected;
    if (isDeviceConnected) {
      this.device.gatt.disconnect();
    }
  }

  /**
   *
   * Bluetooth GATT attributes, services, characteristics, etc. are invalidated
   * when a device disconnects. This means your code should always retrieve
   * (through getPrimaryService(s), getCharacteristic(s), etc.) these attributes
   * after reconnecting.
   */
  async getCharacteristicByName(
    characteristicName: string
  ): Promise<BluetoothRemoteGATTCharacteristic> {
    return this.characteristicsByName?.[characteristicName];
  }

  subscribeToCharacteristic({
    characteristicName,
    manageNotifications = true,
    skipJSONDecoding = false
  }: SubscribeOptions): Observable<any> {
    const data$ = defer(() =>
      this.getCharacteristicByName(characteristicName)
    ).pipe(
      switchMap(async (characteristic: BluetoothRemoteGATTCharacteristic) => {
        if (this.isConnected() && manageNotifications) {
          try {
            await characteristic.startNotifications();
            this.addLog(
              `Started notifications for ${characteristicName} characteristic`
            );
          } catch (error) {
            this.addLog(
              `Attemped to stop notifications for ${characteristicName} characteristic: ${
                error?.message ?? error
              }`
            );
          }
        }

        return characteristic;
      }),
      switchMap((characteristic: BluetoothRemoteGATTCharacteristic) => {
        return fromDOMEvent(
          characteristic,
          "characteristicvaluechanged",
          async () => {
            if (this.isConnected() && manageNotifications) {
              try {
                await characteristic.stopNotifications();
                this.addLog(
                  `Stopped notifications for ${characteristicName} characteristic`
                );
              } catch (error) {
                this.addLog(
                  `Attemped to stop notifications for ${characteristicName} characteristic: ${
                    error?.message ?? error
                  }`
                );
              }
            }
          }
        );
      }),
      map((event): Uint8Array => event.target.value.buffer)
    );

    return this.connection$.pipe(
      switchMap((connection) =>
        connection === BLUETOOTH_CONNECTION.CONNECTED
          ? data$.pipe(
              skipJSONDecoding
                ? identity // noop
                : decodeJSONChunks({
                    textCodec: this.textCodec,
                    characteristicName,
                    delimiter: BLUETOOTH_CHUNK_DELIMITER,
                    addLog: (message: string) => this.addLog(message)
                  })
            )
          : NEVER
      )
    );
  }

  async readCharacteristic(
    characteristicName: string,
    parse: boolean = false
  ): Promise<any> {
    try {
      this.addLog(`Reading characteristic: ${characteristicName}`);

      const characteristic: BluetoothRemoteGATTCharacteristic =
        await this.getCharacteristicByName(characteristicName);

      if (!characteristic) {
        this.addLog(`Did not fund ${characteristicName} characteristic`);

        return Promise.reject(
          `Did not find characteristic by the name: ${characteristicName}`
        );
      }

      const dataview: DataView = await characteristic.readValue();
      const arrayBuffer = dataview.buffer as Uint8Array;
      const decodedValue: string = this.textCodec.decode(arrayBuffer);
      const data = parse ? JSON.parse(decodedValue) : decodedValue;

      this.addLog(
        `Received read data from ${characteristicName} characteristic: \n${data}`
      );

      return data;
    } catch (error) {
      return Promise.reject(`Error reading characteristic: ${error.message}`);
    }
  }

  async writeCharacteristic(
    characteristicName: string,
    data: string
  ): Promise<void> {
    this.addLog(`Writing characteristic: ${characteristicName}`);

    const characteristic: BluetoothRemoteGATTCharacteristic =
      await this.getCharacteristicByName(characteristicName);

    if (!characteristic) {
      this.addLog(`Did not fund ${characteristicName} characteristic`);

      return Promise.reject(
        `Did not find characteristic by the name: ${characteristicName}`
      );
    }

    const encoded = this.textCodec.encode(data);

    await characteristic.writeValueWithResponse(encoded as Uint8Array);
  }

  _addPendingAction(actionId: number): void {
    const actions = this.pendingActions$.getValue();
    this.pendingActions$.next([...actions, actionId]);
  }

  _removePendingAction(actionId: number): void {
    const actions = this.pendingActions$.getValue();
    this.pendingActions$.next(
      actions.filter((id: number): boolean => id !== actionId)
    );
  }

  _autoToggleActionNotifications(): Observable<any> {
    let actionsCharacteristic: BluetoothRemoteGATTCharacteristic;
    let started: boolean = false;

    return this.connection$.asObservable().pipe(
      switchMap((connection) =>
        connection === BLUETOOTH_CONNECTION.CONNECTED
          ? defer(() => this.getCharacteristicByName("actions")).pipe(
              switchMap((characteristic: BluetoothRemoteGATTCharacteristic) => {
                actionsCharacteristic = characteristic;
                return this.pendingActions$;
              })
            )
          : NEVER
      ),
      tap(async (pendingActions: string[]) => {
        const hasPendingActions = !!pendingActions.length;

        if (hasPendingActions && !started) {
          started = true;
          try {
            await actionsCharacteristic.startNotifications();
            this.addLog(`Started notifications for [actions] characteristic`);
          } catch (error) {
            this.addLog(
              `Attemped to start notifications for [actions] characteristic: ${
                error?.message ?? error
              }`
            );
          }
        }

        if (!hasPendingActions && started) {
          started = false;
          try {
            await actionsCharacteristic.stopNotifications();
            this.addLog(`Stopped notifications for actions characteristic`);
          } catch (error) {
            this.addLog(
              `Attemped to stop notifications for [actions] characteristic: ${
                error?.message ?? error
              }`
            );
          }
        }
      })
    );
  }

  async dispatchAction({
    characteristicName,
    action
  }: ActionOptions): Promise<any> {
    const {
      responseRequired = false,
      responseTimeout = DEFAULT_ACTION_RESPONSE_TIMEOUT
    } = action;

    return new Promise(async (resolve, reject) => {
      const characteristic: BluetoothRemoteGATTCharacteristic | void =
        await this.getCharacteristicByName(characteristicName).catch(() => {
          reject(
            `Did not find characteristic by the name: ${characteristicName}`
          );
        });

      if (!characteristic) {
        return;
      }

      const actionId: number = create6DigitPin(); // use to later identify and filter response
      const payload = JSON.stringify({ actionId, ...action }); // add the response id to the action

      this.addLog(`Dispatched action with id ${actionId}`);

      if (responseRequired && responseTimeout) {
        this._addPendingAction(actionId);

        const timeout = timer(responseTimeout).subscribe(() => {
          this._removePendingAction(actionId);
          reject(
            `Action with id ${actionId} timed out after ${responseTimeout}ms`
          );
        });

        // listen for a response before writing
        this.subscribeToCharacteristic({
          characteristicName,
          manageNotifications: false
        })
          .pipe(
            filter((response: any) => response?.actionId === actionId),
            take(1)
          )
          .subscribe((response) => {
            timeout.unsubscribe();
            this._removePendingAction(actionId);
            resolve(response);
          });

        // register action by writing
        this.writeCharacteristic(characteristicName, payload).catch((error) => {
          this._removePendingAction(actionId);
          reject(error.message);
        });
      } else {
        this.writeCharacteristic(characteristicName, payload)
          .then(() => {
            resolve(null);
          })
          .catch((error) => {
            reject(error.message);
          });
      }
    });
  }
}

function fromDOMEvent(
  target: any,
  eventName: any,
  beforeRemove?: () => Promise<void>
): Observable<any> {
  return fromEventPattern(
    (addHandler) => {
      target.addEventListener(eventName, addHandler);
    },
    async (removeHandler) => {
      if (beforeRemove) {
        await beforeRemove();
      }

      target.removeEventListener(eventName, removeHandler);
    }
  );
}

function onAdvertisementReceived(
  device: BluetoothDevice | any
): Observable<BluetoothAdvertisingEvent> {
  return new Observable((subscriber) => {
    const abortController = new AbortController();
    const { signal } = abortController;

    const listener = device.addEventListener(
      "advertisementreceived",
      (advertisement: BluetoothAdvertisingEvent) => {
        abortController.abort();
        subscriber.next(advertisement);
        subscriber.complete();
      },
      {
        once: true
      }
    );

    try {
      device.watchAdvertisements({ signal });
    } catch (error) {
      subscriber.error(error);
    }

    return () => {
      abortController.abort();
      device.removeEventListener("advertisementreceived", listener);
    };
  });
}



================================================
File: src/api/bluetooth/web/isMaybeWebWorkerContext.ts
================================================
const self: any = this;

export const isMaybeWebWorkerContext = (): boolean => {
  return self && self?.document === undefined;
};



================================================
File: src/api/bluetooth/web/isWebBluetoothSupported.ts
================================================
import { isMaybeWebWorkerContext } from "./isMaybeWebWorkerContext";

export function isWebBluetoothSupported() {
  return (
    typeof window !== "undefined" &&
    window?.navigator?.bluetooth &&
    !isMaybeWebWorkerContext()
  );
}



================================================
File: src/api/firebase/FirebaseApp.ts
================================================
import firebase from "firebase/app";
import "firebase/database";
import "firebase/auth";
import "firebase/functions";
import "firebase/firestore";

import { config } from "./config";
import { SDKOptions } from "../../types/options";

export const SERVER_TIMESTAMP = firebase.database.ServerValue.TIMESTAMP;
export const __firebase = firebase;

/**
 * @hidden
 */
export class FirebaseApp {
  protected standalone: boolean;
  public app: firebase.app.App;

  constructor(options: SDKOptions) {
    this.app = this.getApp(options.deviceId);
    this.standalone = this.app.name === options.deviceId;

    if (options.emulator) {
      this.connectEmulators(options);
    }
  }

  private getApp(deviceId?: string) {
    const moduleApps = firebase.apps;
    const browserApps =
      typeof window !== "undefined" &&
      "firebase" in window &&
      "apps" in window.firebase
        ? window["firebase"]["apps"]
        : [];

    const neurosityApp = [...moduleApps, ...(browserApps as any[])].find(
      (app: any) =>
        app.name === "[DEFAULT]" &&
        app.options.databaseURL === config.databaseURL
    );

    if (neurosityApp) {
      return neurosityApp;
    }

    if (deviceId) {
      const neurosityAppName = deviceId;
      const neurosityApp = moduleApps.find(
        (app) => app.name === neurosityAppName
      );
      return neurosityApp
        ? neurosityApp
        : firebase.initializeApp(config, neurosityAppName);
    }

    return firebase.initializeApp(config);
  }

  connectEmulators(options: SDKOptions) {
    const {
      emulatorHost,
      emulatorAuthPort,
      emulatorDatabasePort,
      emulatorFunctionsPort,
      emulatorFirestorePort,
      emulatorOptions
    } = options;

    this.app.auth().useEmulator(`http://${emulatorHost}:${emulatorAuthPort}`);
    this.app
      .database()
      .useEmulator(emulatorHost, emulatorDatabasePort, emulatorOptions);
    this.app.functions().useEmulator(emulatorHost, emulatorFunctionsPort);
    this.app
      .firestore()
      .useEmulator(emulatorHost, emulatorFirestorePort, emulatorOptions);
  }

  goOnline() {
    this.app.database().goOnline();
  }

  goOffline() {
    this.app.database().goOffline();
  }

  public disconnect(): Promise<any> {
    if (this.standalone) {
      return this.app.delete();
    }
    return Promise.resolve();
  }
}



================================================
File: src/api/firebase/FirebaseDevice.ts
================================================
import firebase from "firebase/app";

import { FirebaseApp } from "./FirebaseApp";
import { createDeviceStore } from "./deviceStore";
import { SDKDependencies } from "../../types/options";

const SERVER_TIMESTAMP = firebase.database.ServerValue.TIMESTAMP;

type FirebaseDeviceOptions = {
  deviceId: string;
  firebaseApp: FirebaseApp;
  dependencies: SDKDependencies;
};

/**
 * @hidden
 */
export class FirebaseDevice {
  static serverType = "firebase";
  protected app: firebase.app.App;
  protected deviceStore;
  public deviceId: string;

  constructor({
    deviceId,
    firebaseApp,
    dependencies
  }: FirebaseDeviceOptions) {
    if (!deviceId) {
      throw new Error(`No Device ID provided.`);
    }

    this.deviceId = deviceId;
    this.app = firebaseApp.app;
    this.deviceStore = createDeviceStore(
      this.app,
      deviceId,
      dependencies.subscriptionManager
    );
  }

  public get timestamp(): any {
    return SERVER_TIMESTAMP;
  }

  public dispatchAction(action): Promise<any> {
    return this.deviceStore.dispatchAction(action);
  }

  public async getInfo(): Promise<any> {
    return await this.deviceStore.once("info");
  }

  public onNamespace(namespace: string, callback: Function): Function {
    return this.deviceStore.onNamespace(namespace, callback);
  }

  public async onceNamespace(namespace: string): Promise<any> {
    return await this.deviceStore.once(namespace);
  }

  public offNamespace(namespace: string, listener: Function): void {
    this.deviceStore.offNamespace(namespace, listener);
  }

  public async getTimesync(): Promise<number> {
    const response = await this.dispatchAction({
      command: "timesync",
      action: "get",
      responseRequired: true,
      responseTimeout: 250
    });
    return response.timestamp;
  }

  /**
   * Pushes metric for each subscriptions in path:
   * /devices/:deviceId/metrics/:metricName
   */
  public nextMetric(
    metricName: string,
    metricValue: { [label: string]: any }
  ): void {
    this.deviceStore.nextMetric(metricName, metricValue);
  }

  /**
   * Listens for metrics in path:
   * /devices/:deviceId/metrics/:metricName
   */
  public onMetric(subscription, callback): Function {
    return this.deviceStore.onMetric(subscription, callback);
  }

  /**
   * Creates a new and unique subscription in path:
   * /devices/:deviceId/subscriptions/:subscriptionId
   * E.g. /devices/device1/subscriptions/subscription3
   *
   * @param subscription
   * @returns subscriptionId
   */
  public subscribeToMetric(subscription) {
    const subscriptionId = this.deviceStore.subscribeToMetric({
      ...subscription,
      serverType: FirebaseDevice.serverType // @deprecated
    });
    return subscriptionId;
  }

  /**
   * Removes subscription in path:
   * /devices/:deviceId/subscriptions/:subscriptionId
   *
   * @param subscription
   */
  public unsubscribeFromMetric(subscription): void {
    this.deviceStore.unsubscribeFromMetric(subscription);
  }

  /**
   * Removes metric listener
   * /devices/:deviceId/metric
   * or
   * /devices/:deviceId/metric/label
   *
   * @param subscription
   * @param listener
   */
  public removeMetricListener(subscription, listener: Function): void {
    this.deviceStore.removeMetricListener(subscription, listener);
  }

  public async changeSettings(settings): Promise<void> {
    return this.deviceStore.update("settings", settings);
  }

  public async getSkill(bundleId): Promise<any> {
    return await this.deviceStore.lastOfChildValue(
      "skills",
      "bundleId",
      bundleId
    );
  }

  public async createBluetoothToken(): Promise<string> {
    const [error, token] = await this.app
      .functions()
      .httpsCallable("createBluetoothToken")({
        deviceId: this.deviceId
      })
      .then(({ data }) => [null, data?.token])
      .catch((error) => [error, null]);

    if (error) {
      return Promise.reject(error?.message ?? error);
    }

    if (!token) {
      return Promise.reject(`Failed to create Bluetooth token.`);
    }

    return token;
  }

  public disconnect() {
    this.deviceStore.disconnect();
  }
}



================================================
File: src/api/firebase/FirebaseUser.ts
================================================
import { Observable, fromEventPattern, from, EMPTY } from "rxjs";
import { map, switchMap } from "rxjs/operators";
import firebase from "firebase/app";
import { User } from "@firebase/auth-types";

import { FirebaseApp } from "./FirebaseApp";
import {
  Credentials,
  EmailAndPassword,
  CustomToken
} from "../../types/credentials";
import { UserDevices, UserClaims } from "../../types/user";
import { DeviceInfo } from "../../types/deviceInfo";
import { OAuthRemoveResponse } from "../../types/oauth";
import { Experiment } from "../../types/experiment";
import { TransferDeviceOptions } from "../../utils/transferDevice";

const SERVER_TIMESTAMP = firebase.database.ServerValue.TIMESTAMP;

/**
 * @hidden
 */
export type UserWithMetadata = User & {
  selectedDevice: DeviceInfo | null;
};

/**
 * @hidden
 */
export const credentialWithLink: Function =
  firebase.auth.EmailAuthProvider.credentialWithLink;

/**
 * @hidden
 */
export function createUser(...args) {
  return new (firebase as any).User(...args);
}

/**
 * @hidden
 */
export class FirebaseUser {
  public app: firebase.app.App;
  public user: User | null;

  constructor(firebaseApp: FirebaseApp) {
    this.app = firebaseApp.app;

    this.app.auth().onAuthStateChanged((user: User | null) => {
      this.user = user;
    });
  }

  public auth() {
    return this.app.auth();
  }

  async createAccount(credentials: EmailAndPassword) {
    const { email, password } = credentials;
    const [error, user] = await this.app
      .auth()
      .createUserWithEmailAndPassword(email, password)
      .then((user) => [null, user])
      .catch((error) => [error, null]);

    if (error) {
      return Promise.reject(error);
    }

    return user;
  }

  async deleteAccount() {
    const user = this.app.auth().currentUser;

    if (!user) {
      return Promise.reject(
        new Error(
          `You are trying to delete an account that is not authenticated. To delete an account, the account must have signed in recently.`
        )
      );
    }

    const [devicesError, devices] = await this.getDevices()
      .then((response) => [null, response])
      .catch((error) => [error, null]);

    if (devicesError) {
      return Promise.reject(devicesError);
    }

    if (devices.length) {
      const removeDeviceError = await Promise.all(
        devices.map((device) => this.removeDevice(device.deviceId))
      )
        .then(() => null)
        .catch((error) => error);

      if (removeDeviceError) {
        return Promise.reject(removeDeviceError);
      }
    }

    return user.delete();
  }

  onAuthStateChanged(): Observable<User | null> {
    return new Observable((subscriber) => {
      try {
        this.app.auth().onAuthStateChanged(
          (user: User | null) => {
            subscriber.next(user);
          },
          (error) => {
            subscriber.error(error);
          }
        );
      } catch (error) {
        subscriber.error(error);
      }
    });
  }

  onLogin(): Observable<User> {
    return new Observable((subscriber) => {
      const unsubscribe = this.app
        .auth()
        .onAuthStateChanged((user: User) => {
          if (!!user) {
            subscriber.next(user);
            subscriber.complete();
          }
        });
      return () => unsubscribe();
    });
  }

  login(credentials: Credentials) {
    if ("customToken" in credentials) {
      const { customToken } = credentials;
      return this.app.auth().signInWithCustomToken(customToken);
    }

    if ("idToken" in credentials && "providerId" in credentials) {
      const provider = new firebase.auth.OAuthProvider(
        credentials.providerId
      );
      const oAuthCredential = provider.credential(credentials.idToken);
      return this.app.auth().signInWithCredential(oAuthCredential);
    }

    if ("email" in credentials && "password" in credentials) {
      const { email, password } = credentials;
      return this.app
        .auth()
        .signInWithEmailAndPassword(email, password);
    }

    throw new Error(
      `Either {email,password}, {customToken}, or {idToken,providerId} is required`
    );
  }

  logout() {
    return this.app.auth().signOut();
  }

  public async createCustomToken(): Promise<CustomToken> {
    const [error, customToken] = await this.app
      .functions()
      .httpsCallable("createCustomToken")()
      .then(({ data }) => [null, data])
      .catch((error) => [error, null]);

    if (error) {
      return Promise.reject(error);
    }

    return customToken;
  }

  public async removeOAuthAccess(): Promise<OAuthRemoveResponse> {
    const userId = this.user?.uid;

    if (!userId) {
      return Promise.reject(
        `OAuth access can only be removed while logged in via OAuth.`
      );
    }

    const [error, response] = await this.app
      .functions()
      .httpsCallable("removeAccessOAuthApp")()
      .then(({ data }) => [null, data])
      .catch((error) => [error, null]);

    if (error) {
      return Promise.reject(error);
    }

    const logoutError = await this.logout()
      .then(() => false)
      .catch((error) => error);

    if (logoutError) {
      return Promise.reject(logoutError);
    }

    return response;
  }

  async getDevices() {
    const userId = this.user?.uid;

    if (!userId) {
      return Promise.reject(`Please login.`);
    }

    const snapshot = await this.app
      .database()
      .ref(this.getUserDevicesPath())
      .once("value");

    const userDevices: UserDevices | null = snapshot.val();

    return this.userDevicesToDeviceInfoList(userDevices);
  }

  async addDevice(deviceId: string): Promise<void> {
    const userId = this.user?.uid;

    if (!userId) {
      return Promise.reject(`Please login.`);
    }

    const devices = await this.getDevices().catch((error) => {
      console.log(error);
    });

    const deviceAlreadyInAccount =
      devices &&
      devices.length &&
      devices.map(({ deviceId }) => deviceId).includes(deviceId);

    if (deviceAlreadyInAccount) {
      return Promise.reject(
        `The device is already added to this account.`
      );
    }

    const [isValid, invalidErrorMessage] = await this.isDeviceIdValid(
      deviceId
    )
      .then((isValid) => [isValid])
      .catch((error) => [false, error]);

    if (!isValid) {
      return Promise.reject(invalidErrorMessage);
    }

    const claimedByPath = this.getDeviceClaimedByPath(deviceId);
    const userDevicePath = this.getUserClaimedDevicePath(deviceId);

    const [hasError, errorMessage] = await this.app
      .database()
      .ref()
      .update({
        [claimedByPath]: userId,
        [userDevicePath]: {
          claimedOn: SERVER_TIMESTAMP
        }
      })
      .then(() => [false])
      .catch((error) => [true, error]);

    if (hasError) {
      return Promise.reject(errorMessage);
    }
  }

  async removeDevice(deviceId: string): Promise<void> {
    const userId = this.user?.uid;

    if (!userId) {
      return Promise.reject(`Please login.`);
    }

    const claimedByPath = this.getDeviceClaimedByPath(deviceId);
    const userDevicePath = this.getUserClaimedDevicePath(deviceId);

    const claimedByRef = this.app.database().ref(claimedByPath);
    const userDeviceRef = this.app.database().ref(userDevicePath);

    const [hasError, errorMessage] = await Promise.all([
      claimedByRef.remove(),
      userDeviceRef.remove()
    ])
      .then(() => [false])
      .catch((error) => [true, error]);

    if (hasError) {
      return Promise.reject(errorMessage);
    }
  }

  public async transferDevice(
    options: TransferDeviceOptions
  ): Promise<void> {
    const userId = this.user?.uid;

    if (!userId) {
      return Promise.reject(
        new Error(`transferDevice: auth is required.`)
      );
    }

    if (
      !("recipientsEmail" in options) &&
      !("recipientsUserId" in options)
    ) {
      return Promise.reject(
        new Error(
          `transferDevice: either 'recipientsEmail' or 'recipientsUserId' key is required.`
        )
      );
    }

    if (!options?.deviceId) {
      return Promise.reject(
        new Error(`transferDevice: a deviceId is required.`)
      );
    }

    const [error, response] = await this.app
      .functions()
      .httpsCallable("transferDeviceOwnership")(options)
      .then(({ data }) => [null, data])
      .catch((error) => [error, null]);

    if (error) {
      return Promise.reject(error);
    }
  }

  async isDeviceIdValid(deviceId: string): Promise<boolean> {
    // hex string of 32 characters
    const hexRegEx = /[0-9A-Fa-f]{32}/g;
    if (
      !deviceId ||
      deviceId.length !== 32 ||
      !hexRegEx.test(deviceId)
    ) {
      return Promise.reject("The device id is incorrectly formatted.");
    }

    const claimedByPath = this.getDeviceClaimedByPath(deviceId);
    const claimedByRef = this.app.database().ref(claimedByPath);

    const claimedBySnapshot = await claimedByRef
      .once("value")
      .catch(() => null);

    if (!claimedBySnapshot || claimedBySnapshot.exists()) {
      return Promise.reject("The device has already been claimed.");
    }

    return true;
  }

  onUserDevicesChange(): Observable<DeviceInfo[]> {
    return this.onAuthStateChanged().pipe(
      switchMap((user) => {
        if (!user) {
          return EMPTY;
        }

        const userDevicesPath = this.getUserDevicesPath();
        const userDevicesRef = this.app.database().ref(userDevicesPath);

        return fromEventPattern(
          (handler) => userDevicesRef.on("value", handler),
          (handler) => userDevicesRef.off("value", handler)
        ).pipe(
          map(([snapshot]: [firebase.database.DataSnapshot]) =>
            snapshot.val()
          ),
          switchMap((userDevices: UserDevices | null) => {
            return from(this.userDevicesToDeviceInfoList(userDevices));
          })
        );
      })
    );
  }

  onUserClaimsChange(): Observable<UserClaims> {
    return this.onAuthStateChanged().pipe(
      switchMap((user) => {
        if (!user) {
          return EMPTY;
        }

        const claimsUpdatedOnPath = this.getUserClaimsUpdatedOnPath();

        const claimsUpdatedOnRef = this.app
          .database()
          .ref(claimsUpdatedOnPath);

        return fromEventPattern(
          (handler) => claimsUpdatedOnRef.on("value", handler),
          (handler) => claimsUpdatedOnRef.off("value", handler)
        ).pipe(
          map(([snapshot]: [firebase.database.DataSnapshot]) =>
            snapshot.val()
          ),
          switchMap(() => {
            // Force refresh of auth id token
            return from(this.getIdToken(true)).pipe(
              switchMap(() => from(this.getClaims()))
            );
          })
        );
      })
    );
  }

  async getIdToken(forceRefresh = false): Promise<void> {
    const user = this.app.auth()?.currentUser;

    if (!user) {
      return Promise.reject(
        `getUserIdToken: unable to get currentUser`
      );
    }

    await user.getIdToken(forceRefresh).catch((error) => {
      console.error(error);
    });
  }

  getClaims(): Promise<UserClaims> {
    const user = this.app.auth()?.currentUser;

    if (!user) {
      return Promise.reject(`getUserClaims: unable to get currentUser`);
    }

    return user
      .getIdTokenResult()
      .then((token) => token.claims)
      .catch((error) => {
        console.error(error);
        return null;
      });
  }

  private async userDevicesToDeviceInfoList(
    userDevices: UserDevices | null
  ): Promise<DeviceInfo[]> {
    const devicesInfoSnapshots = Object.keys(userDevices ?? {}).map(
      (deviceId) =>
        this.app
          .database()
          .ref(this.getDeviceInfoPath(deviceId))
          .once("value")
    );

    const devicesList: DeviceInfo[] = await Promise.all(
      devicesInfoSnapshots
    ).then((snapshots) => snapshots.map((snapshot) => snapshot.val()));

    const validDevices = devicesList.filter((device) => !!device);

    validDevices.sort((a, b) => {
      return (
        userDevices[a.deviceId].claimedOn -
        userDevices[b.deviceId].claimedOn
      );
    });

    return validDevices;
  }

  public async hasDevicePermission(deviceId: string): Promise<boolean> {
    const deviceInfoPath = this.getDeviceInfoPath(deviceId);

    const hasPermission = await this.app
      .database()
      .ref(deviceInfoPath)
      .once("value")
      .then(() => true)
      .catch(() => false);

    return hasPermission;
  }

  private getDeviceClaimedByPath(deviceId: string): string {
    return `devices/${deviceId}/status/claimedBy`;
  }

  private getUserClaimedDevicePath(deviceId: string): string {
    const userId = this.user.uid;
    return `users/${userId}/devices/${deviceId}`;
  }

  private getUserDevicesPath(): string {
    const userId = this.user.uid;
    return `users/${userId}/devices`;
  }

  private getUserClaimsUpdatedOnPath(): string {
    const userId = this.user.uid;
    return `users/${userId}/claimsUpdatedOn`;
  }

  private getDeviceInfoPath(deviceId: string): string {
    return `devices/${deviceId}/info`;
  }

  onUserExperiments(): Observable<Experiment[]> {
    return this.onAuthStateChanged().pipe(
      switchMap((user) => {
        if (!user) {
          return EMPTY;
        }

        const userId = this.user.uid;

        const userExperimentsRef = this.app
          .database()
          .ref("experiments")
          .orderByChild("userId")
          .equalTo(userId)
          .limitToFirst(100);

        return fromEventPattern(
          (handler) => userExperimentsRef.on("value", handler),
          (handler) => userExperimentsRef.off("value", handler)
        ).pipe(
          map(([snapshot]: [firebase.database.DataSnapshot]) =>
            snapshot.val()
          ),
          // transform experiments map into sorted list
          map((experimentsMaps): Experiment[] => {
            return Object.entries(experimentsMaps ?? {})
              .map(([id, value]: any) => ({
                id: value?.id ?? id,
                ...value
              }))
              .sort(
                (a: any, b: any): any =>
                  new Date(b?.timestamp).getTime() -
                  new Date(a?.timestamp).getTime()
              );
          })
        );
      })
    );
  }

  async deleteUserExperiment(experimentId: string): Promise<void> {
    if (!experimentId) {
      return Promise.reject(
        `deleteUserExperiment: please provide an experiment id`
      );
    }

    const removeExperiment = (experimentId: string) => {
      return this.app
        .database()
        .ref("experiments")
        .child(experimentId)
        .remove();
    };

    const removeRelations = (experimentId: string) => {
      return this.app.functions().httpsCallable("removeRelations")({
        experimentId
      });
    };

    await Promise.all([
      removeExperiment(experimentId),
      removeRelations(experimentId)
    ]).catch(() => {});
  }
}



================================================
File: src/api/firebase/config.ts
================================================
export const config = {
  apiKey: "AIzaSyB0TkZ83Fj0CIzn8AAmE-Osc92s3ER8hy8",
  authDomain: "neurosity-device.firebaseapp.com",
  databaseURL: "https://neurosity-device.firebaseio.com",
  projectId: "neurosity-device",
  storageBucket: "neurosity-device.appspot.com",
  messagingSenderId: "212595049674"
};



================================================
File: src/api/firebase/deviceStore.ts
================================================
import firebase from "firebase/app";

const SERVER_TIMESTAMP = firebase.database.ServerValue.TIMESTAMP;

export interface IDevice {
  info: any;
  status: any;
  subscriptions: any;
  metrics: any;
}

/**
 * @hidden
 */
export const createDeviceStore = (
  app,
  deviceId,
  subscriptionManager
) => {
  const deviceRef = app.database().ref(`devices/${deviceId}`);
  const clientId = deviceRef.child("subscriptions").push().key;
  const clientRef = deviceRef.child(`clients/${clientId}`);
  let listenersToRemove = [];

  const set = (namespace, payload) => {
    return deviceRef.child(namespace).set(payload);
  };

  const push = (namespace, payload) => {
    return deviceRef.child(namespace).push(payload);
  };

  const update = (namespace, payload) => {
    return deviceRef.child(namespace).update(payload);
  };

  const on = (eventType: any = "value", namespace, callback) => {
    const listener = deviceRef
      .child(namespace)
      .on(eventType, (snapshot) => {
        callback(snapshot.val(), snapshot);
      });

    listenersToRemove.push(() => {
      deviceRef.child(namespace).off(eventType, listener);
    });

    return listener;
  };

  const off = (namespace, eventType, listener?) => {
    if (listener) {
      deviceRef.child(namespace).off(eventType, listener);
    } else {
      deviceRef.child(namespace).off(eventType);
    }
  };

  const once = async (namespace, eventType = "value") => {
    const snapshot = await deviceRef.child(namespace).once(eventType);
    return snapshot.val();
  };

  const remove = (namespace) => {
    deviceRef.child(namespace).remove();
  };

  const bindListener = (
    eventType: string,
    namespace: string,
    callback: (res: any) => void,
    overrideResponse?: any
  ) => {
    on(eventType, namespace, (data) => {
      if (data !== null) {
        off(namespace, eventType);
        const response = overrideResponse ? overrideResponse : data;
        callback(response);
      }
    });
  };

  const lastOfChildValue = async (namespace, key, value) => {
    const snapshot = await deviceRef
      .child(namespace)
      .orderByChild(key)
      .equalTo(value)
      .limitToLast(1)
      .once("value");
    const results = snapshot.val();
    const [match] = Object.values(results || {});
    return match || null;
  };

  // Add client connections and subscriptions to db and remove them when offline
  const connectedListener = app
    .database()
    .ref(".info/connected")
    .on("value", (snapshot) => {
      if (!snapshot.val()) {
        return;
      }

      clientRef
        .onDisconnect()
        .remove()
        .then(() => {
          clientRef.set(SERVER_TIMESTAMP);

          // NOTION-115: Re-subscribe when internet connection is lost and regained
          update("subscriptions", subscriptionManager.get()).then(
            () => {
              subscriptionManager.toList().forEach((subscription) => {
                const childPath = `subscriptions/${subscription.id}`;
                deviceRef.child(childPath).onDisconnect().remove();
              });
            }
          );
        });
    });

  listenersToRemove.push(() => {
    app
      .database()
      .ref(".info/connected")
      .off("value", connectedListener);
  });

  return {
    set,
    once,
    update,
    lastOfChildValue,
    onNamespace: (namespace: string, callback: Function): Function => {
      return on("value", namespace, (data: any) => {
        callback(data);
      });
    },
    offNamespace: (namespace: string, listener: Function): void => {
      off(namespace, "value", listener);
    },
    dispatchAction: async (action) => {
      const snapshot = await push("actions", action);
      const actionId = snapshot.key;
      const actionPath = `actions/${actionId}`;

      snapshot.onDisconnect().remove();

      if (action.responseRequired) {
        const responseTimeout = action.responseTimeout || 600000; // defaults to 10 minutes
        const timeout = new Promise((_, reject) => {
          const id = setTimeout(() => {
            clearTimeout(id);
            snapshot.remove();
            reject(
              `Action response timed out in ${responseTimeout}ms.`
            );
          }, responseTimeout);
        });

        const response = new Promise((resolve) => {
          bindListener("value", `${actionPath}/response`, resolve);
        });

        return Promise.race([response, timeout]);
      }

      return actionId;
    },
    nextMetric: async (
      metricName: string,
      metricValue: { [label: string]: any }
    ) => {
      set(`metrics/${metricName}`, metricValue);
    },
    onMetric: (subscription, callback: Function) => {
      const { atomic, metric, labels } = subscription;
      const child = atomic
        ? `metrics/${metric}`
        : `metrics/${metric}/${labels[0]}`;
      return on("value", child, (data) => {
        if (data !== null) {
          callback(data);
        }
      });
    },
    subscribeToMetric: (subscription) => {
      const id = deviceRef.child("subscriptions").push().key;
      const childPath = `subscriptions/${id}`;
      const subscriptionCreated = {
        id,
        clientId,
        ...subscription
      };
      set(childPath, subscriptionCreated);

      deviceRef.child(childPath).onDisconnect().remove();

      return subscriptionCreated;
    },
    unsubscribeFromMetric: (subscription) => {
      remove(`subscriptions/${subscription.id}`);
    },
    removeMetricListener(subscription, listener: Function) {
      const { atomic, metric, labels } = subscription;
      const child = atomic
        ? `metrics/${metric}`
        : `metrics/${metric}/${labels[0]}`;
      off(child, "value", listener);
    },
    disconnect() {
      clientRef.remove();
      listenersToRemove.forEach((removeListener) => {
        removeListener();
      });
      subscriptionManager
        .toList()
        .filter((subscription) => subscription.clientId === clientId)
        .forEach((subscription) => {
          const childPath = `subscriptions/${subscription.id}`;
          deviceRef.child(childPath).remove();
        });
    }
  };
};



================================================
File: src/api/firebase/index.ts
================================================
export * from "./FirebaseApp";
export * from "./FirebaseUser";
export * from "./FirebaseDevice";



================================================
File: src/api/https/config.ts
================================================
export const prodFunctionsBaseUrl =
  "https://us-central1-neurosity-device.cloudfunctions.net";



================================================
File: src/api/https/createOAuthURL.ts
================================================
import axios from "axios";

import { getFunctionsBaseURL } from "./utils";
import { SDKOptions } from "../../types/options";
import { OAuthConfig } from "../../types/oauth";

export function createOAuthURL(
  config: OAuthConfig,
  sdkOptions: SDKOptions
): Promise<string> {
  const {
    clientId,
    clientSecret,
    responseType,
    redirectUri,
    scope,
    state
  } = config;

  const baseUrl = getFunctionsBaseURL(sdkOptions);

  return axios
    .get(`${baseUrl}/authorize/entry`, {
      params: {
        client_id: clientId,
        ...(clientSecret ? { client_secret: clientSecret } : {}),
        response_type: responseType,
        redirect_uri: redirectUri,
        scope: scope.join(","),
        state: state,
        redirect: "false"
      }
    })
    .then((response) => `${baseUrl}${response.data.url}`);
}



================================================
File: src/api/https/getOAuthToken.ts
================================================
import axios from "axios";

import { getFunctionsBaseURL } from "./utils";
import { SDKOptions } from "../../types/options";
import { OAuthQuery, OAuthQueryResult } from "../../types/oauth";

export async function getOAuthToken(
  query: OAuthQuery,
  sdkOptions: SDKOptions
): Promise<OAuthQueryResult> {
  const baseUrl = getFunctionsBaseURL(sdkOptions);

  // Get refresh token
  const refreshResponse = await axios.post(
    `${baseUrl}/getOAuthRefreshToken`,
    query
  );

  const refreshToken = refreshResponse.data;

  return axios
    .post(`${baseUrl}/token`, {
      grant_type: "refresh_token",
      refresh_token: refreshToken.data,
      client_id: query.clientId,
      client_secret: query.clientSecret
    })
    .then((response) => JSON.parse(response.data)["access_token"]);
}



================================================
File: src/api/https/utils.ts
================================================
import { prodFunctionsBaseUrl } from "./config";
import { SDKOptions } from "../../types/options";

export function getFunctionsBaseURL(sdkOptions: SDKOptions) {
  if (!sdkOptions.emulator) {
    return prodFunctionsBaseUrl;
  }

  const { emulatorHost, emulatorFunctionsPort } = sdkOptions;
  const emulatorFunctionsBaseUrl = `http://${emulatorHost}:${emulatorFunctionsPort}/neurosity-device/us-central1`;

  return emulatorFunctionsBaseUrl;
}



================================================
File: src/subscriptions/SubscriptionManager.ts
================================================
import { Subscription, Subscriptions } from "../types/subscriptions";

/**
 * @hidden
 */
export class SubscriptionManager {
  private _subscriptions: Subscriptions = {};

  public get(): Subscriptions {
    return this._subscriptions;
  }

  public toList(): Subscription[] {
    return Object.values(this._subscriptions);
  }

  public add(subscription: Subscription): void {
    this._subscriptions[subscription.id] = subscription;
  }

  public remove(subscription: Subscription): void {
    if (!(subscription.id in this._subscriptions)) {
      return;
    }

    Reflect.deleteProperty(this._subscriptions, subscription.id);
  }
}



================================================
File: src/timesync/Timesync.ts
================================================
import { timer, pipe, range, Observable } from "rxjs";
import { map, concatWith, filter, take } from "rxjs/operators";
import { bufferCount, concatMap, switchMap } from "rxjs/operators";
import outliers from "outliers";

import { whileOnline } from "../utils/whileOnline";
import { DeviceStatus } from "../types/status";

type Options = {
  getTimesync: () => Promise<number>;
  status$: Observable<DeviceStatus>;
  bufferSize?: number;
  updateInterval?: number;
};

const defaultOptions = {
  bufferSize: 100,
  updateInterval: 1 * 60 * 1000 // every minute
};

export class Timesync {
  options: Options;
  _offset: number = 0;

  constructor(options: Options) {
    this.options = {
      ...defaultOptions,
      ...options
    };

    this.start();
  }

  public start(): void {
    const { bufferSize, updateInterval, status$ } = this.options;

    const burst$ = range(0, bufferSize);
    const timer$ = timer(updateInterval, updateInterval).pipe(
      map((i: number) => bufferSize + i),
      whileOnline({
        status$,
        allowWhileOnSleepMode: true
      })
    );

    const firstTimeDeviceIsOnline$ = status$.pipe(
      filter((status: DeviceStatus) => status.state === "online"),
      take(1)
    );

    firstTimeDeviceIsOnline$
      .pipe(
        switchMap(() => {
          return burst$.pipe(
            concatWith(timer$),
            this.toOffset(),
            bufferCount(bufferSize, 1),
            this.filterOutliers(),
            map((list: number[]) => this.average(list))
          );
        })
      )
      .subscribe((offset) => {
        this._offset = offset;
      });
  }

  filterOutliers() {
    return pipe(
      map((offsets: number[]): number[] => {
        return offsets.filter(outliers());
      })
    );
  }

  toOffset() {
    const { getTimesync } = this.options;
    return pipe(
      concatMap(async () => {
        const requestStartTime = Date.now();
        const [error, serverTime] = await getTimesync()
          .then((offset) => [null, offset])
          .catch((error) => [error]);

        if (error) {
          return 0;
        }

        const responseEndTime = Date.now();
        const oneWayDuration = (responseEndTime - requestStartTime) / 2;
        const offset = responseEndTime - oneWayDuration - serverTime;
        return offset;
      })
    );
  }

  private average(list: number[]): number {
    return Math.round(
      list.reduce((acc, number) => acc + number) / list.length
    );
  }

  public get offset(): number {
    return this._offset;
  }

  public get timestamp(): number {
    return Date.now() + this._offset;
  }
}



================================================
File: src/timesync/index.ts
================================================
export * from "./Timesync";



================================================
File: src/types/accelerometer.ts
================================================
export interface Accelerometer {
  timestamp: number;
  acceleration: number;
  inclination: number;
  orientation: number;
  pitch: number;
  roll: number;
  x: number;
  y: number;
  z: number;
}



================================================
File: src/types/actions.ts
================================================
/**
 * @hidden
 */
export interface Action {
  command: string;
  action: string;
  message?: any;
  responseRequired?: boolean;
  responseTimeout?: number;
}

/**
 * @hidden
 */
export interface Actions {
  dispatch(action: Action): Promise<any>;
}



================================================
File: src/types/awareness.ts
================================================
export type AwarenessLabels = "calm" | "focus";



================================================
File: src/types/brainwaves.ts
================================================
export type BrainwavesLabel = "raw" | "rawUnfiltered" | "powerByBand" | "psd";

export type AmplitudeByChannel = number[][];

export interface BaseInfo {
  samplingRate: number;
  startTime: number;
  channelNames: string[];
}

export interface EpochInfo extends BaseInfo {
  notchFrequency?: string;
}

export interface Epoch {
  data: AmplitudeByChannel;
  info: EpochInfo;
}

export interface RawUnfilteredEpochInfo extends BaseInfo {}

export interface RawUnfilteredEpoch {
  data: AmplitudeByChannel;
  info: RawUnfilteredEpochInfo;
}

export type PSDByChannel = number[][];

export interface PSDInfo extends BaseInfo {
  notchFrequency: string;
}

export interface PSD {
  label: "psd";
  psd: PSDByChannel;
  freqs: number[];
  info: PSDInfo;
}

export type BandName = "gamma" | "beta" | "alpha" | "theta" | "delta";

// PowerByBand includes an info object with sampling rate, start time, and channel names
// since this information is still relevant for frequency band analysis
export interface PowerByBand {
  gamma: number[];
  beta: number[];
  alpha: number[];
  theta: number[];
  delta: number[];
  info: BaseInfo;
}



================================================
File: src/types/calm.ts
================================================
export interface Calm {
  metric: "awareness";
  label: "calm";
  probability: number;
  timestamp: number;
}



================================================
File: src/types/client.ts
================================================
import { Observable } from "rxjs";
import { User } from "@firebase/auth-types";
import { Actions } from "./actions";
import { Metrics } from "./metrics";
import { SkillsClient } from "./skill";
import { Credentials } from "./credentials";
import { ChangeSettings } from "./settings";

/**
 * @hidden
 */
export interface Client {
  user: User | null;
  actions: Actions;
  disconnect(): Promise<any>;
  getInfo(): Promise<any>;
  login?(credentials: Credentials): Promise<any>;
  observeNamespace(namespace: string): Observable<any>;
  metrics: Metrics;
  skills: SkillsClient;
  timestamp: number;
  changeSettings(settings: ChangeSettings): Promise<void>;
}



================================================
File: src/types/credentials.ts
================================================
export type CustomToken = {
  customToken: string;
};

export type EmailAndPassword = {
  email: string;
  password: string;
};

export type OAuthCredentials = {
  idToken: string;
  providerId: string;
};

export type Credentials =
  | EmailAndPassword
  | OAuthCredentials
  | CustomToken;



================================================
File: src/types/deviceInfo.ts
================================================
export type OSVersion = string;

export interface DeviceInfo {
  deviceId: string;
  deviceNickname: string;
  channelNames: string[];
  channels: number;
  samplingRate: number;
  manufacturer: string;
  model: string;
  modelName: string;
  modelVersion: string;
  osVersion: OSVersion;
  apiVersion: string;
  emulator?: boolean;
}

type DeviceSelectorKeyValue = [string, string | number | string[]];
type DeviceSelectorFunction = (devices: DeviceInfo[]) => DeviceInfo;

export type DeviceSelector = DeviceSelectorKeyValue | DeviceSelectorFunction;



================================================
File: src/types/epoch.ts
================================================
import { Marker } from "./marker";

/**
 * @hidden
 */
export type Epoch = {
  data: number[];
  info?: {
    channelNames?: string[];
    samplingRate?: number;
    marker?: Marker[];
  };
};



================================================
File: src/types/experiment.ts
================================================
export type Experiment = {
  deviceId: string;
  id: string;
  labels: string[];
  name: string;
  timestamp: number;
  totalTrials: number;
  userId: string;
};



================================================
File: src/types/focus.ts
================================================
export interface Focus {
  metric: "awareness";
  label: "focus";
  probability: number;
  timestamp: number;
}



================================================
File: src/types/hapticEffects.ts
================================================
export type HapticEffects = {
  strongClick100: string;
  strongClick60: string;
  strongClick30: string;
  sharpClick100: string;
  sharpClick60: string;
  sharpClick30: string;
  softBump100: string;
  softBump60: string;
  softBump30: string;
  doubleClick100: string;
  doubleClick60: string;
  tripleClick100: string;
  softFuzz60: string;
  strongBuzz100: string;
  alert750ms: string;
  alert1000ms: string;
  strongClick1_100: string;
  strongClick2_80: string;
  strongClick3_60: string;
  strongClick4_30: string;
  mediumClick1_100: string;
  mediumClick2_80: string;
  mediumClick3_60: string;
  sharpTick1_100: string;
  sharpTick2_80: string;
  sharpTick3_60: string;
  shortDoubleClickStrong1_100: string;
  shortDoubleClickStrong2_80: string;
  shortDoubleClickStrong3_60: string;
  shortDoubleClickStrong4_30: string;
  shortDoubleClickMedium1_100: string;
  shortDoubleClickMedium2_80: string;
  shortDoubleClickMedium3_60: string;
  shortDoubleSharpTick1_100: string;
  shortDoubleSharpTick2_80: string;
  shortDoubleSharpTick3_60: string;
  longDoubleSharpClickStrong1_100: string;
  longDoubleSharpClickStrong2_80: string;
  longDoubleSharpClickStrong3_60: string;
  longDoubleSharpClickStrong4_30: string;
  longDoubleSharpClickMedium1_100: string;
  longDoubleSharpClickMedium2_80: string;
  longDoubleSharpClickMedium3_60: string;
  longDoubleSharpTick1_100: string;
  longDoubleSharpTick2_80: string;
  longDoubleSharpTick3_60: string;
  buzz1_100: string;
  buzz2_80: string;
  buzz3_60: string;
  buzz4_40: string;
  buzz5_20: string;
  pulsingStong1_100: string;
  pulsingStong2_60: string;
  pulsingMedium1_100: string;
  pulsingMedium2_60: string;
  pulsingSharp1_100: string;
  pulsingSharp2_60: string;
  transistionClick1_100: string;
  transistionClick2_80: string;
  transistionClick3_60: string;
  transistionClick4_40: string;
  transistionClick5_20: string;
  transistionClick6_10: string;
  transistionHum1_100: string;
  transistionHum2_80: string;
  transistionHum3_60: string;
  transistionHum4_40: string;
  transistionHum5_20: string;
  transistionHum6_10: string;
  transitionRampDownLongSmooth1_100_to_0: string;
  transitionRampDownLongSmooth2_100_to_0: string;
  transitionRampDownMediumSmooth1_100_to_0: string;
  transitionRampDownMediumSmooth2_100_to_0: string;
  transitionRampDownShortSmooth1_100_to_0: string;
  transitionRampDownShortSmooth2_100_to_0: string;
  transitionRampDownLongSharp1_100_to_0: string;
  transitionRampDownLongSharp2_100_to_0: string;
  transitionRampDownLongMedium1_100_to_0: string;
  transitionRampDownLongMedium2_100_to_0: string;
  transitionRampDownShortSharp1_100_to_0: string;
  transitionRampDownShortSharp2_100_to_0: string;
  transitionRampUpLongSmooth1_0_to_100: string;
  transitionRampUpLongSmooth2_0_to_100: string;
  transitionRampUpMediumSmooth1_0_to_100: string;
  transitionRampUpMediumSmooth2_0_to_100: string;
  transitionRampUpShortSmooth1_0_to_100: string;
  transitionRampUpShortSmooth2_0_to_100: string;
  transitionRampUpLongSharp1_0_to_100: string;
  transitionRampUpLongSharp2_0_to_100: string;
  transitionRampUpMediumSharp1_0_to_100: string;
  transitionRampUpMediumSharp2_0_to_100: string;
  transitionRampUpShortSharp1_0_to_100: string;
  transitionRampUpShortSharp2_0_to_100: string;
  transitionRampDownLongSmooth1_50_to_0: string;
  transitionRampDownLongSmooth2_50_to_0: string;
  transitionRampDownMediumSmooth1_50_to_0: string;
  transitionRampDownMediumSmooth2_50_to_0: string;
  transitionRampDownShortSmooth1_50_to_0: string;
  transitionRampDownShortSmooth2_50_to_0: string;
  transitionRampDownLongSharp1_50_to_0: string;
  transitionRampDownLongSharp2_50_to_0: string;
  transitionRampDownMediumSharp1_50_to_0: string;
  transitionRampDownMediumSharp2_50_to_0: string;
  transitionRampDownShortSharp1_50_to_0: string;
  transitionRampDownShortSharp2_50_to_0: string;
  transitionRampUpLongSmooth1_0_to_50: string;
  transitionRampUpLongSmooth2_0_to_50: string;
  transitionRampUpMediumSmooth1_0_to_50: string;
  transitionRampUpMediumSmooth2_0_to_50: string;
  transitionRampUpShortSmooth1_0_to_50: string;
  transitionRampUpShortSmooth2_0_to_50: string;
  transitionRampUpLongSharp1_0_to_50: string;
  transitionRampUpLongSharp2_0_to_50: string;
  transitionRampUpMediumSharp1_0_to_50: string;
  transitionRampUpMediumSharp2_0_to_50: string;
  transitionRampUpShortSharp1_0_to_50: string;
  transitionRampUpShortSharp2_0_to_50: string;
  longBuzzForProgrammaticStopping_100: string;
  smoothHum1_50: string;
  smoothHum2_40: string;
  smoothHum3_30: string;
  smoothHum4_20: string;
  smoothHum5_10: string;
};



================================================
File: src/types/kinesis.ts
================================================
export interface Kinesis {
  metric: "kinesis";
  label: string;
  probability: number;
  timestamp: number;
}



================================================
File: src/types/marker.ts
================================================
/**
 * @hidden
 */
export type Marker = {
  label: string;
  timestamp: number;
};



================================================
File: src/types/metrics.ts
================================================
import { PendingSubscription, Subscription } from "./subscriptions";

/**
 * @hidden
 */
type SubscriptionListener = Function;

/**
 * @hidden
 */
export type MetricValue = { [label: string]: any };

/**
 * @hidden
 */
export interface Metrics {
  next(metricName: string, metricValue: MetricValue): void;
  on(
    subscription: PendingSubscription,
    callback: Function
  ): SubscriptionListener;
  subscribe(subscription: PendingSubscription): Subscription;
  unsubscribe(
    subscription: Subscription,
    listener: SubscriptionListener
  ): void;
}



================================================
File: src/types/oauth.ts
================================================
export type OAuthConfig = {
  clientId: string;
  clientSecret?: string;
  responseType: "token" | "code";
  redirectUri: string;
  scope: string[];
  state: string;
};

export type OAuthQuery = {
  clientId: string;
  clientSecret: string;
  userId: string;
};

export type OAuthQueryResult = {
  customToken: string;
  userId: string;
};

export type OAuthRemoveResponse = {
  ok: boolean;
};



================================================
File: src/types/options.ts
================================================
import { Skill } from "./skill";
import { SubscriptionManager } from "../subscriptions/SubscriptionManager";
import { BluetoothTransport } from "../api/bluetooth/BluetoothClient";
import { STREAMING_MODE } from "./streaming";

export interface SDKOptions {
  deviceId?: string;
  autoSelectDevice?: boolean;
  timesync?: boolean;
  bluetoothTransport?: BluetoothTransport;
  streamingMode?: STREAMING_MODE;
  /**
   * @hidden
   */
  emulator?: boolean;
  /**
   * @hidden
   */
  emulatorHost?: string;
  /**
   * @hidden
   */
  emulatorAuthPort?: number;
  /**
   * @hidden
   */
  emulatorDatabasePort?: number;
  /**
   * @hidden
   */
  emulatorOptions?: {
    mockUserToken?: any;
  };
  /**
   * @hidden
   */
  emulatorFunctionsPort?: number;
  /**
   * @hidden
   */
  emulatorFirestorePort?: number;
  /**
   * @hidden
   */
  skill?: Skill;
}

/**
 * @hidden
 */
export interface SDKDependencies {
  subscriptionManager: SubscriptionManager;
}



================================================
File: src/types/sample.ts
================================================
import { Marker } from "./marker";

/**
 * @hidden
 */
export type Sample = {
  data: number[];
  timestamp: number;
  count?: number;
  marker?: Marker;
  info?: any;
};

/**
 * @hidden
 */
export type CSVSample = number[];



================================================
File: src/types/settings.ts
================================================
export interface Settings {
  lsl: boolean;
  supportAccess: boolean;
  activityLogging: boolean;
}

/**
 * @hidden
 */
export interface ChangeSettings {
  lsl?: boolean;
  supportAccess?: boolean;
  activityLogging?: boolean;
}



================================================
File: src/types/signalQuality.ts
================================================
type ChannelQuality = {
  standardDeviation: number;
  status: "great" | "good" | "bad" | "noContact";
};

/**
 * Channel names for the Crown are `CP3, C3, F5, PO3, PO4, F6, C4, and CP4`
 * These channels may change in future versions
 * {@link ChannelQuality}
 */
export interface SignalQuality {
  [channelName: string]: ChannelQuality;
}



================================================
File: src/types/skill.ts
================================================
import { Observable } from "rxjs";

/**
 * @hidden
 */
type SkillProps = { [key: string]: string | number | boolean };

/**
 * @hidden
 */
export interface Skill {
  id: string;
  bundleId: string;
  spec: string;
  name: string;
  description: string;
  props?: SkillProps;
  organization?: string;
  metrics: string[];
  userId: string;
  timestamp: number;
  status: string;
  thumbnail: string;
}

/**
 * @hidden
 */
export interface DeviceSkill {
  id: string;
  bundleId: string;
  installedDate: number;
  manifest: { [key: string]: any };
  status: string;
}

/**
 * @hidden
 */
type SkillMetric = { [key: string]: any };

/**
 * @hidden
 */
interface SkillMetricNext {
  next(value: SkillMetric): void;
}

/**
 * @hidden
 */
export interface SkillInstance {
  props?: SkillProps;
  metric(metric: string): Observable<SkillMetric> | SkillMetricNext;
}

/**
 * @hidden
 */
export interface SkillSubscription {
  unsubscribe(): void;
}

/**
 * @hidden
 */
export interface SkillsClient {
  get: (id: string) => Promise<DeviceSkill>;
}



================================================
File: src/types/status.ts
================================================
/**
 * @hidden
 */
export enum STATUS {
  ONLINE = "online",
  OFFLINE = "offline",
  UPDATING = "updating",
  BOOTING = "booting",
  SHUTTING_OFF = "shuttingOff"
}

/**
 * @hidden
 */
export enum SLEEP_MODE_REASON {
  UPDATING = "updating",
  CHARGING = "charging"
}

export interface DeviceStatus {
  battery: number;
  charging: boolean;
  state: STATUS;
  sleepMode: boolean;
  sleepModeReason: SLEEP_MODE_REASON | null;
  lastHeartbeat: number;
  ssid: string;
}



================================================
File: src/types/streaming.ts
================================================
/**
 * @hidden
 */
export enum STREAMING_TYPE {
  WIFI = "wifi",
  BLUETOOTH = "bluetooth"
}

export enum STREAMING_MODE {
  WIFI_ONLY = "wifi-only",
  WIFI_WITH_BLUETOOTH_FALLBACK = "wifi-with-bluetooth-fallback",
  BLUETOOTH_WITH_WIFI_FALLBACK = "bluetooth-with-wifi-fallback"
}



================================================
File: src/types/subscriptions.ts
================================================
/**
 * @hidden
 */
export interface PendingSubscription {
  metric: string;
  labels: string[];
  atomic: boolean;
  serverType?: string;
}

/**
 * @hidden
 */
export interface Subscription extends PendingSubscription {
  id: string;
  clientId: string;
  serverType: string;
}

/**
 * @hidden
 */
export interface Subscriptions {
  [id: string]: Subscription;
}



================================================
File: src/types/training.ts
================================================
/**
 * @hidden
 */
export interface TrainingRecording {
  experimentId: string;
  metric: string;
  label: string;
  fit?: boolean;
  baseline?: boolean;
  timestamp?: number;
}

/**
 * @hidden
 */
export interface Training {
  record(training: TrainingRecording): void;
  stop(training: TrainingRecording): void;
  stopAll(): void;
}



================================================
File: src/types/user.ts
================================================
export type UserDevice = {
  claimedOn: number;
};

export type UserDevices = {
  [deviceId: string]: UserDevice;
};

/**
 * @hidden
 */
export type UserClaims = {
  [claimName: string]: boolean | string;
};



================================================
File: src/utils/errors.ts
================================================
export const prefix = "Neurosity SDK: ";
export const mustSelectDevice = new Error(
  `${prefix}A device must be selected. Make sure to call "neurosity.selectDevice()"`
);

export const metricNotSupportedByModel = (
  metric: string,
  modelVersion: string
) => {
  return new Error(
    `${prefix}${metric} not supported on model version ${modelVersion}. See docs.neurosity.co for more info.`
  );
};

export const locationNotFound = (location: string, modelVersion: string) => {
  return new Error(
    `${prefix}${location} location not supported on model version ${modelVersion}. Check spelling or see docs.neurosity.co for more info.`
  );
};

export const exceededMaxItems = (maxItems: number) => {
  return new Error(`${prefix}Maximum items in array is ${maxItems}`);
};



================================================
File: src/utils/filterInternalKeys.ts
================================================
import { MonoTypeOperatorFunction, pipe } from "rxjs";
import { map } from "rxjs/operators";
import { DeviceStatus } from "../types/status";

export function filterInternalKeys(): MonoTypeOperatorFunction<DeviceStatus> {
  return pipe(
    map((status: DeviceStatus): DeviceStatus => {
      if (!status) {
        return status;
      }

      // remove internal properties that start with "__"
      const filteredStatus: any = Object.entries(status).reduce(
        (acc, [key, value]) => {
          if (!key.startsWith("__")) {
            acc[key] = value;
          }
          return acc;
        },
        {}
      );

      return filteredStatus;
    })
  );
}



================================================
File: src/utils/hapticEffects.ts
================================================
// All 127ish codes here:
/// https://cdn-learn.adafruit.com/downloads/pdf/adafruit-drv2605-haptic-controller-breakout.pdf
export const strongClick100 = "strongClick100";
export const strongClick60 = "strongClick60";
export const strongClick30 = "strongClick30";
export const sharpClick100 = "sharpClick100";
export const sharpClick60 = "sharpClick60";
export const sharpClick30 = "sharpClick30";
export const softBump100 = "softBump100";
export const softBump60 = "softBump60";
export const softBump30 = "softBump30";
export const doubleClick100 = "doubleClick100";
export const doubleClick60 = "doubleClick60";
export const tripleClick100 = "tripleClick100";
export const softFuzz60 = "softFuzz60";
export const strongBuzz100 = "strongBuzz100";
export const alert750ms = "alert750ms";
export const alert1000ms = "alert1000ms";
export const strongClick1_100 = "strongClick1_100";
export const strongClick2_80 = "strongClick2_80";
export const strongClick3_60 = "strongClick3_60";
export const strongClick4_30 = "strongClick4_30";
export const mediumClick1_100 = "mediumClick1_100";
export const mediumClick2_80 = "mediumClick2_80";
export const mediumClick3_60 = "mediumClick3_60";
export const sharpTick1_100 = "sharpTick1_100";
export const sharpTick2_80 = "sharpTick2_80";
export const sharpTick3_60 = "sharpTick3_60";
export const shortDoubleClickStrong1_100 =
  "shortDoubleClickStrong1_100";
export const shortDoubleClickStrong2_80 = "shortDoubleClickStrong2_80";
export const shortDoubleClickStrong3_60 = "shortDoubleClickStrong3_60";
export const shortDoubleClickStrong4_30 = "shortDoubleClickStrong4_30";
export const shortDoubleClickMedium1_100 =
  "shortDoubleClickMedium1_100";
export const shortDoubleClickMedium2_80 = "shortDoubleClickMedium2_80";
export const shortDoubleClickMedium3_60 = "shortDoubleClickMedium3_60";
export const shortDoubleSharpTick1_100 = "shortDoubleSharpTick1_100";
export const shortDoubleSharpTick2_80 = "shortDoubleSharpTick2_80";
export const shortDoubleSharpTick3_60 = "shortDoubleSharpTick3_60";
export const longDoubleSharpClickStrong1_100 =
  "longDoubleSharpClickStrong1_100";
export const longDoubleSharpClickStrong2_80 =
  "longDoubleSharpClickStrong2_80";
export const longDoubleSharpClickStrong3_60 =
  "longDoubleSharpClickStrong3_60";
export const longDoubleSharpClickStrong4_30 =
  "longDoubleSharpClickStrong4_30";
export const longDoubleSharpClickMedium1_100 =
  "longDoubleSharpClickMedium1_100";
export const longDoubleSharpClickMedium2_80 =
  "longDoubleSharpClickMedium2_80";
export const longDoubleSharpClickMedium3_60 =
  "longDoubleSharpClickMedium3_60";
export const longDoubleSharpTick1_100 = "longDoubleSharpTick1_100";
export const longDoubleSharpTick2_80 = "longDoubleSharpTick2_80";
export const longDoubleSharpTick3_60 = "longDoubleSharpTick3_60";
export const buzz1_100 = "buzz1_100";
export const buzz2_80 = "buzz2_80";
export const buzz3_60 = "buzz3_60";
export const buzz4_40 = "buzz4_40";
export const buzz5_20 = "buzz5_20";
export const pulsingStong1_100 = "pulsingStong1_100";
export const pulsingStong2_60 = "pulsingStong2_60";
export const pulsingMedium1_100 = "pulsingMedium1_100";
export const pulsingMedium2_60 = "pulsingMedium2_60";
export const pulsingSharp1_100 = "pulsingSharp1_100";
export const pulsingSharp2_60 = "pulsingSharp2_60";
export const transistionClick1_100 = "transistionClick1_100";
export const transistionClick2_80 = "transistionClick2_80";
export const transistionClick3_60 = "transistionClick3_60";
export const transistionClick4_40 = "transistionClick4_40";
export const transistionClick5_20 = "transistionClick5_20";
export const transistionClick6_10 = "transistionClick6_10";
export const transistionHum1_100 = "transistionHum1_100";
export const transistionHum2_80 = "transistionHum2_80";
export const transistionHum3_60 = "transistionHum3_60";
export const transistionHum4_40 = "transistionHum4_40";
export const transistionHum5_20 = "transistionHum5_20";
export const transistionHum6_10 = "transistionHum6_10";
export const transitionRampDownLongSmooth1_100_to_0 =
  "transitionRampDownLongSmooth1_100_to_0";
export const transitionRampDownLongSmooth2_100_to_0 =
  "transitionRampDownLongSmooth2_100_to_0";
export const transitionRampDownMediumSmooth1_100_to_0 =
  "transitionRampDownMediumSmooth1_100_to_0";
export const transitionRampDownMediumSmooth2_100_to_0 =
  "transitionRampDownMediumSmooth2_100_to_0";
export const transitionRampDownShortSmooth1_100_to_0 =
  "transitionRampDownShortSmooth1_100_to_0";
export const transitionRampDownShortSmooth2_100_to_0 =
  "transitionRampDownShortSmooth2_100_to_0";
export const transitionRampDownLongSharp1_100_to_0 =
  "transitionRampDownLongSharp1_100_to_0";
export const transitionRampDownLongSharp2_100_to_0 =
  "transitionRampDownLongSharp2_100_to_0";
export const transitionRampDownLongMedium1_100_to_0 =
  "transitionRampDownLongMedium1_100_to_0";
export const transitionRampDownLongMedium2_100_to_0 =
  "transitionRampDownLongMedium2_100_to_0";
export const transitionRampDownShortSharp1_100_to_0 =
  "transitionRampDownShortSharp1_100_to_0";
export const transitionRampDownShortSharp2_100_to_0 =
  "transitionRampDownShortSharp2_100_to_0";
export const transitionRampUpLongSmooth1_0_to_100 =
  "transitionRampUpLongSmooth1_0_to_100";
export const transitionRampUpLongSmooth2_0_to_100 =
  "transitionRampUpLongSmooth2_0_to_100";
export const transitionRampUpMediumSmooth1_0_to_100 =
  "transitionRampUpMediumSmooth1_0_to_100";
export const transitionRampUpMediumSmooth2_0_to_100 =
  "transitionRampUpMediumSmooth2_0_to_100";
export const transitionRampUpShortSmooth1_0_to_100 =
  "transitionRampUpShortSmooth1_0_to_100";
export const transitionRampUpShortSmooth2_0_to_100 =
  "transitionRampUpShortSmooth2_0_to_100";
export const transitionRampUpLongSharp1_0_to_100 =
  "transitionRampUpLongSharp1_0_to_100";
export const transitionRampUpLongSharp2_0_to_100 =
  "transitionRampUpLongSharp2_0_to_100";
export const transitionRampUpMediumSharp1_0_to_100 =
  "transitionRampUpMediumSharp1_0_to_100";
export const transitionRampUpMediumSharp2_0_to_100 =
  "transitionRampUpMediumSharp2_0_to_100";
export const transitionRampUpShortSharp1_0_to_100 =
  "transitionRampUpShortSharp1_0_to_100";
export const transitionRampUpShortSharp2_0_to_100 =
  "transitionRampUpShortSharp2_0_to_100";
export const transitionRampDownLongSmooth1_50_to_0 =
  "transitionRampDownLongSmooth1_50_to_0";
export const transitionRampDownLongSmooth2_50_to_0 =
  "transitionRampDownLongSmooth2_50_to_0";
export const transitionRampDownMediumSmooth1_50_to_0 =
  "transitionRampDownMediumSmooth1_50_to_0";
export const transitionRampDownMediumSmooth2_50_to_0 =
  "transitionRampDownMediumSmooth2_50_to_0";
export const transitionRampDownShortSmooth1_50_to_0 =
  "transitionRampDownShortSmooth1_50_to_0";
export const transitionRampDownShortSmooth2_50_to_0 =
  "transitionRampDownShortSmooth2_50_to_0";
export const transitionRampDownLongSharp1_50_to_0 =
  "transitionRampDownLongSharp1_50_to_0";
export const transitionRampDownLongSharp2_50_to_0 =
  "transitionRampDownLongSharp2_50_to_0";
export const transitionRampDownMediumSharp1_50_to_0 =
  "transitionRampDownMediumSharp1_50_to_0";
export const transitionRampDownMediumSharp2_50_to_0 =
  "transitionRampDownMediumSharp2_50_to_0";
export const transitionRampDownShortSharp1_50_to_0 =
  "transitionRampDownShortSharp1_50_to_0";
export const transitionRampDownShortSharp2_50_to_0 =
  "transitionRampDownShortSharp2_50_to_0";
export const transitionRampUpLongSmooth1_0_to_50 =
  "transitionRampUpLongSmooth1_0_to_50";
export const transitionRampUpLongSmooth2_0_to_50 =
  "transitionRampUpLongSmooth2_0_to_50";
export const transitionRampUpMediumSmooth1_0_to_50 =
  "transitionRampUpMediumSmooth1_0_to_50";
export const transitionRampUpMediumSmooth2_0_to_50 =
  "transitionRampUpMediumSmooth2_0_to_50";
export const transitionRampUpShortSmooth1_0_to_50 =
  "transitionRampUpShortSmooth1_0_to_50";
export const transitionRampUpShortSmooth2_0_to_50 =
  "transitionRampUpShortSmooth2_0_to_50";
export const transitionRampUpLongSharp1_0_to_50 =
  "transitionRampUpLongSharp1_0_to_50";
export const transitionRampUpLongSharp2_0_to_50 =
  "transitionRampUpLongSharp2_0_to_50";
export const transitionRampUpMediumSharp1_0_to_50 =
  "transitionRampUpMediumSharp1_0_to_50";
export const transitionRampUpMediumSharp2_0_to_50 =
  "transitionRampUpMediumSharp2_0_to_50";
export const transitionRampUpShortSharp1_0_to_50 =
  "transitionRampUpShortSharp1_0_to_50";
export const transitionRampUpShortSharp2_0_to_50 =
  "transitionRampUpShortSharp2_0_to_50";
export const longBuzzForProgrammaticStopping_100 =
  "longBuzzForProgrammaticStopping_100";
export const smoothHum1_50 = "smoothHum1_50";
export const smoothHum2_40 = "smoothHum2_40";
export const smoothHum3_30 = "smoothHum3_30";
export const smoothHum4_20 = "smoothHum4_20";
export const smoothHum5_10 = "smoothHum5_10";



================================================
File: src/utils/heartbeat.ts
================================================
import { combineLatest, Observable, timer } from "rxjs";
import { map, startWith, switchMap } from "rxjs/operators";
import { withLatestFrom, distinctUntilChanged } from "rxjs/operators";
import isEqual from "fast-deep-equal";

import { DeviceStatus, STATUS } from "../types/status";

const HEARTBEAT_UPDATE_INTERVAL = 30_000; // 30 seconds - set by the OS
const LOST_LOCAL_HEARTBEAT_AFTER = HEARTBEAT_UPDATE_INTERVAL * 2.5; // 75 seconds
const LOST_REMOTE_HEARTBEAT_AFTER = 8.64e7; // 24 hours

export function heartbeatAwareStatus(
  status$: Observable<DeviceStatus>
): Observable<DeviceStatus> {
  const lastLocalHeartbeat$: Observable<number> = status$.pipe(
    map(({ lastHeartbeat }) => lastHeartbeat),
    distinctUntilChanged(),
    map(() => Date.now())
  );

  const lostHeartbeat$: Observable<void> = lastLocalHeartbeat$.pipe(
    switchMap(() => timer(LOST_LOCAL_HEARTBEAT_AFTER)),
    map(() => null),
    startWith(null)
  );

  return combineLatest({
    status: status$,
    lostHeartbeat: lostHeartbeat$ // @important - do not remove, adeed for state synchronization, value not used
  }).pipe(
    withLatestFrom(lastLocalHeartbeat$),
    map(([{ status }, lastLocalHeartbeat]) => {
      if (!lastLocalHeartbeat) {
        return status;
      }

      const lostHeartbeat = deviceHasLostHeartbeat(status, lastLocalHeartbeat);

      return lostHeartbeat
        ? {
            ...status,
            state: STATUS.OFFLINE
          }
        : status;
    }),
    distinctUntilChanged((a, b) => isEqual(a, b))
  );
}

export function deviceHasLostHeartbeat(
  status: DeviceStatus,
  lastLocalHeartbeat: number
): boolean {
  if (!("lastHeartbeat" in status)) {
    return false;
  }

  // We are converting the heartbeat to the local time because the previous
  // implementation that used the server timestamp had bug where SDK clients
  // running on hardware with drifted/out-of-sync clocks (cough cough Android)
  // would override the state to offline when the heartbeat was active.
  const lostLocalHeartbeat =
    Date.now() - lastLocalHeartbeat > LOST_LOCAL_HEARTBEAT_AFTER;

  if (lostLocalHeartbeat) {
    return true;
  }

  // Addresses devices with wrongful "online" state. This rarely happens, the
  // OS would have to crash without updating the state to "offline".
  const lostRemoteHeartbeat =
    Date.now() - status.lastHeartbeat > LOST_REMOTE_HEARTBEAT_AFTER;
  if (lostRemoteHeartbeat) {
    return true;
  }

  return false;
}



================================================
File: src/utils/is-node.ts
================================================
export function isNode() {
  return (
    typeof process !== "undefined" &&
    process.versions != null &&
    process.versions.node != null
  );
}



================================================
File: src/utils/metrics.ts
================================================
import { Observable, throwError, EMPTY } from "rxjs";
import { switchMap } from "rxjs/operators";

import { whileOnline } from "./whileOnline";
import { validate } from "./subscription";
import { PendingSubscription, Subscription } from "../types/subscriptions";
import { DeviceInfo } from "../types/deviceInfo";

/**
 * @internal
 */
export function getCloudMetric(
  dependencies,
  subscription: PendingSubscription
): Observable<any> {
  const { options, cloudClient, onDeviceChange, status } = dependencies;

  const { metric, labels, atomic } = subscription;

  const metricError = validate(metric, labels, options);
  if (metricError) {
    return throwError(() => metricError);
  }

  const metric$ = new Observable((observer) => {
    const subscriptions: Subscription[] = atomic
      ? [
          cloudClient.metrics.subscribe({
            metric: metric,
            labels: labels,
            atomic: atomic
          })
        ]
      : labels.map((label) => {
          return cloudClient.metrics.subscribe({
            metric: metric,
            labels: [label],
            atomic: atomic
          });
        });

    const subscriptionWithListeners = subscriptions.map((subscription) => ({
      subscription,
      listener: cloudClient.metrics.on(subscription, (...data: any) => {
        observer.next(...data);
      })
    }));

    return () => {
      subscriptionWithListeners.forEach(({ subscription, listener }) => {
        cloudClient.metrics.unsubscribe(subscription, listener);
      });
    };
  });

  return onDeviceChange().pipe(
    switchMap((device: DeviceInfo) => {
      if (!device) {
        return EMPTY;
      }

      return metric$.pipe(
        whileOnline({
          status$: status(),
          allowWhileOnSleepMode: false
        })
      );
    })
  );
}



================================================
File: src/utils/oauth.ts
================================================
import * as errors from "../utils/errors";
import { Action } from "../types/actions";

type OAuthClaims = {
  oauth?: true;
  authId?: string;
  scopes?: string;
};

const scopeRequiredByAction = {
  "marker/add": "write:brainwave-markers",
  "brainwaves/record": "write:brainwaves",
  "haptics/queue": "write:haptics",
  "training/record": "write:kinesis",
  "training/stop": "write:kinesis",
  "training/stopAll": "write:kinesis",
  "wifi/reset": "write:wifi-settings"
};

const scopeRequiredByFunctionName = {
  //metrics
  accelerometer: "read:accelerometer",
  brainwaves: "read:brainwaves",
  calm: "read:calm",
  focus: "read:focus",
  kinesis: "read:kinesis",
  predictions: "read:kinesis",
  signalQuality: "read:signal-quality",
  // end of metrics
  // device info
  getInfo: "read:devices-info",
  getSelectedDevice: "read:devices-info",
  selectDevice: "read:devices-info",
  onDeviceChange: "read:devices-info",
  onUserDevicesChange: "read:devices-info",
  osVersion: "read:devices-info",
  // end device info
  settings: "read:devices-settings",
  changeSettings: "write:devices-settings",
  status: "read:devices-status",
  addDevice: "write:devices-add",
  removeDevice: "write:devices-remove",
  transferDevice: "write:devices-remove"
};

export function validateOAuthScopeForAction(
  userClaims: OAuthClaims,
  action: Action
): [boolean, Error | null] {
  const { oauth, scopes: scopesString } = userClaims ?? {};

  if (!oauth) {
    return [false, null];
  }

  const scopes = scopesString.split(",");

  const { command, action: actionName } = action;
  const requiredScope = scopeRequiredByAction[`${command}/${actionName}`];
  const hasRequireScopes = scopes.includes(requiredScope);

  if (hasRequireScopes) {
    return [false, null];
  }

  return [true, getScopeError(requiredScope)];
}

export function validateOAuthScopeForFunctionName(
  userClaims: OAuthClaims,
  functionName: string
): [boolean, Error | null] {
  const { oauth, scopes: scopesString } = userClaims ?? {};

  if (!oauth) {
    return [false, null];
  }

  const scopes = scopesString.split(",");

  const requiredScope = scopeRequiredByFunctionName[functionName];
  const hasRequireScopes = scopes.includes(requiredScope);

  if (hasRequireScopes) {
    return [false, null];
  }

  return [true, getScopeError(requiredScope)];
}

function getScopeError(...requiredScopes: string[]): Error {
  return new Error(
    `${
      errors.prefix
    }You are trying to access data with an OAuth token without access to the following scopes: ${requiredScopes.join(
      ", "
    )}.`
  );
}



================================================
File: src/utils/pick.ts
================================================
export const pick = (object, props) =>
  props.reduce(
    (acc, prop) => ({
      ...acc,
      ...(object.hasOwnProperty(prop) ? { [prop]: object[prop] } : {})
    }),
    {}
  );



================================================
File: src/utils/pipes.ts
================================================
import { pipe } from "rxjs";
import { bufferCount, scan, filter, map } from "rxjs/operators";

import { Sample } from "../types/sample";

const defaultDataProp = "data";
const defaultSamplingRate = 256;

const isObject = (object) =>
  object instanceof Object && object === Object(object);
const isFunction = (object) => typeof object === "function";

const patch = (sample: Sample) => (info: any) => ({
  ...sample,
  info: {
    ...(sample?.info ?? {}),
    ...(info || {})
  }
});

/**
 * Annotates stream with user-defined metadata
 * @method addInfo
 * @example eeg$.pipe(addinfo({ samplingRate: 256, channelNames: ["Af7", "Fp1", "Fp2", "Af8"] })
 * @param {Object} info Info to be added to the EEG stream. Relevant info may include: `samplingRate` and `channelNames`
 * @returns {Observable<Sample|Epoch|PSD>}
 */
export const addInfo = (infoValue: any) =>
  pipe(
    map((sample: any) => {
      if (
        !isObject(sample) ||
        (!isObject(infoValue) && !isFunction(infoValue))
      ) {
        return sample;
      }
      const info: any = isFunction(infoValue) ? infoValue(sample) : infoValue;
      return patch(sample)(info);
    })
  );

/**
 * Get a 2D data array organized by channel from an array of Samples. Credit to Ken from Seattle's elegant transposition
 * http://www.codesuck.com/2012/02/transpose-javascript-array-in-one-line.html
 * @method groupByChannel
 * @param {Array<Sample>} samplesBuffer Array of Samples to be grouped
 * @param {string} [dataProp] Name of the key associated with EEG data
 * @returns {Array<Array<number>>}
 */

const groupByChannel = (samplesBuffer, dataProp = defaultDataProp) =>
  samplesBuffer[0][dataProp].map((_, channelIndex) =>
    samplesBuffer.map((sample) => sample[dataProp][channelIndex])
  );

/**
 * Takes an array or RxJS buffer of EEG Samples and returns an Epoch.
 * @method bufferToEpoch
 * @example eeg$.pipe(bufferTime(1000), bufferToEpoch({ samplingRate: 256 }))
 *
 * @param {Object} options - Data structure options
 * @param {number} [options.samplingRate] Sampling rate
 * @param {string} [options.dataProp='data'] Name of the key associated with eeg data
 *
 * @returns {Observable<Epoch>}
 */
export const bufferToEpoch = ({
  samplingRate = defaultSamplingRate,
  dataProp = defaultDataProp
} = {}) =>
  pipe(
    map((samplesArray) => ({
      [dataProp]: groupByChannel(samplesArray, dataProp),
      info: {
        ...(samplesArray[0] && samplesArray[0].info
          ? samplesArray[0].info
          : {}),
        startTime: samplesArray[0].timestamp,
        samplingRate:
          samplesArray[0].info && samplesArray[0].info.samplingRate
            ? samplesArray[0].info.samplingRate
            : samplingRate
      }
    }))
  );

/**
 * Converts a stream of individual Samples of EEG data into a stream of Epochs of a given duration emitted at specified interval. This operator functions similarly to a circular buffer internally and allows overlapping Epochs of data to be emitted (e.g. emitting the last one second of data every 100ms).
 * @method epoch
 * @example eeg$.pipe(epoch({ duration: 1024, interval: 100, samplingRate: 256 }))
 * @param {Object} options - Epoching options
 * @param {number} [options.duration=256] Number of samples to include in each epoch
 * @param {number} [options.interval=100] Time (ms) between emitted Epochs
 * @param {number} [options.samplingRate=256] Sampling rate
 * @param {string} [options.dataProp='data'] Name of the key associated with eeg data
 * @returns {Observable} Epoch
 */
export const epoch = ({
  duration,
  interval,
  samplingRate,
  dataProp = defaultDataProp
}) =>
  pipe(
    bufferCount(interval),
    scan((acc, val) =>
      acc.concat(val).slice(acc.length < duration ? 0 : -duration)
    ),
    filter((samplesArray) => samplesArray.length === duration),
    bufferToEpoch({ samplingRate, dataProp })
  );



================================================
File: src/utils/platform.ts
================================================
export const MODEL_VERSION_1 = "1";
export const MODEL_VERSION_2 = "2";
export const MODEL_VERSION_3 = "3";

export const FEATURE_HAPTICS = "haptics";
export const FEATURE_ACCEL = "accel";

export const HAPTIC_P7 = "P7";
export const HAPTIC_P8 = "P8";

export const platformFeaturesByModelVersion = {
  [MODEL_VERSION_1]: [],
  [MODEL_VERSION_2]: [FEATURE_HAPTICS, FEATURE_ACCEL],
  [MODEL_VERSION_3]: [FEATURE_HAPTICS, FEATURE_ACCEL]
};

export const platformConfigByModelVersion = {
  [MODEL_VERSION_1]: {},
  [MODEL_VERSION_2]: {
    motorByMotorName: {
      [HAPTIC_P7]: [],
      [HAPTIC_P8]: []
    }
  },
  [MODEL_VERSION_3]: {
    motorByMotorName: {
      [HAPTIC_P7]: [],
      [HAPTIC_P8]: []
    }
  }
};

export const supportsHaptics = (modelVersion: string): boolean => {
  const platformFeaturesForModel =
    platformFeaturesByModelVersion[modelVersion];
  return platformFeaturesForModel.includes(FEATURE_HAPTICS);
};

export const supportsAccel = (modelVersion: string): boolean => {
  const platformFeaturesForModel =
    platformFeaturesByModelVersion[modelVersion];
  return platformFeaturesForModel.includes(FEATURE_ACCEL);
};

export const getPlatformHapticMotors = (modelVersion: string) => {
  const platformConfigForModel =
    platformConfigByModelVersion[modelVersion];
  const platformMotorByMotorName =
    platformConfigForModel?.motorByMotorName ?? {};
  return { ...platformMotorByMotorName };
};



================================================
File: src/utils/subscription.ts
================================================
import { metrics } from "@neurosity/ipk";

import * as errors from "../utils/errors";
import { SDKOptions } from "../types/options";

export const isMetric = (metric: string): boolean =>
  Object.keys(metrics).includes(metric);

export const getLabels = (metric: string): string[] =>
  Object.keys(metrics[metric]);

export const hasInvalidLabels = (metric: string, labels: string[]): boolean => {
  const validLabels = getLabels(metric);
  return !labels.every((label) => validLabels.includes(label));
};

export const isMetricDisallowed = (
  metricName: string,
  options: SDKOptions
): boolean =>
  "skill" in options &&
  "metrics" in options.skill &&
  !options.skill.metrics.includes(metricName);

export const validate = (
  metric: string,
  labels: string[],
  options: SDKOptions
): Error | false => {
  const validLabels = getLabels(metric).join(", ");

  if (!labels.length) {
    return new Error(
      `${errors.prefix}At least one label is required for ${metric} metric. Please add one of the following labels: ${validLabels}`
    );
  }

  if (isMetricDisallowed(metric, options)) {
    return new Error(
      `${errors.prefix}No permission to access the ${metric} metric. To access this metric, edit the skill's permissions`
    );
  }

  if (hasInvalidLabels(metric, labels)) {
    return new Error(
      `${errors.prefix}One ore more labels provided to ${metric} are invalid. The valid labels for ${metric} are ${validLabels}`
    );
  }

  return false;
};



================================================
File: src/utils/transferDevice.ts
================================================
export type TransferDeviceByEmail = {
  recipientsEmail: string;
  deviceId: string;
};

export type TransferDeviceByUserId = {
  recipientsUserId: string;
  deviceId: string;
};

export type TransferDeviceOptions =
  | TransferDeviceByEmail
  | TransferDeviceByUserId;



================================================
File: src/utils/whileOnline.ts
================================================
import { pipe, of, EMPTY, Observable } from "rxjs";
import { mergeMap, withLatestFrom } from "rxjs/operators";
import { DeviceStatus } from "../types/status";

type Options = {
  status$: Observable<DeviceStatus>;
  allowWhileOnSleepMode: boolean;
};

export function whileOnline({
  status$,
  allowWhileOnSleepMode
}: Options) {
  return pipe(
    withLatestFrom(status$),
    mergeMap(([value, status]: [any, DeviceStatus]) =>
      shouldAllowMetrics(status, allowWhileOnSleepMode)
        ? of(value)
        : EMPTY
    )
  );
}

function shouldAllowMetrics(
  status: DeviceStatus,
  allowWhileOnSleepMode: boolean
) {
  return (
    status.state === "online" &&
    (allowWhileOnSleepMode ? true : !status.sleepMode)
  );
}



================================================
File: website/docusaurus.config.js
================================================
module.exports = {
  title: "Neurosity SDK",
  tagline: "Empowering the Mind",
  url: "https://docs.neurosity.co",
  baseUrl: "/",
  organizationName: "neurosity",
  projectName: "neurosity-sdk-js",
  scripts: [
    "https://buttons.github.io/buttons.js",
    "https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js",
    "/js/code-block-buttons.js"
  ],
  stylesheets: ["/css/code-block-buttons.css"],
  favicon: "img/favicon.png",
  customFields: {
    repoUrl: "https://github.com/neurosity/neurosity-sdk-js",
    users: [
      {
        caption: "Neurosity SDK",
        image: "img/social-preview.jpg",
        infoLink: "https://github.com/neurosity/neurosity-sdk-js",
        pinned: true
      }
    ]
  },
  onBrokenLinks: "log",
  onBrokenMarkdownLinks: "log",
  presets: [
    [
      "@docusaurus/preset-classic",
      {
        docs: {
          showLastUpdateAuthor: true,
          showLastUpdateTime: true,
          path: "../docs",
          sidebarPath: "../website/sidebars.json"
        },
        theme: {
          customCss: "./src/css/customTheme.css"
        }
      }
    ]
  ],
  plugins: [],
  themeConfig: {
    colorMode: {
      defaultMode: "dark",
      disableSwitch: true,
      respectPrefersColorScheme: false
    },
    prism: {
      theme: require("prism-react-renderer/themes/nightOwl")
    },
    navbar: {
      title: "Neurosity SDK",
      logo: {
        src: "img/logo.png"
      },
      items: [
        {
          to: "docs/overview",
          label: "Docs",
          position: "left"
        },
        {
          to: "docs/reference/classes/neurosity",
          label: "Reference",
          position: "left"
        },
        {
          href: "https://github.com/neurosity/neurosity-sdk-js",
          label: "GitHub",
          position: "left"
        },
        {
          href: "https://neurosity.co/discord",
          label: "Need Help?",
          position: "left"
        }
      ]
    },
    image: "img/social-preview.jpg",
    footer: {
      links: [
        {
          title: "Docs",
          items: [
            {
              label: "Getting Started",
              to: "/docs/overview"
            },
            {
              label: "Guides",
              to: "/docs/guides/ethics"
            },
            {
              label: "Tutorials",
              to: "/docs/tutorials/your-first-web-app"
            },
            {
              label: "SDK Reference",
              to: "/docs/reference/classes/neurosity"
            }
          ]
        },
        {
          title: "Community",
          items: [
            {
              label: "Twitter",
              href: "https://twitter.com/neurosity"
            },
            {
              label: "Discord",
              href: "https://neurosity.co/discord"
            },
            {
              label: "Knowledge Base",
              href: "https://support.neurosity.co/hc/en-us"
            },
            {
              label: "Feedback Base",
              href: "https://feedback.neurosity.co/"
            }
          ]
        }
      ],
      copyright: `Copyright © ${new Date().getFullYear()} Neurosity, Inc`
    }
  }
};



================================================
File: website/package-lock.json
================================================
{
  "name": "website",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/preset-classic": "2.2.0",
        "clsx": "^1.1.1",
        "react": "^17.0.2",
        "react-dom": "^17.0.2"
      },
      "devDependencies": {}
    },
    "node_modules/@algolia/autocomplete-core": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/@algolia/autocomplete-core/-/autocomplete-core-1.7.2.tgz",
      "integrity": "sha512-eclwUDC6qfApNnEfu1uWcL/rudQsn59tjEoUYZYE2JSXZrHLRjBUGMxiCoknobU2Pva8ejb0eRxpIYDtVVqdsw==",
      "dependencies": {
        "@algolia/autocomplete-shared": "1.7.2"
      }
    },
    "node_modules/@algolia/autocomplete-preset-algolia": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/@algolia/autocomplete-preset-algolia/-/autocomplete-preset-algolia-1.7.2.tgz",
      "integrity": "sha512-+RYEG6B0QiGGfRb2G3MtPfyrl0dALF3cQNTWBzBX6p5o01vCCGTTinAm2UKG3tfc2CnOMAtnPLkzNZyJUpnVJw==",
      "dependencies": {
        "@algolia/autocomplete-shared": "1.7.2"
      },
      "peerDependencies": {
        "@algolia/client-search": ">= 4.9.1 < 6",
        "algoliasearch": ">= 4.9.1 < 6"
      }
    },
    "node_modules/@algolia/autocomplete-shared": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/@algolia/autocomplete-shared/-/autocomplete-shared-1.7.2.tgz",
      "integrity": "sha512-QCckjiC7xXHIUaIL3ektBtjJ0w7tTA3iqKcAE/Hjn1lZ5omp7i3Y4e09rAr9ZybqirL7AbxCLLq0Ra5DDPKeug=="
    },
    "node_modules/@algolia/cache-browser-local-storage": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/cache-browser-local-storage/-/cache-browser-local-storage-4.14.3.tgz",
      "integrity": "sha512-hWH1yCxgG3+R/xZIscmUrWAIBnmBFHH5j30fY/+aPkEZWt90wYILfAHIOZ1/Wxhho5SkPfwFmT7ooX2d9JeQBw==",
      "dependencies": {
        "@algolia/cache-common": "4.14.3"
      }
    },
    "node_modules/@algolia/cache-common": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/cache-common/-/cache-common-4.14.3.tgz",
      "integrity": "sha512-oZJofOoD9FQOwiGTzyRnmzvh3ZP8WVTNPBLH5xU5JNF7drDbRT0ocVT0h/xB2rPHYzOeXRrLaQQBwRT/CKom0Q=="
    },
    "node_modules/@algolia/cache-in-memory": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/cache-in-memory/-/cache-in-memory-4.14.3.tgz",
      "integrity": "sha512-ES0hHQnzWjeioLQf5Nq+x1AWdZJ50znNPSH3puB/Y4Xsg4Av1bvLmTJe7SY2uqONaeMTvL0OaVcoVtQgJVw0vg==",
      "dependencies": {
        "@algolia/cache-common": "4.14.3"
      }
    },
    "node_modules/@algolia/client-account": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/client-account/-/client-account-4.14.3.tgz",
      "integrity": "sha512-PBcPb0+f5Xbh5UfLZNx2Ow589OdP8WYjB4CnvupfYBrl9JyC1sdH4jcq/ri8osO/mCZYjZrQsKAPIqW/gQmizQ==",
      "dependencies": {
        "@algolia/client-common": "4.14.3",
        "@algolia/client-search": "4.14.3",
        "@algolia/transporter": "4.14.3"
      }
    },
    "node_modules/@algolia/client-analytics": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/client-analytics/-/client-analytics-4.14.3.tgz",
      "integrity": "sha512-eAwQq0Hb/aauv9NhCH5Dp3Nm29oFx28sayFN2fdOWemwSeJHIl7TmcsxVlRsO50fsD8CtPcDhtGeD3AIFLNvqw==",
      "dependencies": {
        "@algolia/client-common": "4.14.3",
        "@algolia/client-search": "4.14.3",
        "@algolia/requester-common": "4.14.3",
        "@algolia/transporter": "4.14.3"
      }
    },
    "node_modules/@algolia/client-common": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/client-common/-/client-common-4.14.3.tgz",
      "integrity": "sha512-jkPPDZdi63IK64Yg4WccdCsAP4pHxSkr4usplkUZM5C1l1oEpZXsy2c579LQ0rvwCs5JFmwfNG4ahOszidfWPw==",
      "dependencies": {
        "@algolia/requester-common": "4.14.3",
        "@algolia/transporter": "4.14.3"
      }
    },
    "node_modules/@algolia/client-personalization": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/client-personalization/-/client-personalization-4.14.3.tgz",
      "integrity": "sha512-UCX1MtkVNgaOL9f0e22x6tC9e2H3unZQlSUdnVaSKpZ+hdSChXGaRjp2UIT7pxmPqNCyv51F597KEX5WT60jNg==",
      "dependencies": {
        "@algolia/client-common": "4.14.3",
        "@algolia/requester-common": "4.14.3",
        "@algolia/transporter": "4.14.3"
      }
    },
    "node_modules/@algolia/client-search": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/client-search/-/client-search-4.14.3.tgz",
      "integrity": "sha512-I2U7xBx5OPFdPLA8AXKUPPxGY3HDxZ4r7+mlZ8ZpLbI8/ri6fnu6B4z3wcL7sgHhDYMwnAE8Xr0AB0h3Hnkp4A==",
      "dependencies": {
        "@algolia/client-common": "4.14.3",
        "@algolia/requester-common": "4.14.3",
        "@algolia/transporter": "4.14.3"
      }
    },
    "node_modules/@algolia/events": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@algolia/events/-/events-4.0.1.tgz",
      "integrity": "sha512-FQzvOCgoFXAbf5Y6mYozw2aj5KCJoA3m4heImceldzPSMbdyS4atVjJzXKMsfX3wnZTFYwkkt8/z8UesLHlSBQ=="
    },
    "node_modules/@algolia/logger-common": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/logger-common/-/logger-common-4.14.3.tgz",
      "integrity": "sha512-kUEAZaBt/J3RjYi8MEBT2QEexJR2kAE2mtLmezsmqMQZTV502TkHCxYzTwY2dE7OKcUTxi4OFlMuS4GId9CWPw=="
    },
    "node_modules/@algolia/logger-console": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/logger-console/-/logger-console-4.14.3.tgz",
      "integrity": "sha512-ZWqAlUITktiMN2EiFpQIFCJS10N96A++yrexqC2Z+3hgF/JcKrOxOdT4nSCQoEPvU4Ki9QKbpzbebRDemZt/hw==",
      "dependencies": {
        "@algolia/logger-common": "4.14.3"
      }
    },
    "node_modules/@algolia/requester-browser-xhr": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/requester-browser-xhr/-/requester-browser-xhr-4.14.3.tgz",
      "integrity": "sha512-AZeg2T08WLUPvDncl2XLX2O67W5wIO8MNaT7z5ii5LgBTuk/rU4CikTjCe2xsUleIZeFl++QrPAi4Bdxws6r/Q==",
      "dependencies": {
        "@algolia/requester-common": "4.14.3"
      }
    },
    "node_modules/@algolia/requester-common": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/requester-common/-/requester-common-4.14.3.tgz",
      "integrity": "sha512-RrRzqNyKFDP7IkTuV3XvYGF9cDPn9h6qEDl595lXva3YUk9YSS8+MGZnnkOMHvjkrSCKfoLeLbm/T4tmoIeclw=="
    },
    "node_modules/@algolia/requester-node-http": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/requester-node-http/-/requester-node-http-4.14.3.tgz",
      "integrity": "sha512-O5wnPxtDRPuW2U0EaOz9rMMWdlhwP0J0eSL1Z7TtXF8xnUeeUyNJrdhV5uy2CAp6RbhM1VuC3sOJcIR6Av+vbA==",
      "dependencies": {
        "@algolia/requester-common": "4.14.3"
      }
    },
    "node_modules/@algolia/transporter": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/@algolia/transporter/-/transporter-4.14.3.tgz",
      "integrity": "sha512-2qlKlKsnGJ008exFRb5RTeTOqhLZj0bkMCMVskxoqWejs2Q2QtWmsiH98hDfpw0fmnyhzHEt0Z7lqxBYp8bW2w==",
      "dependencies": {
        "@algolia/cache-common": "4.14.3",
        "@algolia/logger-common": "4.14.3",
        "@algolia/requester-common": "4.14.3"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.0.tgz",
      "integrity": "sha512-qRmjj8nj9qmLTQXXmaR1cck3UXSRMPrbsLJAasZpF+t3riI71BXed5ebIOYwQntykeZuhjsdweEc9BxH5Jc26w==",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.1.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.18.6.tgz",
      "integrity": "sha512-TDCmlK5eOvH+eH7cdAFlNXeVJqWIQ7gW9tY1GJIpUtFb6CmjVyq2VM3u71bOyR8CRihcCgMUYoDNyLXao3+70Q==",
      "dependencies": {
        "@babel/highlight": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.20.10",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.20.10.tgz",
      "integrity": "sha512-sEnuDPpOJR/fcafHMjpcpGN5M2jbUGUHwmuWKM/YdPzeEDJg8bgmbcWQFUfE32MQjti1koACvoPVsDe8Uq+idg==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.20.7.tgz",
      "integrity": "sha512-t1ZjCluspe5DW24bn2Rr1CDb2v9rn/hROtg9a2tmd0+QYf4bsloYfLQzjG4qHPNMhWtKdGC33R5AxGR2Af2cBw==",
      "dependencies": {
        "@ampproject/remapping": "^2.1.0",
        "@babel/code-frame": "^7.18.6",
        "@babel/generator": "^7.20.7",
        "@babel/helper-compilation-targets": "^7.20.7",
        "@babel/helper-module-transforms": "^7.20.7",
        "@babel/helpers": "^7.20.7",
        "@babel/parser": "^7.20.7",
        "@babel/template": "^7.20.7",
        "@babel/traverse": "^7.20.7",
        "@babel/types": "^7.20.7",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.1",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.20.7.tgz",
      "integrity": "sha512-7wqMOJq8doJMZmP4ApXTzLxSr7+oO2jroJURrVEp6XShrQUObV8Tq/D0NCcoYg2uHqUrjzO0zwBjoYzelxK+sw==",
      "dependencies": {
        "@babel/types": "^7.20.7",
        "@jridgewell/gen-mapping": "^0.3.2",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/generator/node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.2.tgz",
      "integrity": "sha512-mh65xKQAzI6iBcFzwv28KVWSmCkdRBWoOh+bYQGW3+6OZvbbN3TqMGo5hqYxQniRcH9F2VZIoJCm4pa3BPDK/A==",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.18.6.tgz",
      "integrity": "sha512-duORpUiYrEpzKIop6iNbjnwKLAKnJ47csTyRACyEmWj0QdUrm5aqNJGHSSEQSUAvNW0ojX0dOmK9dZduvkfeXA==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-builder-binary-assignment-operator-visitor": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-builder-binary-assignment-operator-visitor/-/helper-builder-binary-assignment-operator-visitor-7.18.9.tgz",
      "integrity": "sha512-yFQ0YCHoIqarl8BCRwBL8ulYUaZpz3bNsA7oFepAzee+8/+ImtADXNOmO5vJvsPff3qi+hvpkY/NYBTrBQgdNw==",
      "dependencies": {
        "@babel/helper-explode-assignable-expression": "^7.18.6",
        "@babel/types": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.20.7.tgz",
      "integrity": "sha512-4tGORmfQcrc+bvrjb5y3dG9Mx1IOZjsHqQVUz7XCNHO+iTmqxWnVg3KRygjGmpRLJGdQSKuvFinbIb0CnZwHAQ==",
      "dependencies": {
        "@babel/compat-data": "^7.20.5",
        "@babel/helper-validator-option": "^7.18.6",
        "browserslist": "^4.21.3",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.20.7.tgz",
      "integrity": "sha512-LtoWbDXOaidEf50hmdDqn9g8VEzsorMexoWMQdQODbvmqYmaF23pBP5VNPAGIFHsFQCIeKokDiz3CH5Y2jlY6w==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-function-name": "^7.19.0",
        "@babel/helper-member-expression-to-functions": "^7.20.7",
        "@babel/helper-optimise-call-expression": "^7.18.6",
        "@babel/helper-replace-supers": "^7.20.7",
        "@babel/helper-split-export-declaration": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.20.5.tgz",
      "integrity": "sha512-m68B1lkg3XDGX5yCvGO0kPx3v9WIYLnzjKfPcQiwntEQa5ZeRkPmo2X/ISJc8qxWGfwUr+kvZAeEzAwLec2r2w==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "regexpu-core": "^5.2.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.3.3.tgz",
      "integrity": "sha512-z5aQKU4IzbqCC1XH0nAqfsFLMVSo22SBKUc0BxGrLkolTdPTructy0ToNnlO2zA4j9Q/7pjMZf0DSY+DSTYzww==",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.17.7",
        "@babel/helper-plugin-utils": "^7.16.7",
        "debug": "^4.1.1",
        "lodash.debounce": "^4.0.8",
        "resolve": "^1.14.2",
        "semver": "^6.1.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0-0"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.9.tgz",
      "integrity": "sha512-3r/aACDJ3fhQ/EVgFy0hpj8oHyHpQc+LPtJoY9SzTThAsStm4Ptegq92vqKoE3vD706ZVFWITnMnxucw+S9Ipg==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-explode-assignable-expression": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-explode-assignable-expression/-/helper-explode-assignable-expression-7.18.6.tgz",
      "integrity": "sha512-eyAYAsQmB80jNfg4baAtLeWAQHfHFiR483rzFK+BhETlGZaQC9bsfrugfXDCbRHLQbIA7U5NxhhOxN7p/dWIcg==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.19.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.19.0.tgz",
      "integrity": "sha512-WAwHBINyrpqywkUH0nTnNgI5ina5TFn85HKS0pbPDfxFfhyR/aNQEn4hGi1P1JyT//I0t4OgXUlofzWILRvS5w==",
      "dependencies": {
        "@babel/template": "^7.18.10",
        "@babel/types": "^7.19.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.18.6.tgz",
      "integrity": "sha512-UlJQPkFqFULIcyW5sbzgbkxn2FKRgwWiRexcuaR8RNJRy8+LLveqPjwZV/bwrLZCN0eUHD/x8D0heK1ozuoo6Q==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.20.7.tgz",
      "integrity": "sha512-9J0CxJLq315fEdi4s7xK5TQaNYjZw+nDVpVqr1axNGKzdrdwYBD5b4uKv3n75aABG0rCCTK8Im8Ww7eYfMrZgw==",
      "dependencies": {
        "@babel/types": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.18.6.tgz",
      "integrity": "sha512-0NFvs3VkuSYbFi1x2Vd6tKrywq+z/cLeYC/RJNFrIX/30Bf5aiGYbtvGXolEktzJH8o5E5KJ3tT+nkxuuZFVlA==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.20.11",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.20.11.tgz",
      "integrity": "sha512-uRy78kN4psmji1s2QtbtcCSaj/LILFDp0f/ymhpQH5QY3nljUZCaNWz9X1dEj/8MBdBEFECs7yRhKn8i7NjZgg==",
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-module-imports": "^7.18.6",
        "@babel/helper-simple-access": "^7.20.2",
        "@babel/helper-split-export-declaration": "^7.18.6",
        "@babel/helper-validator-identifier": "^7.19.1",
        "@babel/template": "^7.20.7",
        "@babel/traverse": "^7.20.10",
        "@babel/types": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.18.6.tgz",
      "integrity": "sha512-HP59oD9/fEHQkdcbgFCnbmgH5vIQTJbxh2yf+CdM89/glUNnuzr87Q8GIjGEnOktTROemO0Pe0iPAYbqZuOUiA==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.20.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.20.2.tgz",
      "integrity": "sha512-8RvlJG2mj4huQ4pZ+rU9lqKi9ZKiRmuvGuM2HlWmkmgOhbs6zEAw6IEiJ5cQqGbDzGZOhwuOQNtZMi/ENLjZoQ==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-remap-async-to-generator": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.18.9.tgz",
      "integrity": "sha512-dI7q50YKd8BAv3VEfgg7PS7yD3Rtbi2J1XMXaalXO0W0164hYLnh8zpjRS0mte9MfVp/tltvr/cfdXPvJr1opA==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-wrap-function": "^7.18.9",
        "@babel/types": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.20.7.tgz",
      "integrity": "sha512-vujDMtB6LVfNW13jhlCrp48QNslK6JXi7lQG736HVbHz/mbf4Dc7tIRh1Xf5C0rF7BP8iiSxGMCmY6Ci1ven3A==",
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-member-expression-to-functions": "^7.20.7",
        "@babel/helper-optimise-call-expression": "^7.18.6",
        "@babel/template": "^7.20.7",
        "@babel/traverse": "^7.20.7",
        "@babel/types": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.20.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.20.2.tgz",
      "integrity": "sha512-+0woI/WPq59IrqDYbVGfshjT5Dmk/nnbdpcF8SnMhhXObpTq2KNBdLFRFrkVdbDOyUmHBCxzm5FHV1rACIkIbA==",
      "dependencies": {
        "@babel/types": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
      "version": "7.20.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.20.0.tgz",
      "integrity": "sha512-5y1JYeNKfvnT8sZcK9DVRtpTbGiomYIHviSP3OQWmDPU3DeH4a1ZlT/N2lyQ5P8egjcRaT/Y9aNqUxK0WsnIIg==",
      "dependencies": {
        "@babel/types": "^7.20.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.18.6.tgz",
      "integrity": "sha512-bde1etTx6ZyTmobl9LLMMQsaizFVZrquTEHOqKeQESMKo4PlObf+8+JA25ZsIpZhT/WEd39+vOdLXAFG/nELpA==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.19.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.19.4.tgz",
      "integrity": "sha512-nHtDoQcuqFmwYNYPz3Rah5ph2p8PFeFCsZk9A/48dPc/rGocJ5J3hAAZ7pb76VWX3fZKu+uEr/FhH5jLx7umrw==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.19.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.19.1.tgz",
      "integrity": "sha512-awrNfaMtnHUr653GgGEs++LlAvW6w+DcPrOliSMXWCKo597CwL5Acf/wWdNkf/tfEQE3mjkeD1YOVZOUV/od1w==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.18.6.tgz",
      "integrity": "sha512-XO7gESt5ouv/LRJdrVjkShckw6STTaB7l9BrpBaAHDeF5YZT+01PCwmR0SJHnkW6i8OwW/EVWRShfi4j2x+KQw==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-wrap-function": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.20.5.tgz",
      "integrity": "sha512-bYMxIWK5mh+TgXGVqAtnu5Yn1un+v8DDZtqyzKRLUzrh70Eal2O3aZ7aPYiMADO4uKlkzOiRiZ6GX5q3qxvW9Q==",
      "dependencies": {
        "@babel/helper-function-name": "^7.19.0",
        "@babel/template": "^7.18.10",
        "@babel/traverse": "^7.20.5",
        "@babel/types": "^7.20.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.20.7.tgz",
      "integrity": "sha512-PBPjs5BppzsGaxHQCDKnZ6Gd9s6xl8bBCluz3vEInLGRJmnZan4F6BYCeqtyXqkk4W5IlPmjK4JlOuZkpJ3xZA==",
      "dependencies": {
        "@babel/template": "^7.20.7",
        "@babel/traverse": "^7.20.7",
        "@babel/types": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.18.6.tgz",
      "integrity": "sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.18.6",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/@babel/highlight/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.20.7.tgz",
      "integrity": "sha512-T3Z9oHybU+0vZlY9CiDSJQTD5ZapcW18ZctFMi0MOAl/4BjFF4ul7NVSARLdbGO5vDqy9eQiGTV0LtKfvCYvcg==",
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.18.6.tgz",
      "integrity": "sha512-Dgxsyg54Fx1d4Nge8UnvTrED63vrwOdPmyvPzlNN/boaliRP54pm3pGzZD1SJUwrBA+Cs/xdG8kXX6Mn/RfISQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.20.7.tgz",
      "integrity": "sha512-sbr9+wNE5aXMBBFBICk01tt7sBf2Oc9ikRFEcem/ZORup9IMUdNhW7/wVLEbbtlWOsEubJet46mHAL2C8+2jKQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.20.0",
        "@babel/plugin-proposal-optional-chaining": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.13.0"
      }
    },
    "node_modules/@babel/plugin-proposal-async-generator-functions": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-async-generator-functions/-/plugin-proposal-async-generator-functions-7.20.7.tgz",
      "integrity": "sha512-xMbiLsn/8RK7Wq7VeVytytS2L6qE69bXPB10YCmMdDZbKF4okCqY74pI/jJQ/8U0b/F6NrT2+14b8/P9/3AMGA==",
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-remap-async-to-generator": "^7.18.9",
        "@babel/plugin-syntax-async-generators": "^7.8.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-class-properties": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.18.6.tgz",
      "integrity": "sha512-cumfXOF0+nzZrrN8Rf0t7M+tF6sZc7vhQwYQck9q1/5w2OExlD+b4v4RpMJFaV1Z7WcDRgO6FqvxqxGlwo+RHQ==",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-class-static-block": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-class-static-block/-/plugin-proposal-class-static-block-7.20.7.tgz",
      "integrity": "sha512-AveGOoi9DAjUYYuUAG//Ig69GlazLnoyzMw68VCDux+c1tsnnH/OkYcpz/5xzMkEFC6UxjR5Gw1c+iY2wOGVeQ==",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.20.7",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-class-static-block": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.12.0"
      }
    },
    "node_modules/@babel/plugin-proposal-dynamic-import": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-dynamic-import/-/plugin-proposal-dynamic-import-7.18.6.tgz",
      "integrity": "sha512-1auuwmK+Rz13SJj36R+jqFPMJWyKEDd7lLSdOj4oJK0UTgGueSAtkrCvz9ewmgyU/P941Rv2fQwZJN8s6QruXw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-dynamic-import": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-export-namespace-from": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-export-namespace-from/-/plugin-proposal-export-namespace-from-7.18.9.tgz",
      "integrity": "sha512-k1NtHyOMvlDDFeb9G5PhUXuGj8m/wiwojgQVEhJ/fsVsMCpLyOP4h0uGEjYJKrRI+EVPlb5Jk+Gt9P97lOGwtA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.9",
        "@babel/plugin-syntax-export-namespace-from": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-json-strings": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-json-strings/-/plugin-proposal-json-strings-7.18.6.tgz",
      "integrity": "sha512-lr1peyn9kOdbYc0xr0OdHTZ5FMqS6Di+H0Fz2I/JwMzGmzJETNeOFq2pBySw6X/KFL5EWDjlJuMsUGRFb8fQgQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-json-strings": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-logical-assignment-operators": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-logical-assignment-operators/-/plugin-proposal-logical-assignment-operators-7.20.7.tgz",
      "integrity": "sha512-y7C7cZgpMIjWlKE5T7eJwp+tnRYM89HmRvWM5EQuB5BoHEONjmQ8lSNmBUwOyy/GFRsohJED51YBF79hE1djug==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-nullish-coalescing-operator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.18.6.tgz",
      "integrity": "sha512-wQxQzxYeJqHcfppzBDnm1yAY0jSRkUXR2z8RePZYrKwMKgMlE8+Z6LUno+bd6LvbGh8Gltvy74+9pIYkr+XkKA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-numeric-separator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-numeric-separator/-/plugin-proposal-numeric-separator-7.18.6.tgz",
      "integrity": "sha512-ozlZFogPqoLm8WBr5Z8UckIoE4YQ5KESVcNudyXOR8uqIkliTEgJ3RoketfG6pmzLdeZF0H/wjE9/cCEitBl7Q==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-object-rest-spread": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-object-rest-spread/-/plugin-proposal-object-rest-spread-7.20.7.tgz",
      "integrity": "sha512-d2S98yCiLxDVmBmE8UjGcfPvNEUbA1U5q5WxaWFUGRzJSVAZqm5W6MbPct0jxnegUZ0niLeNX+IOzEs7wYg9Dg==",
      "dependencies": {
        "@babel/compat-data": "^7.20.5",
        "@babel/helper-compilation-targets": "^7.20.7",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-transform-parameters": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-optional-catch-binding": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-optional-catch-binding/-/plugin-proposal-optional-catch-binding-7.18.6.tgz",
      "integrity": "sha512-Q40HEhs9DJQyaZfUjjn6vE8Cv4GmMHCYuMGIWUnlxH6400VGxOuwWsPt4FxXxJkC/5eOzgn0z21M9gMT4MOhbw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-optional-chaining": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.20.7.tgz",
      "integrity": "sha512-T+A7b1kfjtRM51ssoOfS1+wbyCVqorfyZhT99TvxxLMirPShD8CzKMRepMlCBGM5RpHMbn8s+5MMHnPstJH6mQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.20.0",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-methods": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.18.6.tgz",
      "integrity": "sha512-nutsvktDItsNn4rpGItSNV2sz1XwS+nfU0Rg8aCx3W3NOKVzdMjJRu0O5OkgDp3ZGICSTbgRpxZoWsxoKRvbeA==",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.20.5.tgz",
      "integrity": "sha512-Vq7b9dUA12ByzB4EjQTPo25sFhY+08pQDBSZRtUAkj7lb7jahaHR5igera16QZ+3my1nYR4dKsNdYj5IjPHilQ==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-create-class-features-plugin": "^7.20.5",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-unicode-property-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-unicode-property-regex/-/plugin-proposal-unicode-property-regex-7.18.6.tgz",
      "integrity": "sha512-2BShG/d5yoZyXZfVePH91urL5wTG6ASZU9M4o03lKK8u8UW1y08OMttBSOADTcJrnPMpvDXRG3G8fyLh4ovs8w==",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-dynamic-import": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-dynamic-import/-/plugin-syntax-dynamic-import-7.8.3.tgz",
      "integrity": "sha512-5gdGbFon+PszYzqs83S3E5mpi7/y/8M9eC90MRTZfduQOYW76ig6SOSPNe41IG5LoP3FGBn2N0RjVDSQiS94kQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-export-namespace-from": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-export-namespace-from/-/plugin-syntax-export-namespace-from-7.8.3.tgz",
      "integrity": "sha512-MXf5laXo6c1IbEbegDmzGPwGNTsHZmEy6QGznu5Sh2UCWvueywb2ee+CCE4zQiZstxU9BMoQO9i6zUFSY0Kj0Q==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-assertions": {
      "version": "7.20.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.20.0.tgz",
      "integrity": "sha512-IUh1vakzNoWalR8ch/areW7qFopR2AEw03JlG7BbrDqmQ4X3q9uuipQwSGrUn7oGiemKjtSLDhNtQHzMHr1JdQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.19.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
      "integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.20.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.20.0.tgz",
      "integrity": "sha512-rd9TkG+u1CExzS4SM1BlMEhMXwFLKVjOAFFCDx9PbX5ycJWDoWMcwdJH9RhkPu1dOgn5TrxLot/Gx6lWFuAUNQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.19.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-arrow-functions": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.20.7.tgz",
      "integrity": "sha512-3poA5E7dzDomxj9WXWwuD6A5F3kc7VXwIJO+E+J8qtDtS+pXPAhrgEyh+9GBwBgPq1Z+bB+/JD60lp5jsN7JPQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-to-generator": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.20.7.tgz",
      "integrity": "sha512-Uo5gwHPT9vgnSXQxqGtpdufUiWp96gk7yiP4Mp5bm1QMkEmLXBO7PAGYbKoJ6DhAwiNkcHFBol/x5zZZkL/t0Q==",
      "dependencies": {
        "@babel/helper-module-imports": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-remap-async-to-generator": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoped-functions": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.18.6.tgz",
      "integrity": "sha512-ExUcOqpPWnliRcPqves5HJcJOvHvIIWfuS4sroBUenPuMdmW+SMHDakmtS7qOo13sVppmUijqeTv7qqGsvURpQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoping": {
      "version": "7.20.11",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.20.11.tgz",
      "integrity": "sha512-tA4N427a7fjf1P0/2I4ScsHGc5jcHPbb30xMbaTke2gxDuWpUfXDuX1FEymJwKk4tuGUvGcejAR6HdZVqmmPyw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-classes": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.20.7.tgz",
      "integrity": "sha512-LWYbsiXTPKl+oBlXUGlwNlJZetXD5Am+CyBdqhPsDVjM9Jc8jwBJFrKhHf900Kfk2eZG1y9MAG3UNajol7A4VQ==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-compilation-targets": "^7.20.7",
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-function-name": "^7.19.0",
        "@babel/helper-optimise-call-expression": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-replace-supers": "^7.20.7",
        "@babel/helper-split-export-declaration": "^7.18.6",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-computed-properties": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.20.7.tgz",
      "integrity": "sha512-Lz7MvBK6DTjElHAmfu6bfANzKcxpyNPeYBGEafyA6E5HtRpjpZwU+u7Qrgz/2OR0z+5TvKYbPdphfSaAcZBrYQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/template": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-destructuring": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.20.7.tgz",
      "integrity": "sha512-Xwg403sRrZb81IVB79ZPqNQME23yhugYVqgTxAhT99h485F4f+GMELFhhOsscDUB7HCswepKeCKLn/GZvUKoBA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-dotall-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.18.6.tgz",
      "integrity": "sha512-6S3jpun1eEbAxq7TdjLotAsl4WpQI9DxfkycRcKrjhQYzU87qpXdknpBg/e+TdcMehqGnLFi7tnFUBR02Vq6wg==",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-keys": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.18.9.tgz",
      "integrity": "sha512-d2bmXCtZXYc59/0SanQKbiWINadaJXqtvIQIzd4+hNwkWBgyCd5F/2t1kXoUdvPMrxzPvhK6EMQRROxsue+mfw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-exponentiation-operator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.18.6.tgz",
      "integrity": "sha512-wzEtc0+2c88FVR34aQmiz56dxEkxr2g8DQb/KfaFa1JYXOFVsbhvAonFN6PwVWj++fKmku8NP80plJ5Et4wqHw==",
      "dependencies": {
        "@babel/helper-builder-binary-assignment-operator-visitor": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-for-of": {
      "version": "7.18.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.18.8.tgz",
      "integrity": "sha512-yEfTRnjuskWYo0k1mHUqrVWaZwrdq8AYbfrpqULOJOaucGSp4mNMVps+YtA8byoevxS/urwU75vyhQIxcCgiBQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-function-name": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.18.9.tgz",
      "integrity": "sha512-WvIBoRPaJQ5yVHzcnJFor7oS5Ls0PYixlTYE63lCj2RtdQEl15M68FXQlxnG6wdraJIXRdR7KI+hQ7q/9QjrCQ==",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.18.9",
        "@babel/helper-function-name": "^7.18.9",
        "@babel/helper-plugin-utils": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-literals": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.18.9.tgz",
      "integrity": "sha512-IFQDSRoTPnrAIrI5zoZv73IFeZu2dhu6irxQjY9rNjTT53VmKg9fenjvoiOWOkJ6mm4jKVPtdMzBY98Fp4Z4cg==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-member-expression-literals": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.18.6.tgz",
      "integrity": "sha512-qSF1ihLGO3q+/g48k85tUjD033C29TNTVB2paCwZPVmOsjn9pClvYYrM2VeJpBY2bcNkuny0YUyTNRyRxJ54KA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-amd": {
      "version": "7.20.11",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.20.11.tgz",
      "integrity": "sha512-NuzCt5IIYOW0O30UvqktzHYR2ud5bOWbY0yaxWZ6G+aFzOMJvrs5YHNikrbdaT15+KNO31nPOy5Fim3ku6Zb5g==",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.20.11",
        "@babel/helper-plugin-utils": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-commonjs": {
      "version": "7.20.11",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.20.11.tgz",
      "integrity": "sha512-S8e1f7WQ7cimJQ51JkAaDrEtohVEitXjgCGAS2N8S31Y42E+kWwfSz83LYz57QdBm7q9diARVqanIaH2oVgQnw==",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.20.11",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-simple-access": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-systemjs": {
      "version": "7.20.11",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.20.11.tgz",
      "integrity": "sha512-vVu5g9BPQKSFEmvt2TA4Da5N+QVS66EX21d8uoOihC+OCpUoGvzVsXeqFdtAEfVa5BILAeFt+U7yVmLbQnAJmw==",
      "dependencies": {
        "@babel/helper-hoist-variables": "^7.18.6",
        "@babel/helper-module-transforms": "^7.20.11",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-validator-identifier": "^7.19.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-umd": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.18.6.tgz",
      "integrity": "sha512-dcegErExVeXcRqNtkRU/z8WlBLnvD4MRnHgNs3MytRO1Mn1sHRyhbcpYbVMGclAqOjdW+9cfkdZno9dFdfKLfQ==",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-named-capturing-groups-regex": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.20.5.tgz",
      "integrity": "sha512-mOW4tTzi5iTLnw+78iEq3gr8Aoq4WNRGpmSlrogqaiCBoR1HFhpU4JkpQFOHfeYx3ReVIFWOQJS4aZBRvuZ6mA==",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.20.5",
        "@babel/helper-plugin-utils": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-new-target": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.18.6.tgz",
      "integrity": "sha512-DjwFA/9Iu3Z+vrAn+8pBUGcjhxKguSMlsFqeCKbhb9BAV756v0krzVK04CRDi/4aqmk8BsHb4a/gFcaA5joXRw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-super": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.18.6.tgz",
      "integrity": "sha512-uvGz6zk+pZoS1aTZrOvrbj6Pp/kK2mp45t2B+bTDre2UgsZZ8EZLSJtUg7m/no0zOJUWgFONpB7Zv9W2tSaFlA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/helper-replace-supers": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-parameters": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.20.7.tgz",
      "integrity": "sha512-WiWBIkeHKVOSYPO0pWkxGPfKeWrCJyD3NJ53+Lrp/QMSZbsVPovrVl2aWZ19D/LTVnaDv5Ap7GJ/B2CTOZdrfA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-property-literals": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.18.6.tgz",
      "integrity": "sha512-cYcs6qlgafTud3PAzrrRNbQtfpQ8+y/+M5tKmksS9+M1ckbH6kzY8MrexEM9mcA6JDsukE19iIRvAyYl463sMg==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-constant-elements": {
      "version": "7.20.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-constant-elements/-/plugin-transform-react-constant-elements-7.20.2.tgz",
      "integrity": "sha512-KS/G8YI8uwMGKErLFOHS/ekhqdHhpEloxs43NecQHVgo2QuQSyJhGIY1fL8UGl9wy5ItVwwoUL4YxVqsplGq2g==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-display-name": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-display-name/-/plugin-transform-react-display-name-7.18.6.tgz",
      "integrity": "sha512-TV4sQ+T013n61uMoygyMRm+xf04Bd5oqFpv2jAEQwSZ8NwQA7zeRPg1LMVg2PWi3zWBz+CLKD+v5bcpZ/BS0aA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.20.7.tgz",
      "integrity": "sha512-Tfq7qqD+tRj3EoDhY00nn2uP2hsRxgYGi5mLQ5TimKav0a9Lrpd4deE+fcLXU8zFYRjlKPHZhpCvfEA6qnBxqQ==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-module-imports": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-jsx": "^7.18.6",
        "@babel/types": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-development": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-development/-/plugin-transform-react-jsx-development-7.18.6.tgz",
      "integrity": "sha512-SA6HEjwYFKF7WDjWcMcMGUimmw/nhNRDWxr+KaLSCrkD/LMDBvWRmHAYgE1HDeF8KUuI8OAu+RT6EOtKxSW2qA==",
      "dependencies": {
        "@babel/plugin-transform-react-jsx": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-pure-annotations": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-pure-annotations/-/plugin-transform-react-pure-annotations-7.18.6.tgz",
      "integrity": "sha512-I8VfEPg9r2TRDdvnHgPepTKvuRomzA8+u+nhY7qSI1fR2hRNebasZEETLyM5mAUr0Ku56OkXJ0I7NHJnO6cJiQ==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regenerator": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.20.5.tgz",
      "integrity": "sha512-kW/oO7HPBtntbsahzQ0qSE3tFvkFwnbozz3NWFhLGqH75vLEg+sCGngLlhVkePlCs3Jv0dBBHDzCHxNiFAQKCQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "regenerator-transform": "^0.15.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-reserved-words": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.18.6.tgz",
      "integrity": "sha512-oX/4MyMoypzHjFrT1CdivfKZ+XvIPMFXwwxHp/r0Ddy2Vuomt4HDFGmft1TAY2yiTKiNSsh3kjBAzcM8kSdsjA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-runtime": {
      "version": "7.19.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.19.6.tgz",
      "integrity": "sha512-PRH37lz4JU156lYFW1p8OxE5i7d6Sl/zV58ooyr+q1J1lnQPyg5tIiXlIwNVhJaY4W3TmOtdc8jqdXQcB1v5Yw==",
      "dependencies": {
        "@babel/helper-module-imports": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.19.0",
        "babel-plugin-polyfill-corejs2": "^0.3.3",
        "babel-plugin-polyfill-corejs3": "^0.6.0",
        "babel-plugin-polyfill-regenerator": "^0.4.1",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-runtime/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/plugin-transform-shorthand-properties": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.18.6.tgz",
      "integrity": "sha512-eCLXXJqv8okzg86ywZJbRn19YJHU4XUa55oz2wbHhaQVn/MM+XhukiT7SYqp/7o00dg52Rj51Ny+Ecw4oyoygw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-spread": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.20.7.tgz",
      "integrity": "sha512-ewBbHQ+1U/VnH1fxltbJqDeWBU1oNLG8Dj11uIv3xVf7nrQu0bPGe5Rf716r7K5Qz+SqtAOVswoVunoiBtGhxw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.20.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-sticky-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.18.6.tgz",
      "integrity": "sha512-kfiDrDQ+PBsQDO85yj1icueWMfGfJFKN1KCkndygtu/C9+XUfydLC8Iv5UYJqRwy4zk8EcplRxEOeLyjq1gm6Q==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-template-literals": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.18.9.tgz",
      "integrity": "sha512-S8cOWfT82gTezpYOiVaGHrCbhlHgKhQt8XH5ES46P2XWmX92yisoZywf5km75wv5sYcXDUCLMmMxOLCtthDgMA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typeof-symbol": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.18.9.tgz",
      "integrity": "sha512-SRfwTtF11G2aemAZWivL7PD+C9z52v9EvMqH9BuYbabyPuKUvSWks3oCg6041pT925L4zVFqaVBeECwsmlguEw==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.20.7.tgz",
      "integrity": "sha512-m3wVKEvf6SoszD8pu4NZz3PvfKRCMgk6D6d0Qi9hNnlM5M6CFS92EgF4EiHVLKbU0r/r7ty1hg7NPZwE7WRbYw==",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.20.7",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-typescript": "^7.20.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-escapes": {
      "version": "7.18.10",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.18.10.tgz",
      "integrity": "sha512-kKAdAI+YzPgGY/ftStBFXTI1LZFju38rYThnfMykS+IXy8BVx+res7s2fxf1l8I35DV2T97ezo6+SGrXz6B3iQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.18.6.tgz",
      "integrity": "sha512-gE7A6Lt7YLnNOL3Pb9BNeZvi+d8l7tcRrG4+pwJjK9hD2xX4mEvjlQW60G9EEmfXVYRPv9VRQcyegIVHCql/AA==",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-env": {
      "version": "7.20.2",
      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.20.2.tgz",
      "integrity": "sha512-1G0efQEWR1EHkKvKHqbG+IN/QdgwfByUpM5V5QroDzGV2t3S/WXNQd693cHiHTlCFMpr9B6FkPFXDA2lQcKoDg==",
      "dependencies": {
        "@babel/compat-data": "^7.20.1",
        "@babel/helper-compilation-targets": "^7.20.0",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-validator-option": "^7.18.6",
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": "^7.18.6",
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.18.9",
        "@babel/plugin-proposal-async-generator-functions": "^7.20.1",
        "@babel/plugin-proposal-class-properties": "^7.18.6",
        "@babel/plugin-proposal-class-static-block": "^7.18.6",
        "@babel/plugin-proposal-dynamic-import": "^7.18.6",
        "@babel/plugin-proposal-export-namespace-from": "^7.18.9",
        "@babel/plugin-proposal-json-strings": "^7.18.6",
        "@babel/plugin-proposal-logical-assignment-operators": "^7.18.9",
        "@babel/plugin-proposal-nullish-coalescing-operator": "^7.18.6",
        "@babel/plugin-proposal-numeric-separator": "^7.18.6",
        "@babel/plugin-proposal-object-rest-spread": "^7.20.2",
        "@babel/plugin-proposal-optional-catch-binding": "^7.18.6",
        "@babel/plugin-proposal-optional-chaining": "^7.18.9",
        "@babel/plugin-proposal-private-methods": "^7.18.6",
        "@babel/plugin-proposal-private-property-in-object": "^7.18.6",
        "@babel/plugin-proposal-unicode-property-regex": "^7.18.6",
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-dynamic-import": "^7.8.3",
        "@babel/plugin-syntax-export-namespace-from": "^7.8.3",
        "@babel/plugin-syntax-import-assertions": "^7.20.0",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5",
        "@babel/plugin-transform-arrow-functions": "^7.18.6",
        "@babel/plugin-transform-async-to-generator": "^7.18.6",
        "@babel/plugin-transform-block-scoped-functions": "^7.18.6",
        "@babel/plugin-transform-block-scoping": "^7.20.2",
        "@babel/plugin-transform-classes": "^7.20.2",
        "@babel/plugin-transform-computed-properties": "^7.18.9",
        "@babel/plugin-transform-destructuring": "^7.20.2",
        "@babel/plugin-transform-dotall-regex": "^7.18.6",
        "@babel/plugin-transform-duplicate-keys": "^7.18.9",
        "@babel/plugin-transform-exponentiation-operator": "^7.18.6",
        "@babel/plugin-transform-for-of": "^7.18.8",
        "@babel/plugin-transform-function-name": "^7.18.9",
        "@babel/plugin-transform-literals": "^7.18.9",
        "@babel/plugin-transform-member-expression-literals": "^7.18.6",
        "@babel/plugin-transform-modules-amd": "^7.19.6",
        "@babel/plugin-transform-modules-commonjs": "^7.19.6",
        "@babel/plugin-transform-modules-systemjs": "^7.19.6",
        "@babel/plugin-transform-modules-umd": "^7.18.6",
        "@babel/plugin-transform-named-capturing-groups-regex": "^7.19.1",
        "@babel/plugin-transform-new-target": "^7.18.6",
        "@babel/plugin-transform-object-super": "^7.18.6",
        "@babel/plugin-transform-parameters": "^7.20.1",
        "@babel/plugin-transform-property-literals": "^7.18.6",
        "@babel/plugin-transform-regenerator": "^7.18.6",
        "@babel/plugin-transform-reserved-words": "^7.18.6",
        "@babel/plugin-transform-shorthand-properties": "^7.18.6",
        "@babel/plugin-transform-spread": "^7.19.0",
        "@babel/plugin-transform-sticky-regex": "^7.18.6",
        "@babel/plugin-transform-template-literals": "^7.18.9",
        "@babel/plugin-transform-typeof-symbol": "^7.18.9",
        "@babel/plugin-transform-unicode-escapes": "^7.18.10",
        "@babel/plugin-transform-unicode-regex": "^7.18.6",
        "@babel/preset-modules": "^0.1.5",
        "@babel/types": "^7.20.2",
        "babel-plugin-polyfill-corejs2": "^0.3.3",
        "babel-plugin-polyfill-corejs3": "^0.6.0",
        "babel-plugin-polyfill-regenerator": "^0.4.1",
        "core-js-compat": "^3.25.1",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-env/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/preset-modules": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.5.tgz",
      "integrity": "sha512-A57th6YRG7oR3cq/yt/Y84MvGgE0eJG2F1JLhKuyG+jFxEgrd/HAMJatiFtmOiZurz+0DkrvbheCLaV5f2JfjA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@babel/plugin-proposal-unicode-property-regex": "^7.4.4",
        "@babel/plugin-transform-dotall-regex": "^7.4.4",
        "@babel/types": "^7.4.4",
        "esutils": "^2.0.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-react": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/preset-react/-/preset-react-7.18.6.tgz",
      "integrity": "sha512-zXr6atUmyYdiWRVLOZahakYmOBHtWc2WGCkP8PYTgZi0iJXDY2CN180TdrIW4OGOAdLc7TifzDIvtx6izaRIzg==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/helper-validator-option": "^7.18.6",
        "@babel/plugin-transform-react-display-name": "^7.18.6",
        "@babel/plugin-transform-react-jsx": "^7.18.6",
        "@babel/plugin-transform-react-jsx-development": "^7.18.6",
        "@babel/plugin-transform-react-pure-annotations": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-typescript": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/preset-typescript/-/preset-typescript-7.18.6.tgz",
      "integrity": "sha512-s9ik86kXBAnD760aybBucdpnLsAt0jK1xqJn2juOn9lkOvSHV60os5hxoVJsPzMQxvnUJFAlkont2DvvaYEBtQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/helper-validator-option": "^7.18.6",
        "@babel/plugin-transform-typescript": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.20.7.tgz",
      "integrity": "sha512-UF0tvkUtxwAgZ5W/KrkHf0Rn0fdnLDU9ScxBrEVNUprE/MzirjK4MJUX1/BVDv00Sv8cljtukVK1aky++X1SjQ==",
      "dependencies": {
        "regenerator-runtime": "^0.13.11"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/runtime-corejs3": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/runtime-corejs3/-/runtime-corejs3-7.20.7.tgz",
      "integrity": "sha512-jr9lCZ4RbRQmCR28Q8U8Fu49zvFqLxTY9AMOUz+iyMohMoAgpEcVxY+wJNay99oXOpOcCTODkk70NDN2aaJEeg==",
      "dependencies": {
        "core-js-pure": "^3.25.1",
        "regenerator-runtime": "^0.13.11"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.20.7.tgz",
      "integrity": "sha512-8SegXApWe6VoNw0r9JHpSteLKTpTiLZ4rMlGIm9JQ18KiCtyQiAMEazujAHrUS5flrcqYZa75ukev3P6QmUwUw==",
      "dependencies": {
        "@babel/code-frame": "^7.18.6",
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.20.10",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.20.10.tgz",
      "integrity": "sha512-oSf1juCgymrSez8NI4A2sr4+uB/mFd9MXplYGPEBnfAuWmmyeVcHa6xLPiaRBcXkcb/28bgxmQLTVwFKE1yfsg==",
      "dependencies": {
        "@babel/code-frame": "^7.18.6",
        "@babel/generator": "^7.20.7",
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-function-name": "^7.19.0",
        "@babel/helper-hoist-variables": "^7.18.6",
        "@babel/helper-split-export-declaration": "^7.18.6",
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.20.7.tgz",
      "integrity": "sha512-69OnhBxSSgK0OzTJai4kyPDiKTIe3j+ctaHdIGVbRahTLAT7L3R9oeXHC2aVSuGYt3cVnoAMDmOCgJ2yaiLMvg==",
      "dependencies": {
        "@babel/helper-string-parser": "^7.19.4",
        "@babel/helper-validator-identifier": "^7.19.1",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@colors/colors": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.5.0.tgz",
      "integrity": "sha512-ooWCrlZP11i8GImSjTHYHLkvFDP48nS4+204nGb1RiX/WXYHmJA2III9/e2DWVabCESdW7hBAEzHRqUn9OUVvQ==",
      "optional": true,
      "engines": {
        "node": ">=0.1.90"
      }
    },
    "node_modules/@docsearch/css": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/@docsearch/css/-/css-3.3.0.tgz",
      "integrity": "sha512-rODCdDtGyudLj+Va8b6w6Y85KE85bXRsps/R4Yjwt5vueXKXZQKYw0aA9knxLBT6a/bI/GMrAcmCR75KYOM6hg=="
    },
    "node_modules/@docsearch/react": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/@docsearch/react/-/react-3.3.0.tgz",
      "integrity": "sha512-fhS5adZkae2SSdMYEMVg6pxI5a/cE+tW16ki1V0/ur4Fdok3hBRkmN/H8VvlXnxzggkQIIRIVvYPn00JPjen3A==",
      "dependencies": {
        "@algolia/autocomplete-core": "1.7.2",
        "@algolia/autocomplete-preset-algolia": "1.7.2",
        "@docsearch/css": "3.3.0",
        "algoliasearch": "^4.0.0"
      },
      "peerDependencies": {
        "@types/react": ">= 16.8.0 < 19.0.0",
        "react": ">= 16.8.0 < 19.0.0",
        "react-dom": ">= 16.8.0 < 19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@docusaurus/core": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/core/-/core-2.2.0.tgz",
      "integrity": "sha512-Vd6XOluKQqzG12fEs9prJgDtyn6DPok9vmUWDR2E6/nV5Fl9SVkhEQOBxwObjk3kQh7OY7vguFaLh0jqdApWsA==",
      "dependencies": {
        "@babel/core": "^7.18.6",
        "@babel/generator": "^7.18.7",
        "@babel/plugin-syntax-dynamic-import": "^7.8.3",
        "@babel/plugin-transform-runtime": "^7.18.6",
        "@babel/preset-env": "^7.18.6",
        "@babel/preset-react": "^7.18.6",
        "@babel/preset-typescript": "^7.18.6",
        "@babel/runtime": "^7.18.6",
        "@babel/runtime-corejs3": "^7.18.6",
        "@babel/traverse": "^7.18.8",
        "@docusaurus/cssnano-preset": "2.2.0",
        "@docusaurus/logger": "2.2.0",
        "@docusaurus/mdx-loader": "2.2.0",
        "@docusaurus/react-loadable": "5.5.2",
        "@docusaurus/utils": "2.2.0",
        "@docusaurus/utils-common": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "@slorber/static-site-generator-webpack-plugin": "^4.0.7",
        "@svgr/webpack": "^6.2.1",
        "autoprefixer": "^10.4.7",
        "babel-loader": "^8.2.5",
        "babel-plugin-dynamic-import-node": "^2.3.3",
        "boxen": "^6.2.1",
        "chalk": "^4.1.2",
        "chokidar": "^3.5.3",
        "clean-css": "^5.3.0",
        "cli-table3": "^0.6.2",
        "combine-promises": "^1.1.0",
        "commander": "^5.1.0",
        "copy-webpack-plugin": "^11.0.0",
        "core-js": "^3.23.3",
        "css-loader": "^6.7.1",
        "css-minimizer-webpack-plugin": "^4.0.0",
        "cssnano": "^5.1.12",
        "del": "^6.1.1",
        "detect-port": "^1.3.0",
        "escape-html": "^1.0.3",
        "eta": "^1.12.3",
        "file-loader": "^6.2.0",
        "fs-extra": "^10.1.0",
        "html-minifier-terser": "^6.1.0",
        "html-tags": "^3.2.0",
        "html-webpack-plugin": "^5.5.0",
        "import-fresh": "^3.3.0",
        "leven": "^3.1.0",
        "lodash": "^4.17.21",
        "mini-css-extract-plugin": "^2.6.1",
        "postcss": "^8.4.14",
        "postcss-loader": "^7.0.0",
        "prompts": "^2.4.2",
        "react-dev-utils": "^12.0.1",
        "react-helmet-async": "^1.3.0",
        "react-loadable": "npm:@docusaurus/react-loadable@5.5.2",
        "react-loadable-ssr-addon-v5-slorber": "^1.0.1",
        "react-router": "^5.3.3",
        "react-router-config": "^5.1.1",
        "react-router-dom": "^5.3.3",
        "rtl-detect": "^1.0.4",
        "semver": "^7.3.7",
        "serve-handler": "^6.1.3",
        "shelljs": "^0.8.5",
        "terser-webpack-plugin": "^5.3.3",
        "tslib": "^2.4.0",
        "update-notifier": "^5.1.0",
        "url-loader": "^4.1.1",
        "wait-on": "^6.0.1",
        "webpack": "^5.73.0",
        "webpack-bundle-analyzer": "^4.5.0",
        "webpack-dev-server": "^4.9.3",
        "webpack-merge": "^5.8.0",
        "webpackbar": "^5.0.2"
      },
      "bin": {
        "docusaurus": "bin/docusaurus.mjs"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/cssnano-preset": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/cssnano-preset/-/cssnano-preset-2.2.0.tgz",
      "integrity": "sha512-mAAwCo4n66TMWBH1kXnHVZsakW9VAXJzTO4yZukuL3ro4F+JtkMwKfh42EG75K/J/YIFQG5I/Bzy0UH/hFxaTg==",
      "dependencies": {
        "cssnano-preset-advanced": "^5.3.8",
        "postcss": "^8.4.14",
        "postcss-sort-media-queries": "^4.2.1",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      }
    },
    "node_modules/@docusaurus/logger": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/logger/-/logger-2.2.0.tgz",
      "integrity": "sha512-DF3j1cA5y2nNsu/vk8AG7xwpZu6f5MKkPPMaaIbgXLnWGfm6+wkOeW7kNrxnM95YOhKUkJUophX69nGUnLsm0A==",
      "dependencies": {
        "chalk": "^4.1.2",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      }
    },
    "node_modules/@docusaurus/mdx-loader": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/mdx-loader/-/mdx-loader-2.2.0.tgz",
      "integrity": "sha512-X2bzo3T0jW0VhUU+XdQofcEeozXOTmKQMvc8tUnWRdTnCvj4XEcBVdC3g+/jftceluiwSTNRAX4VBOJdNt18jA==",
      "dependencies": {
        "@babel/parser": "^7.18.8",
        "@babel/traverse": "^7.18.8",
        "@docusaurus/logger": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@mdx-js/mdx": "^1.6.22",
        "escape-html": "^1.0.3",
        "file-loader": "^6.2.0",
        "fs-extra": "^10.1.0",
        "image-size": "^1.0.1",
        "mdast-util-to-string": "^2.0.0",
        "remark-emoji": "^2.2.0",
        "stringify-object": "^3.3.0",
        "tslib": "^2.4.0",
        "unified": "^9.2.2",
        "unist-util-visit": "^2.0.3",
        "url-loader": "^4.1.1",
        "webpack": "^5.73.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/module-type-aliases": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/module-type-aliases/-/module-type-aliases-2.2.0.tgz",
      "integrity": "sha512-wDGW4IHKoOr9YuJgy7uYuKWrDrSpsUSDHLZnWQYM9fN7D5EpSmYHjFruUpKWVyxLpD/Wh0rW8hYZwdjJIQUQCQ==",
      "dependencies": {
        "@docusaurus/react-loadable": "5.5.2",
        "@docusaurus/types": "2.2.0",
        "@types/history": "^4.7.11",
        "@types/react": "*",
        "@types/react-router-config": "*",
        "@types/react-router-dom": "*",
        "react-helmet-async": "*",
        "react-loadable": "npm:@docusaurus/react-loadable@5.5.2"
      },
      "peerDependencies": {
        "react": "*",
        "react-dom": "*"
      }
    },
    "node_modules/@docusaurus/plugin-content-blog": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/plugin-content-blog/-/plugin-content-blog-2.2.0.tgz",
      "integrity": "sha512-0mWBinEh0a5J2+8ZJXJXbrCk1tSTNf7Nm4tYAl5h2/xx+PvH/Bnu0V+7mMljYm/1QlDYALNIIaT/JcoZQFUN3w==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/logger": "2.2.0",
        "@docusaurus/mdx-loader": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@docusaurus/utils-common": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "cheerio": "^1.0.0-rc.12",
        "feed": "^4.2.2",
        "fs-extra": "^10.1.0",
        "lodash": "^4.17.21",
        "reading-time": "^1.5.0",
        "tslib": "^2.4.0",
        "unist-util-visit": "^2.0.3",
        "utility-types": "^3.10.0",
        "webpack": "^5.73.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/plugin-content-docs": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/plugin-content-docs/-/plugin-content-docs-2.2.0.tgz",
      "integrity": "sha512-BOazBR0XjzsHE+2K1wpNxz5QZmrJgmm3+0Re0EVPYFGW8qndCWGNtXW/0lGKhecVPML8yyFeAmnUCIs7xM2wPw==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/logger": "2.2.0",
        "@docusaurus/mdx-loader": "2.2.0",
        "@docusaurus/module-type-aliases": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "@types/react-router-config": "^5.0.6",
        "combine-promises": "^1.1.0",
        "fs-extra": "^10.1.0",
        "import-fresh": "^3.3.0",
        "js-yaml": "^4.1.0",
        "lodash": "^4.17.21",
        "tslib": "^2.4.0",
        "utility-types": "^3.10.0",
        "webpack": "^5.73.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/plugin-content-pages": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/plugin-content-pages/-/plugin-content-pages-2.2.0.tgz",
      "integrity": "sha512-+OTK3FQHk5WMvdelz8v19PbEbx+CNT6VSpx7nVOvMNs5yJCKvmqBJBQ2ZSxROxhVDYn+CZOlmyrC56NSXzHf6g==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/mdx-loader": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "fs-extra": "^10.1.0",
        "tslib": "^2.4.0",
        "webpack": "^5.73.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/plugin-debug": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/plugin-debug/-/plugin-debug-2.2.0.tgz",
      "integrity": "sha512-p9vOep8+7OVl6r/NREEYxf4HMAjV8JMYJ7Bos5fCFO0Wyi9AZEo0sCTliRd7R8+dlJXZEgcngSdxAUo/Q+CJow==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "fs-extra": "^10.1.0",
        "react-json-view": "^1.21.3",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/plugin-google-analytics": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/plugin-google-analytics/-/plugin-google-analytics-2.2.0.tgz",
      "integrity": "sha512-+eZVVxVeEnV5nVQJdey9ZsfyEVMls6VyWTIj8SmX0k5EbqGvnIfET+J2pYEuKQnDIHxy+syRMoRM6AHXdHYGIg==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/plugin-google-gtag": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/plugin-google-gtag/-/plugin-google-gtag-2.2.0.tgz",
      "integrity": "sha512-6SOgczP/dYdkqUMGTRqgxAS1eTp6MnJDAQMy8VCF1QKbWZmlkx4agHDexihqmYyCujTYHqDAhm1hV26EET54NQ==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/plugin-sitemap": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/plugin-sitemap/-/plugin-sitemap-2.2.0.tgz",
      "integrity": "sha512-0jAmyRDN/aI265CbWZNZuQpFqiZuo+5otk2MylU9iVrz/4J7gSc+ZJ9cy4EHrEsW7PV8s1w18hIEsmcA1YgkKg==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/logger": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@docusaurus/utils-common": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "fs-extra": "^10.1.0",
        "sitemap": "^7.1.1",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/preset-classic": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/preset-classic/-/preset-classic-2.2.0.tgz",
      "integrity": "sha512-yKIWPGNx7BT8v2wjFIWvYrS+nvN04W+UameSFf8lEiJk6pss0kL6SG2MRvyULiI3BDxH+tj6qe02ncpSPGwumg==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/plugin-content-blog": "2.2.0",
        "@docusaurus/plugin-content-docs": "2.2.0",
        "@docusaurus/plugin-content-pages": "2.2.0",
        "@docusaurus/plugin-debug": "2.2.0",
        "@docusaurus/plugin-google-analytics": "2.2.0",
        "@docusaurus/plugin-google-gtag": "2.2.0",
        "@docusaurus/plugin-sitemap": "2.2.0",
        "@docusaurus/theme-classic": "2.2.0",
        "@docusaurus/theme-common": "2.2.0",
        "@docusaurus/theme-search-algolia": "2.2.0",
        "@docusaurus/types": "2.2.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/react-loadable": {
      "version": "5.5.2",
      "resolved": "https://registry.npmjs.org/@docusaurus/react-loadable/-/react-loadable-5.5.2.tgz",
      "integrity": "sha512-A3dYjdBGuy0IGT+wyLIGIKLRE+sAk1iNk0f1HjNDysO7u8lhL4N3VEm+FAubmJbAztn94F7MxBTPmnixbiyFdQ==",
      "dependencies": {
        "@types/react": "*",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/@docusaurus/theme-classic": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/theme-classic/-/theme-classic-2.2.0.tgz",
      "integrity": "sha512-kjbg/qJPwZ6H1CU/i9d4l/LcFgnuzeiGgMQlt6yPqKo0SOJIBMPuz7Rnu3r/WWbZFPi//o8acclacOzmXdUUEg==",
      "dependencies": {
        "@docusaurus/core": "2.2.0",
        "@docusaurus/mdx-loader": "2.2.0",
        "@docusaurus/module-type-aliases": "2.2.0",
        "@docusaurus/plugin-content-blog": "2.2.0",
        "@docusaurus/plugin-content-docs": "2.2.0",
        "@docusaurus/plugin-content-pages": "2.2.0",
        "@docusaurus/theme-common": "2.2.0",
        "@docusaurus/theme-translations": "2.2.0",
        "@docusaurus/types": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@docusaurus/utils-common": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "@mdx-js/react": "^1.6.22",
        "clsx": "^1.2.1",
        "copy-text-to-clipboard": "^3.0.1",
        "infima": "0.2.0-alpha.42",
        "lodash": "^4.17.21",
        "nprogress": "^0.2.0",
        "postcss": "^8.4.14",
        "prism-react-renderer": "^1.3.5",
        "prismjs": "^1.28.0",
        "react-router-dom": "^5.3.3",
        "rtlcss": "^3.5.0",
        "tslib": "^2.4.0",
        "utility-types": "^3.10.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/theme-common": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/theme-common/-/theme-common-2.2.0.tgz",
      "integrity": "sha512-R8BnDjYoN90DCL75gP7qYQfSjyitXuP9TdzgsKDmSFPNyrdE3twtPNa2dIN+h+p/pr+PagfxwWbd6dn722A1Dw==",
      "dependencies": {
        "@docusaurus/mdx-loader": "2.2.0",
        "@docusaurus/module-type-aliases": "2.2.0",
        "@docusaurus/plugin-content-blog": "2.2.0",
        "@docusaurus/plugin-content-docs": "2.2.0",
        "@docusaurus/plugin-content-pages": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@types/history": "^4.7.11",
        "@types/react": "*",
        "@types/react-router-config": "*",
        "clsx": "^1.2.1",
        "parse-numeric-range": "^1.3.0",
        "prism-react-renderer": "^1.3.5",
        "tslib": "^2.4.0",
        "utility-types": "^3.10.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/theme-search-algolia": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/theme-search-algolia/-/theme-search-algolia-2.2.0.tgz",
      "integrity": "sha512-2h38B0tqlxgR2FZ9LpAkGrpDWVdXZ7vltfmTdX+4RsDs3A7khiNsmZB+x/x6sA4+G2V2CvrsPMlsYBy5X+cY1w==",
      "dependencies": {
        "@docsearch/react": "^3.1.1",
        "@docusaurus/core": "2.2.0",
        "@docusaurus/logger": "2.2.0",
        "@docusaurus/plugin-content-docs": "2.2.0",
        "@docusaurus/theme-common": "2.2.0",
        "@docusaurus/theme-translations": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "@docusaurus/utils-validation": "2.2.0",
        "algoliasearch": "^4.13.1",
        "algoliasearch-helper": "^3.10.0",
        "clsx": "^1.2.1",
        "eta": "^1.12.3",
        "fs-extra": "^10.1.0",
        "lodash": "^4.17.21",
        "tslib": "^2.4.0",
        "utility-types": "^3.10.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/theme-translations": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/theme-translations/-/theme-translations-2.2.0.tgz",
      "integrity": "sha512-3T140AG11OjJrtKlY4pMZ5BzbGRDjNs2co5hJ6uYJG1bVWlhcaFGqkaZ5lCgKflaNHD7UHBHU9Ec5f69jTdd6w==",
      "dependencies": {
        "fs-extra": "^10.1.0",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      }
    },
    "node_modules/@docusaurus/types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/types/-/types-2.2.0.tgz",
      "integrity": "sha512-b6xxyoexfbRNRI8gjblzVOnLr4peCJhGbYGPpJ3LFqpi5nsFfoK4mmDLvWdeah0B7gmJeXabN7nQkFoqeSdmOw==",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*",
        "commander": "^5.1.0",
        "joi": "^17.6.0",
        "react-helmet-async": "^1.3.0",
        "utility-types": "^3.10.0",
        "webpack": "^5.73.0",
        "webpack-merge": "^5.8.0"
      },
      "peerDependencies": {
        "react": "^16.8.4 || ^17.0.0",
        "react-dom": "^16.8.4 || ^17.0.0"
      }
    },
    "node_modules/@docusaurus/utils": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/utils/-/utils-2.2.0.tgz",
      "integrity": "sha512-oNk3cjvx7Tt1Lgh/aeZAmFpGV2pDr5nHKrBVx6hTkzGhrnMuQqLt6UPlQjdYQ3QHXwyF/ZtZMO1D5Pfi0lu7SA==",
      "dependencies": {
        "@docusaurus/logger": "2.2.0",
        "@svgr/webpack": "^6.2.1",
        "file-loader": "^6.2.0",
        "fs-extra": "^10.1.0",
        "github-slugger": "^1.4.0",
        "globby": "^11.1.0",
        "gray-matter": "^4.0.3",
        "js-yaml": "^4.1.0",
        "lodash": "^4.17.21",
        "micromatch": "^4.0.5",
        "resolve-pathname": "^3.0.0",
        "shelljs": "^0.8.5",
        "tslib": "^2.4.0",
        "url-loader": "^4.1.1",
        "webpack": "^5.73.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "@docusaurus/types": "*"
      },
      "peerDependenciesMeta": {
        "@docusaurus/types": {
          "optional": true
        }
      }
    },
    "node_modules/@docusaurus/utils-common": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/utils-common/-/utils-common-2.2.0.tgz",
      "integrity": "sha512-qebnerHp+cyovdUseDQyYFvMW1n1nv61zGe5JJfoNQUnjKuApch3IVsz+/lZ9a38pId8kqehC1Ao2bW/s0ntDA==",
      "dependencies": {
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      },
      "peerDependencies": {
        "@docusaurus/types": "*"
      },
      "peerDependenciesMeta": {
        "@docusaurus/types": {
          "optional": true
        }
      }
    },
    "node_modules/@docusaurus/utils-validation": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@docusaurus/utils-validation/-/utils-validation-2.2.0.tgz",
      "integrity": "sha512-I1hcsG3yoCkasOL5qQAYAfnmVoLei7apugT6m4crQjmDGxq+UkiRrq55UqmDDyZlac/6ax/JC0p+usZ6W4nVyg==",
      "dependencies": {
        "@docusaurus/logger": "2.2.0",
        "@docusaurus/utils": "2.2.0",
        "joi": "^17.6.0",
        "js-yaml": "^4.1.0",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=16.14"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.0.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.0.0.tgz",
      "integrity": "sha512-3Ab5HgYIIAnS0HjqJHQYZS+zXc4tUmTmBH3z83ajI6afXp8X3ZtdLX+nXx+I7LNkJD7uN9LAVhgnjDgZa2z0kA==",
      "dependencies": {
        "@sinclair/typebox": "^0.24.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.3.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.3.1.tgz",
      "integrity": "sha512-d0S0jmmTpjnhCmNpApgX3jrUZgZ22ivKJRvL2lli5hpCRoNnp1f85r2/wpKfXuYu8E7Jjh1hGfhPyup1NM5AmA==",
      "dependencies": {
        "@jest/schemas": "^29.0.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.1.1.tgz",
      "integrity": "sha512-sQXCasFk+U8lWYEe66WxRDOE9PjVz4vSM51fTu3Hw+ClTpUSQb718772vH3pyS5pShp6lvQM7SxgIDXXXmOX7w==",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.0",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.2.tgz",
      "integrity": "sha512-m7O9o2uR8k2ObDysZYzdfhb08VuEml5oWGiosa1VdaPZ/A6QyPkAJuwN0Q1lhULOf6B7MtQmHENS743hWtCrgw==",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "node_modules/@jridgewell/source-map/node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.2.tgz",
      "integrity": "sha512-mh65xKQAzI6iBcFzwv28KVWSmCkdRBWoOh+bYQGW3+6OZvbbN3TqMGo5hqYxQniRcH9F2VZIoJCm4pa3BPDK/A==",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.14",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
      "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw=="
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.17",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.17.tgz",
      "integrity": "sha512-MCNzAp77qzKca9+W/+I0+sEpaUnZoeasnghNeVc41VZCEKaCH73Vq3BZZ/SzWIgrqE4H4ceI+p+b6C0mHf9T4g==",
      "dependencies": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      }
    },
    "node_modules/@leichtgewicht/ip-codec": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@leichtgewicht/ip-codec/-/ip-codec-2.0.4.tgz",
      "integrity": "sha512-Hcv+nVC0kZnQ3tD9GVu5xSMR4VVYOteQIr/hwFPVEvPdlXqgGEuRjiheChHgdM+JyqdgNcmzZOX/tnl0JOiI7A=="
    },
    "node_modules/@mdx-js/mdx": {
      "version": "1.6.22",
      "resolved": "https://registry.npmjs.org/@mdx-js/mdx/-/mdx-1.6.22.tgz",
      "integrity": "sha512-AMxuLxPz2j5/6TpF/XSdKpQP1NlG0z11dFOlq+2IP/lSgl11GY8ji6S/rgsViN/L0BDvHvUMruRb7ub+24LUYA==",
      "dependencies": {
        "@babel/core": "7.12.9",
        "@babel/plugin-syntax-jsx": "7.12.1",
        "@babel/plugin-syntax-object-rest-spread": "7.8.3",
        "@mdx-js/util": "1.6.22",
        "babel-plugin-apply-mdx-type-prop": "1.6.22",
        "babel-plugin-extract-import-names": "1.6.22",
        "camelcase-css": "2.0.1",
        "detab": "2.0.4",
        "hast-util-raw": "6.0.1",
        "lodash.uniq": "4.5.0",
        "mdast-util-to-hast": "10.0.1",
        "remark-footnotes": "2.0.0",
        "remark-mdx": "1.6.22",
        "remark-parse": "8.0.3",
        "remark-squeeze-paragraphs": "4.0.0",
        "style-to-object": "0.3.0",
        "unified": "9.2.0",
        "unist-builder": "2.0.3",
        "unist-util-visit": "2.0.3"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/@mdx-js/mdx/node_modules/@babel/core": {
      "version": "7.12.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.12.9.tgz",
      "integrity": "sha512-gTXYh3M5wb7FRXQy+FErKFAv90BnlOuNn1QkCK2lREoPAjrQCO49+HVSrFoe5uakFAF5eenS75KbO2vQiLrTMQ==",
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "@babel/generator": "^7.12.5",
        "@babel/helper-module-transforms": "^7.12.1",
        "@babel/helpers": "^7.12.5",
        "@babel/parser": "^7.12.7",
        "@babel/template": "^7.12.7",
        "@babel/traverse": "^7.12.9",
        "@babel/types": "^7.12.7",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.1",
        "json5": "^2.1.2",
        "lodash": "^4.17.19",
        "resolve": "^1.3.2",
        "semver": "^5.4.1",
        "source-map": "^0.5.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@mdx-js/mdx/node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.12.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.12.1.tgz",
      "integrity": "sha512-1yRi7yAtB0ETgxdY9ti/p2TivUxJkTdhu/ZbF9MshVGqOx1TdB3b7xCXs49Fupgg50N45KcAsRP/ZqWjs9SRjg==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@mdx-js/mdx/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/@mdx-js/mdx/node_modules/source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@mdx-js/mdx/node_modules/unified": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/unified/-/unified-9.2.0.tgz",
      "integrity": "sha512-vx2Z0vY+a3YoTj8+pttM3tiJHCwY5UFbYdiWrwBEbHmK8pvsPj2rtAX2BFfgXen8T39CJWblWRDT4L5WGXtDdg==",
      "dependencies": {
        "bail": "^1.0.0",
        "extend": "^3.0.0",
        "is-buffer": "^2.0.0",
        "is-plain-obj": "^2.0.0",
        "trough": "^1.0.0",
        "vfile": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/@mdx-js/react": {
      "version": "1.6.22",
      "resolved": "https://registry.npmjs.org/@mdx-js/react/-/react-1.6.22.tgz",
      "integrity": "sha512-TDoPum4SHdfPiGSAaRBw7ECyI8VaHpK8GJugbJIJuqyh6kzw9ZLJZW3HGL3NNrJGxcAixUvqROm+YuQOo5eXtg==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      },
      "peerDependencies": {
        "react": "^16.13.1 || ^17.0.0"
      }
    },
    "node_modules/@mdx-js/util": {
      "version": "1.6.22",
      "resolved": "https://registry.npmjs.org/@mdx-js/util/-/util-1.6.22.tgz",
      "integrity": "sha512-H1rQc1ZOHANWBvPcW+JpGwr+juXSxM8Q8YCkm3GhZd8REu1fHR3z99CErO1p9pkcfcxZnMdIZdIsXkOHY0NilA==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@polka/url": {
      "version": "1.0.0-next.21",
      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.21.tgz",
      "integrity": "sha512-a5Sab1C4/icpTZVzZc5Ghpz88yQtGOyNqYXcZgOssB2uuAr+wF/MvN6bgtW32q7HHrvBki+BsZ0OuNv6EV3K9g=="
    },
    "node_modules/@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.24.51",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.51.tgz",
      "integrity": "sha512-1P1OROm/rdubP5aFDSZQILU0vrLCJ4fvHt6EoqHEM+2D/G5MK3bIaymUKLit8Js9gbns5UyJnkP/TZROLw4tUA=="
    },
    "node_modules/@sindresorhus/is": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@slorber/static-site-generator-webpack-plugin": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/@slorber/static-site-generator-webpack-plugin/-/static-site-generator-webpack-plugin-4.0.7.tgz",
      "integrity": "sha512-Ug7x6z5lwrz0WqdnNFOMYrDQNTPAprvHLSh6+/fmml3qUiz6l5eq+2MzLKWtn/q5K5NpSiFsZTP/fck/3vjSxA==",
      "dependencies": {
        "eval": "^0.1.8",
        "p-map": "^4.0.0",
        "webpack-sources": "^3.2.2"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@svgr/babel-plugin-add-jsx-attribute": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-add-jsx-attribute/-/babel-plugin-add-jsx-attribute-6.5.1.tgz",
      "integrity": "sha512-9PYGcXrAxitycIjRmZB+Q0JaN07GZIWaTBIGQzfaZv+qr1n8X1XUEJ5rZ/vx6OVD9RRYlrNnXWExQXcmZeD/BQ==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-attribute": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-attribute/-/babel-plugin-remove-jsx-attribute-6.5.0.tgz",
      "integrity": "sha512-8zYdkym7qNyfXpWvu4yq46k41pyNM9SOstoWhKlm+IfdCE1DdnRKeMUPsWIEO/DEkaWxJ8T9esNdG3QwQ93jBA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-empty-expression": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-empty-expression/-/babel-plugin-remove-jsx-empty-expression-6.5.0.tgz",
      "integrity": "sha512-NFdxMq3xA42Kb1UbzCVxplUc0iqSyM9X8kopImvFnB+uSDdzIHOdbs1op8ofAvVRtbg4oZiyRl3fTYeKcOe9Iw==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-replace-jsx-attribute-value": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-replace-jsx-attribute-value/-/babel-plugin-replace-jsx-attribute-value-6.5.1.tgz",
      "integrity": "sha512-8DPaVVE3fd5JKuIC29dqyMB54sA6mfgki2H2+swh+zNJoynC8pMPzOkidqHOSc6Wj032fhl8Z0TVn1GiPpAiJg==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-dynamic-title": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-dynamic-title/-/babel-plugin-svg-dynamic-title-6.5.1.tgz",
      "integrity": "sha512-FwOEi0Il72iAzlkaHrlemVurgSQRDFbk0OC8dSvD5fSBPHltNh7JtLsxmZUhjYBZo2PpcU/RJvvi6Q0l7O7ogw==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-em-dimensions": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-em-dimensions/-/babel-plugin-svg-em-dimensions-6.5.1.tgz",
      "integrity": "sha512-gWGsiwjb4tw+ITOJ86ndY/DZZ6cuXMNE/SjcDRg+HLuCmwpcjOktwRF9WgAiycTqJD/QXqL2f8IzE2Rzh7aVXA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-react-native-svg": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-react-native-svg/-/babel-plugin-transform-react-native-svg-6.5.1.tgz",
      "integrity": "sha512-2jT3nTayyYP7kI6aGutkyfJ7UMGtuguD72OjeGLwVNyfPRBD8zQthlvL+fAbAKk5n9ZNcvFkp/b1lZ7VsYqVJg==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-svg-component": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-svg-component/-/babel-plugin-transform-svg-component-6.5.1.tgz",
      "integrity": "sha512-a1p6LF5Jt33O3rZoVRBqdxL350oge54iZWHNI6LJB5tQ7EelvD/Mb1mfBiZNAan0dt4i3VArkFRjA4iObuNykQ==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-preset": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-preset/-/babel-preset-6.5.1.tgz",
      "integrity": "sha512-6127fvO/FF2oi5EzSQOAjo1LE3OtNVh11R+/8FXa+mHx1ptAaS4cknIjnUA7e6j6fwGGJ17NzaTJFUwOV2zwCw==",
      "dependencies": {
        "@svgr/babel-plugin-add-jsx-attribute": "^6.5.1",
        "@svgr/babel-plugin-remove-jsx-attribute": "*",
        "@svgr/babel-plugin-remove-jsx-empty-expression": "*",
        "@svgr/babel-plugin-replace-jsx-attribute-value": "^6.5.1",
        "@svgr/babel-plugin-svg-dynamic-title": "^6.5.1",
        "@svgr/babel-plugin-svg-em-dimensions": "^6.5.1",
        "@svgr/babel-plugin-transform-react-native-svg": "^6.5.1",
        "@svgr/babel-plugin-transform-svg-component": "^6.5.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/core": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/core/-/core-6.5.1.tgz",
      "integrity": "sha512-/xdLSWxK5QkqG524ONSjvg3V/FkNyCv538OIBdQqPNaAta3AsXj/Bd2FbvR87yMbXO2hFSWiAe/Q6IkVPDw+mw==",
      "dependencies": {
        "@babel/core": "^7.19.6",
        "@svgr/babel-preset": "^6.5.1",
        "@svgr/plugin-jsx": "^6.5.1",
        "camelcase": "^6.2.0",
        "cosmiconfig": "^7.0.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/hast-util-to-babel-ast": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/hast-util-to-babel-ast/-/hast-util-to-babel-ast-6.5.1.tgz",
      "integrity": "sha512-1hnUxxjd83EAxbL4a0JDJoD3Dao3hmjvyvyEV8PzWmLK3B9m9NPlW7GKjFyoWE8nM7HnXzPcmmSyOW8yOddSXw==",
      "dependencies": {
        "@babel/types": "^7.20.0",
        "entities": "^4.4.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-jsx": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-jsx/-/plugin-jsx-6.5.1.tgz",
      "integrity": "sha512-+UdQxI3jgtSjCykNSlEMuy1jSRQlGC7pqBCPvkG/2dATdWo082zHTTK3uhnAju2/6XpE6B5mZ3z4Z8Ns01S8Gw==",
      "dependencies": {
        "@babel/core": "^7.19.6",
        "@svgr/babel-preset": "^6.5.1",
        "@svgr/hast-util-to-babel-ast": "^6.5.1",
        "svg-parser": "^2.0.4"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@svgr/core": "^6.0.0"
      }
    },
    "node_modules/@svgr/plugin-svgo": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-svgo/-/plugin-svgo-6.5.1.tgz",
      "integrity": "sha512-omvZKf8ixP9z6GWgwbtmP9qQMPX4ODXi+wzbVZgomNFsUIlHA1sf4fThdwTWSsZGgvGAG6yE+b/F5gWUkcZ/iQ==",
      "dependencies": {
        "cosmiconfig": "^7.0.1",
        "deepmerge": "^4.2.2",
        "svgo": "^2.8.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@svgr/core": "*"
      }
    },
    "node_modules/@svgr/webpack": {
      "version": "6.5.1",
      "resolved": "https://registry.npmjs.org/@svgr/webpack/-/webpack-6.5.1.tgz",
      "integrity": "sha512-cQ/AsnBkXPkEK8cLbv4Dm7JGXq2XrumKnL1dRpJD9rIO2fTIlJI9a1uCciYG1F2aUsox/hJQyNGbt3soDxSRkA==",
      "dependencies": {
        "@babel/core": "^7.19.6",
        "@babel/plugin-transform-react-constant-elements": "^7.18.12",
        "@babel/preset-env": "^7.19.4",
        "@babel/preset-react": "^7.18.6",
        "@babel/preset-typescript": "^7.18.6",
        "@svgr/core": "^6.5.1",
        "@svgr/plugin-jsx": "^6.5.1",
        "@svgr/plugin-svgo": "^6.5.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@szmarczak/http-timer": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
      "dependencies": {
        "defer-to-connect": "^1.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@trysound/sax": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@trysound/sax/-/sax-0.2.0.tgz",
      "integrity": "sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/bonjour": {
      "version": "3.5.10",
      "resolved": "https://registry.npmjs.org/@types/bonjour/-/bonjour-3.5.10.tgz",
      "integrity": "sha512-p7ienRMiS41Nu2/igbJxxLDWrSZ0WxM8UQgCeO9KhoVF7cOVFkrKsiDr1EsJIla8vV3oEEjGcz11jc5yimhzZw==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect-history-api-fallback": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/connect-history-api-fallback/-/connect-history-api-fallback-1.3.5.tgz",
      "integrity": "sha512-h8QJa8xSb1WD4fpKBDcATDNGXghFj6/3GRWG6dhmRcu0RX1Ubasur2Uvx5aeEwlf0MwblEC2bMzzMQntxnw/Cw==",
      "dependencies": {
        "@types/express-serve-static-core": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/eslint": {
      "version": "8.4.10",
      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-8.4.10.tgz",
      "integrity": "sha512-Sl/HOqN8NKPmhWo2VBEPm0nvHnu2LL3v9vKo8MEq0EtbJ4eVzGPl41VNPvn5E1i5poMk4/XD8UriLHpJvEP/Nw==",
      "dependencies": {
        "@types/estree": "*",
        "@types/json-schema": "*"
      }
    },
    "node_modules/@types/eslint-scope": {
      "version": "3.7.4",
      "resolved": "https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.4.tgz",
      "integrity": "sha512-9K4zoImiZc3HlIp6AVUDE4CWYx22a+lhSZMYNpbjW04+YF0KWj4pJXnEMjdnFTiQibFFmElcsasJXDbdI/EPhA==",
      "dependencies": {
        "@types/eslint": "*",
        "@types/estree": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "0.0.51",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.51.tgz",
      "integrity": "sha512-CuPgU6f3eT/XgKKPqKd/gLZV1Xmvf1a2R5POBOGQa6uv82xpls89HU5zKeVoyR8XzHd1RGNOlQlvUe3CFkjWNQ=="
    },
    "node_modules/@types/express": {
      "version": "4.17.15",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.15.tgz",
      "integrity": "sha512-Yv0k4bXGOH+8a+7bELd2PqHQsuiANB+A8a4gnQrkRWzrkKlb6KHaVvyXhqs04sVW/OWlbPyYxRgYlIXLfrufMQ==",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.31",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.17.31",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.31.tgz",
      "integrity": "sha512-DxMhY+NAsTwMMFHBTtJFNp5qiHKJ7TeqOo23zVEM9alT1Ml27Q3xcTH0xwxn7Q0BbMcVEJOs/7aQtUWupUQN3Q==",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*"
      }
    },
    "node_modules/@types/hast": {
      "version": "2.3.4",
      "resolved": "https://registry.npmjs.org/@types/hast/-/hast-2.3.4.tgz",
      "integrity": "sha512-wLEm0QvaoawEDoTRwzTXp4b4jpwiJDvR5KMnFnVodm3scufTlBOWRD6N1OBf9TZMhjlNsSfcO5V+7AF4+Vy+9g==",
      "dependencies": {
        "@types/unist": "*"
      }
    },
    "node_modules/@types/history": {
      "version": "4.7.11",
      "resolved": "https://registry.npmjs.org/@types/history/-/history-4.7.11.tgz",
      "integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA=="
    },
    "node_modules/@types/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/@types/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-oh/6byDPnL1zeNXFrDXFLyZjkr1MsBG667IM792caf1L2UPOOMf65NFzjUH/ltyfwjAGfs1rsX1eftK0jC/KIg=="
    },
    "node_modules/@types/http-proxy": {
      "version": "1.17.9",
      "resolved": "https://registry.npmjs.org/@types/http-proxy/-/http-proxy-1.17.9.tgz",
      "integrity": "sha512-QsbSjA/fSk7xB+UXlCT3wHBy5ai9wOcNDWwZAtud+jXhwOM3l+EYZh8Lng4+/6n8uar0J7xILzqftJdJ/Wdfkw==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.11",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.11.tgz",
      "integrity": "sha512-wOuvG1SN4Us4rez+tylwwwCV1psiNVOkJeM3AUWUNWg/jDQY2+HE/444y5gc+jBmRqASOm2Oeh5c1axHobwRKQ=="
    },
    "node_modules/@types/mdast": {
      "version": "3.0.10",
      "resolved": "https://registry.npmjs.org/@types/mdast/-/mdast-3.0.10.tgz",
      "integrity": "sha512-W864tg/Osz1+9f4lrGTZpCSO5/z4608eUp19tbozkq2HJK6i3z1kT0H9tlADXuYIb1YYOBByU4Jsqkk75q48qA==",
      "dependencies": {
        "@types/unist": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-3.0.1.tgz",
      "integrity": "sha512-Y4XFY5VJAuw0FgAqPNd6NNoV44jbq9Bz2L7Rh/J6jLTiHBSBJa9fxqQIvkIld4GsoDOcCbvzOUAbLPsSKKg+uA=="
    },
    "node_modules/@types/node": {
      "version": "18.11.17",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.11.17.tgz",
      "integrity": "sha512-HJSUJmni4BeDHhfzn6nF0sVmd1SMezP7/4F0Lq+aXzmp2xm9O7WXrUtHW/CHlYVtZUbByEvWidHqRtcJXGF2Ng=="
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.0.tgz",
      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
    },
    "node_modules/@types/parse5": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/@types/parse5/-/parse5-5.0.3.tgz",
      "integrity": "sha512-kUNnecmtkunAoQ3CnjmMkzNU/gtxG8guhi+Fk2U/kOpIKjIMKnXGp4IJCgQJrXSgMsWYimYG4TGjz/UzbGEBTw=="
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.5",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
      "integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w=="
    },
    "node_modules/@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw=="
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw=="
    },
    "node_modules/@types/react": {
      "version": "18.0.26",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.0.26.tgz",
      "integrity": "sha512-hCR3PJQsAIXyxhTNSiDFY//LhnMZWpNNr5etoCqx/iUfGc5gXWtQR2Phl908jVR6uPXacojQWTg4qRpkxTuGug==",
      "dependencies": {
        "@types/prop-types": "*",
        "@types/scheduler": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-router": {
      "version": "5.1.20",
      "resolved": "https://registry.npmjs.org/@types/react-router/-/react-router-5.1.20.tgz",
      "integrity": "sha512-jGjmu/ZqS7FjSH6owMcD5qpq19+1RS9DeVRqfl1FeBMxTDQAGwlMWOcs52NDoXaNKyG3d1cYQFMs9rCrb88o9Q==",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*"
      }
    },
    "node_modules/@types/react-router-config": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/@types/react-router-config/-/react-router-config-5.0.6.tgz",
      "integrity": "sha512-db1mx37a1EJDf1XeX8jJN7R3PZABmJQXR8r28yUjVMFSjkmnQo6X6pOEEmNl+Tp2gYQOGPdYbFIipBtdElZ3Yg==",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*",
        "@types/react-router": "*"
      }
    },
    "node_modules/@types/react-router-dom": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/@types/react-router-dom/-/react-router-dom-5.3.3.tgz",
      "integrity": "sha512-kpqnYK4wcdm5UaWI3fLcELopqLrHgLqNsdpHauzlQktfkHL3npOSwtj1Uz9oKBAzs7lFtVkV8j83voAz2D8fhw==",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*",
        "@types/react-router": "*"
      }
    },
    "node_modules/@types/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@types/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA=="
    },
    "node_modules/@types/sax": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/sax/-/sax-1.2.4.tgz",
      "integrity": "sha512-pSAff4IAxJjfAXUG6tFkO7dsSbTmf8CtUpfhhZ5VhkRpC4628tJhh3+V6H1E+/Gs9piSzYKT5yzHO5M4GG9jkw==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/scheduler": {
      "version": "0.16.2",
      "resolved": "https://registry.npmjs.org/@types/scheduler/-/scheduler-0.16.2.tgz",
      "integrity": "sha512-hppQEBDmlwhFAXKJX2KnWLYu5yMfi91yazPb2l+lbJiwW+wdo1gNeRA+3RgNSO39WYX2euey41KEwnqesU2Jew=="
    },
    "node_modules/@types/serve-index": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/@types/serve-index/-/serve-index-1.9.1.tgz",
      "integrity": "sha512-d/Hs3nWDxNL2xAczmOVZNj92YZCS6RGxfBPjKzuu/XirCgXdpKEb88dYNbrYGint6IVWLNP+yonwVAuRC0T2Dg==",
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-z5xyF6uh8CbjAu9760KDKsH2FcDxZ2tFCsA4HIMWE6IkiYMXfVoa+4f9KX+FN0ZLsaMw1WNG2ETLA6N+/YA+cg==",
      "dependencies": {
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/sockjs": {
      "version": "0.3.33",
      "resolved": "https://registry.npmjs.org/@types/sockjs/-/sockjs-0.3.33.tgz",
      "integrity": "sha512-f0KEEe05NvUnat+boPTZ0dgaLZ4SfSouXUgv5noUiefG2ajgKjmETo9ZJyuqsl7dfl2aHlLJUiki6B4ZYldiiw==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/unist": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/unist/-/unist-2.0.6.tgz",
      "integrity": "sha512-PBjIUxZHOuj0R15/xuwJYjFi+KZdNFrehocChv4g5hu6aFroHue8m0lBP0POdK2nKzbw0cgV1mws8+V/JAcEkQ=="
    },
    "node_modules/@types/ws": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.5.3.tgz",
      "integrity": "sha512-6YOoWjruKj1uLf3INHH7D3qTXwFfEsg1kf3c0uDdSBJwfa/llkwIjrAGV7j7mVgGNbzTQ3HiHKKDXl6bJPD97w==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "17.0.17",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.17.tgz",
      "integrity": "sha512-72bWxFKTK6uwWJAVT+3rF6Jo6RTojiJ27FQo8Rf60AL+VZbzoVPnMFhKsUnbjR8A3BTCYQ7Mv3hnl8T0A+CX9g==",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "node_modules/@webassemblyjs/ast": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.11.1.tgz",
      "integrity": "sha512-ukBh14qFLjxTQNTXocdyksN5QdM28S1CxHt2rdskFyL+xFV7VremuBLVbmCePj+URalXBENx/9Lm7lnhihtCSw==",
      "dependencies": {
        "@webassemblyjs/helper-numbers": "1.11.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.1"
      }
    },
    "node_modules/@webassemblyjs/floating-point-hex-parser": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.11.1.tgz",
      "integrity": "sha512-iGRfyc5Bq+NnNuX8b5hwBrRjzf0ocrJPI6GWFodBFzmFnyvrQ83SHKhmilCU/8Jv67i4GJZBMhEzltxzcNagtQ=="
    },
    "node_modules/@webassemblyjs/helper-api-error": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.11.1.tgz",
      "integrity": "sha512-RlhS8CBCXfRUR/cwo2ho9bkheSXG0+NwooXcc3PAILALf2QLdFyj7KGsKRbVc95hZnhnERon4kW/D3SZpp6Tcg=="
    },
    "node_modules/@webassemblyjs/helper-buffer": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.11.1.tgz",
      "integrity": "sha512-gwikF65aDNeeXa8JxXa2BAk+REjSyhrNC9ZwdT0f8jc4dQQeDQ7G4m0f2QCLPJiMTTO6wfDmRmj/pW0PsUvIcA=="
    },
    "node_modules/@webassemblyjs/helper-numbers": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.11.1.tgz",
      "integrity": "sha512-vDkbxiB8zfnPdNK9Rajcey5C0w+QJugEglN0of+kmO8l7lDb77AnlKYQF7aarZuCrv+l0UvqL+68gSDr3k9LPQ==",
      "dependencies": {
        "@webassemblyjs/floating-point-hex-parser": "1.11.1",
        "@webassemblyjs/helper-api-error": "1.11.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/helper-wasm-bytecode": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.11.1.tgz",
      "integrity": "sha512-PvpoOGiJwXeTrSf/qfudJhwlvDQxFgelbMqtq52WWiXC6Xgg1IREdngmPN3bs4RoO83PnL/nFrxucXj1+BX62Q=="
    },
    "node_modules/@webassemblyjs/helper-wasm-section": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.11.1.tgz",
      "integrity": "sha512-10P9No29rYX1j7F3EVPX3JvGPQPae+AomuSTPiF9eBQeChHI6iqjMIwR9JmOJXwpnn/oVGDk7I5IlskuMwU/pg==",
      "dependencies": {
        "@webassemblyjs/ast": "1.11.1",
        "@webassemblyjs/helper-buffer": "1.11.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.1",
        "@webassemblyjs/wasm-gen": "1.11.1"
      }
    },
    "node_modules/@webassemblyjs/ieee754": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.11.1.tgz",
      "integrity": "sha512-hJ87QIPtAMKbFq6CGTkZYJivEwZDbQUgYd3qKSadTNOhVY7p+gfP6Sr0lLRVTaG1JjFj+r3YchoqRYxNH3M0GQ==",
      "dependencies": {
        "@xtuc/ieee754": "^1.2.0"
      }
    },
    "node_modules/@webassemblyjs/leb128": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.11.1.tgz",
      "integrity": "sha512-BJ2P0hNZ0u+Th1YZXJpzW6miwqQUGcIHT1G/sf72gLVD9DZ5AdYTqPNbHZh6K1M5VmKvFXwGSWZADz+qBWxeRw==",
      "dependencies": {
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/utf8": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.11.1.tgz",
      "integrity": "sha512-9kqcxAEdMhiwQkHpkNiorZzqpGrodQQ2IGrHHxCy+Ozng0ofyMA0lTqiLkVs1uzTRejX+/O0EOT7KxqVPuXosQ=="
    },
    "node_modules/@webassemblyjs/wasm-edit": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.11.1.tgz",
      "integrity": "sha512-g+RsupUC1aTHfR8CDgnsVRVZFJqdkFHpsHMfJuWQzWU3tvnLC07UqHICfP+4XyL2tnr1amvl1Sdp06TnYCmVkA==",
      "dependencies": {
        "@webassemblyjs/ast": "1.11.1",
        "@webassemblyjs/helper-buffer": "1.11.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.1",
        "@webassemblyjs/helper-wasm-section": "1.11.1",
        "@webassemblyjs/wasm-gen": "1.11.1",
        "@webassemblyjs/wasm-opt": "1.11.1",
        "@webassemblyjs/wasm-parser": "1.11.1",
        "@webassemblyjs/wast-printer": "1.11.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-gen": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.11.1.tgz",
      "integrity": "sha512-F7QqKXwwNlMmsulj6+O7r4mmtAlCWfO/0HdgOxSklZfQcDu0TpLiD1mRt/zF25Bk59FIjEuGAIyn5ei4yMfLhA==",
      "dependencies": {
        "@webassemblyjs/ast": "1.11.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.1",
        "@webassemblyjs/ieee754": "1.11.1",
        "@webassemblyjs/leb128": "1.11.1",
        "@webassemblyjs/utf8": "1.11.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-opt": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.11.1.tgz",
      "integrity": "sha512-VqnkNqnZlU5EB64pp1l7hdm3hmQw7Vgqa0KF/KCNO9sIpI6Fk6brDEiX+iCOYrvMuBWDws0NkTOxYEb85XQHHw==",
      "dependencies": {
        "@webassemblyjs/ast": "1.11.1",
        "@webassemblyjs/helper-buffer": "1.11.1",
        "@webassemblyjs/wasm-gen": "1.11.1",
        "@webassemblyjs/wasm-parser": "1.11.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-parser": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.11.1.tgz",
      "integrity": "sha512-rrBujw+dJu32gYB7/Lup6UhdkPx9S9SnobZzRVL7VcBH9Bt9bCBLEuX/YXOOtBsOZ4NQrRykKhffRWHvigQvOA==",
      "dependencies": {
        "@webassemblyjs/ast": "1.11.1",
        "@webassemblyjs/helper-api-error": "1.11.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.1",
        "@webassemblyjs/ieee754": "1.11.1",
        "@webassemblyjs/leb128": "1.11.1",
        "@webassemblyjs/utf8": "1.11.1"
      }
    },
    "node_modules/@webassemblyjs/wast-printer": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.11.1.tgz",
      "integrity": "sha512-IQboUWM4eKzWW+N/jij2sRatKMh99QEelo3Eb2q0qXkvPRISAj8Qxtmw5itwqK+TTkBuUIE45AxYPToqPtL5gg==",
      "dependencies": {
        "@webassemblyjs/ast": "1.11.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@xtuc/ieee754": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz",
      "integrity": "sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA=="
    },
    "node_modules/@xtuc/long": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz",
      "integrity": "sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ=="
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/accepts/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/accepts/node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.1.tgz",
      "integrity": "sha512-7zFpHzhnqYKrkYdUjF1HI1bzd0VygEGX8lFk4k5zVMqHEoES+P+7TKI+EvLO9WVMJ8eekdO0aDEK044xTXwPPA==",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-import-assertions": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/acorn-import-assertions/-/acorn-import-assertions-1.8.0.tgz",
      "integrity": "sha512-m7VZ3jwz4eK6A4Vtt8Ew1/mNbP24u0FhdyfA7fSvnJR6LMdfOYnmuIrrJAgrYfYJ10F/otaHTtrtrtmHdMNzEw==",
      "peerDependencies": {
        "acorn": "^8"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/address": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/address/-/address-1.2.2.tgz",
      "integrity": "sha512-4B/qKCfeE/ODUaAUpSwfzazo5x29WD4r3vXiWsB7I2mSDAihwEqKO+g8GELZUQSSAo5e1XTYh3ZVfLyxBc12nA==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/aggregate-error": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
      "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
      "dependencies": {
        "clean-stack": "^2.0.0",
        "indent-string": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ajv-formats/node_modules/ajv": {
      "version": "8.11.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.11.2.tgz",
      "integrity": "sha512-E4bfmKAhGiSTvMfL1Myyycaub+cUEU2/IvpylXkUu7CHBkBj1f/ikdzbD7YQ6FKUbixDxeYvB/xY4fvyroDlQg==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="
    },
    "node_modules/ajv-keywords": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
      "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==",
      "peerDependencies": {
        "ajv": "^6.9.1"
      }
    },
    "node_modules/algoliasearch": {
      "version": "4.14.3",
      "resolved": "https://registry.npmjs.org/algoliasearch/-/algoliasearch-4.14.3.tgz",
      "integrity": "sha512-GZTEuxzfWbP/vr7ZJfGzIl8fOsoxN916Z6FY2Egc9q2TmZ6hvq5KfAxY89pPW01oW/2HDEKA8d30f9iAH9eXYg==",
      "dependencies": {
        "@algolia/cache-browser-local-storage": "4.14.3",
        "@algolia/cache-common": "4.14.3",
        "@algolia/cache-in-memory": "4.14.3",
        "@algolia/client-account": "4.14.3",
        "@algolia/client-analytics": "4.14.3",
        "@algolia/client-common": "4.14.3",
        "@algolia/client-personalization": "4.14.3",
        "@algolia/client-search": "4.14.3",
        "@algolia/logger-common": "4.14.3",
        "@algolia/logger-console": "4.14.3",
        "@algolia/requester-browser-xhr": "4.14.3",
        "@algolia/requester-common": "4.14.3",
        "@algolia/requester-node-http": "4.14.3",
        "@algolia/transporter": "4.14.3"
      }
    },
    "node_modules/algoliasearch-helper": {
      "version": "3.11.1",
      "resolved": "https://registry.npmjs.org/algoliasearch-helper/-/algoliasearch-helper-3.11.1.tgz",
      "integrity": "sha512-mvsPN3eK4E0bZG0/WlWJjeqe/bUD2KOEVOl0GyL/TGXn6wcpZU8NOuztGHCUKXkyg5gq6YzUakVTmnmSSO5Yiw==",
      "dependencies": {
        "@algolia/events": "^4.0.1"
      },
      "peerDependencies": {
        "algoliasearch": ">= 3.1 < 6"
      }
    },
    "node_modules/ansi-align": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.1.tgz",
      "integrity": "sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==",
      "dependencies": {
        "string-width": "^4.1.0"
      }
    },
    "node_modules/ansi-align/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/ansi-align/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-html-community": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ansi-html-community/-/ansi-html-community-0.0.8.tgz",
      "integrity": "sha512-1APHAyr3+PCamwNw3bXCPp4HFLONZt/yIH0sZp0/469KWNTEy+qN5jQ3GVX6DMZ1UXAi34yVwtTeaG/HpBuuzw==",
      "engines": [
        "node >= 0.8.0"
      ],
      "bin": {
        "ansi-html": "bin/ansi-html"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg=="
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q=="
    },
    "node_modules/array-flatten": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-2.1.2.tgz",
      "integrity": "sha512-hNfzcOV8W4NdualtqBFPyVO+54DSJuZGY9qT4pRroB6S9e3iiido2ISIC5h9R2sPJ8H3FHCIiEnsv1lPXO3KtQ=="
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA=="
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/autoprefixer": {
      "version": "10.4.13",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.13.tgz",
      "integrity": "sha512-49vKpMqcZYsJjwotvt4+h/BCjJVnhGwcLpDt5xkcaOG3eLrG/HUYLagrihYsQ+qrIBgIzX1Rw7a6L8I/ZA1Atg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        }
      ],
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-lite": "^1.0.30001426",
        "fraction.js": "^4.2.0",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.0",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/axios": {
      "version": "0.25.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.25.0.tgz",
      "integrity": "sha512-cD8FOb0tRH3uuEe6+evtAbgJtfxr7ly3fQjYcMcuPlgkwVS9xboaVIpcDV+cYQe+yGykgwZCs1pzjntcGa6l5g==",
      "dependencies": {
        "follow-redirects": "^1.14.7"
      }
    },
    "node_modules/babel-loader": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/babel-loader/-/babel-loader-8.3.0.tgz",
      "integrity": "sha512-H8SvsMF+m9t15HNLMipppzkC+Y2Yq+v3SonZyU70RBL/h1gxPkH08Ot8pEE9Z4Kd+czyWJClmFS8qzIP9OZ04Q==",
      "dependencies": {
        "find-cache-dir": "^3.3.1",
        "loader-utils": "^2.0.0",
        "make-dir": "^3.1.0",
        "schema-utils": "^2.6.5"
      },
      "engines": {
        "node": ">= 8.9"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "webpack": ">=2"
      }
    },
    "node_modules/babel-plugin-apply-mdx-type-prop": {
      "version": "1.6.22",
      "resolved": "https://registry.npmjs.org/babel-plugin-apply-mdx-type-prop/-/babel-plugin-apply-mdx-type-prop-1.6.22.tgz",
      "integrity": "sha512-VefL+8o+F/DfK24lPZMtJctrCVOfgbqLAGZSkxwhazQv4VxPg3Za/i40fu22KR2m8eEda+IfSOlPLUSIiLcnCQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "7.10.4",
        "@mdx-js/util": "1.6.22"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      },
      "peerDependencies": {
        "@babel/core": "^7.11.6"
      }
    },
    "node_modules/babel-plugin-apply-mdx-type-prop/node_modules/@babel/helper-plugin-utils": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.10.4.tgz",
      "integrity": "sha512-O4KCvQA6lLiMU9l2eawBPMf1xPP8xPfB3iEQw150hOVTqj/rfXz0ThTb4HEzqQfs2Bmo5Ay8BzxfzVtBrr9dVg=="
    },
    "node_modules/babel-plugin-dynamic-import-node": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/babel-plugin-dynamic-import-node/-/babel-plugin-dynamic-import-node-2.3.3.tgz",
      "integrity": "sha512-jZVI+s9Zg3IqA/kdi0i6UDCybUI3aSBLnglhYbSSjKlV7yF1F/5LWv8MakQmvYpnbJDS6fcBL2KzHSxNCMtWSQ==",
      "dependencies": {
        "object.assign": "^4.1.0"
      }
    },
    "node_modules/babel-plugin-extract-import-names": {
      "version": "1.6.22",
      "resolved": "https://registry.npmjs.org/babel-plugin-extract-import-names/-/babel-plugin-extract-import-names-1.6.22.tgz",
      "integrity": "sha512-yJ9BsJaISua7d8zNT7oRG1ZLBJCIdZ4PZqmH8qa9N5AK01ifk3fnkc98AXhtzE7UkfCsEumvoQWgoYLhOnJ7jQ==",
      "dependencies": {
        "@babel/helper-plugin-utils": "7.10.4"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/babel-plugin-extract-import-names/node_modules/@babel/helper-plugin-utils": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.10.4.tgz",
      "integrity": "sha512-O4KCvQA6lLiMU9l2eawBPMf1xPP8xPfB3iEQw150hOVTqj/rfXz0ThTb4HEzqQfs2Bmo5Ay8BzxfzVtBrr9dVg=="
    },
    "node_modules/babel-plugin-polyfill-corejs2": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.3.3.tgz",
      "integrity": "sha512-8hOdmFYFSZhqg2C/JgLUQ+t52o5nirNwaWM2B9LWteozwIvM14VSwdsCAUET10qT+kmySAlseadmfeeSWFCy+Q==",
      "dependencies": {
        "@babel/compat-data": "^7.17.7",
        "@babel/helper-define-polyfill-provider": "^0.3.3",
        "semver": "^6.1.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs3": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.6.0.tgz",
      "integrity": "sha512-+eHqR6OPcBhJOGgsIar7xoAB1GcSwVUA3XjAd7HJNzOXT4wv6/H7KIdA/Nc60cvUlDbKApmqNvD1B1bzOt4nyA==",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.3.3",
        "core-js-compat": "^3.25.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/babel-plugin-polyfill-regenerator": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.4.1.tgz",
      "integrity": "sha512-NtQGmyQDXjQqQ+IzRkBVwEOz9lQ4zxAQZgoAYEtU9dJjnl1Oc98qnN7jcp+bE7O7aYzVpavXE3/VKXNzUbh7aw==",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.3.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/bail": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/bail/-/bail-1.0.5.tgz",
      "integrity": "sha512-xFbRxM1tahm08yHBP16MMjVUAvDaBMD38zsM9EMAUN61omwLmKlOpB/Zku5QkjZ8TZ4vn53pj+t518cH0S03RQ==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/base16": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/base16/-/base16-1.0.0.tgz",
      "integrity": "sha512-pNdYkNPiJUnEhnfXV56+sQy8+AaPcG3POZAUnwr4EeqCUZFz4u2PePbo3e5Gj4ziYPCWGUZT9RHisvJKnwFuBQ=="
    },
    "node_modules/batch": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/batch/-/batch-0.6.1.tgz",
      "integrity": "sha512-x+VAiMRL6UPkx+kudNvxTl6hB2XNNCG2r+7wixVfIYwu/2HKRXimwQyaumLjMveWvT2Hkd/cAJw+QBMfJ/EKVw=="
    },
    "node_modules/big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/bonjour-service": {
      "version": "1.0.14",
      "resolved": "https://registry.npmjs.org/bonjour-service/-/bonjour-service-1.0.14.tgz",
      "integrity": "sha512-HIMbgLnk1Vqvs6B4Wq5ep7mxvj9sGz5d1JJyDNSGNIdA/w2MCz6GTjWTdjqOJV1bEPj+6IkxDvWNFKEBxNt4kQ==",
      "dependencies": {
        "array-flatten": "^2.1.2",
        "dns-equal": "^1.0.0",
        "fast-deep-equal": "^3.1.3",
        "multicast-dns": "^7.2.5"
      }
    },
    "node_modules/boolbase": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
      "integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww=="
    },
    "node_modules/boxen": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-6.2.1.tgz",
      "integrity": "sha512-H4PEsJXfFI/Pt8sjDWbHlQPx4zL/bvSQjcilJmaulGt5mLDorHOHpmdXAJcBcmru7PhYSp/cDMWRko4ZUMFkSw==",
      "dependencies": {
        "ansi-align": "^3.0.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.1.2",
        "cli-boxes": "^3.0.0",
        "string-width": "^5.0.1",
        "type-fest": "^2.5.0",
        "widest-line": "^4.0.1",
        "wrap-ansi": "^8.0.1"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.21.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.4.tgz",
      "integrity": "sha512-CBHJJdDmgjl3daYjN5Cp5kbTf1mUhZoS+beLklHIvkOWscs83YAhLlF3Wsh/lciQYAcbBJgTOD44VtG31ZM4Hw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "dependencies": {
        "caniuse-lite": "^1.0.30001400",
        "electron-to-chromium": "^1.4.251",
        "node-releases": "^2.0.6",
        "update-browserslist-db": "^1.0.9"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
    },
    "node_modules/bytes": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
      "integrity": "sha512-pMhOfFDPiv9t5jjIXkHosWmkSyQbvsgEVNkz0ERHbuLh2T/7j4Mqqpz523Fe8MVY89KC6Sh/QfS2sM+SjgFDcw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/cacheable-request": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^3.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^4.1.0",
        "responselike": "^1.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cacheable-request/node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cacheable-request/node_modules/lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cacheable-request/node_modules/normalize-url": {
      "version": "4.5.1",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.1.tgz",
      "integrity": "sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camel-case": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/camel-case/-/camel-case-4.1.2.tgz",
      "integrity": "sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==",
      "dependencies": {
        "pascal-case": "^3.1.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-api": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/caniuse-api/-/caniuse-api-3.0.0.tgz",
      "integrity": "sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==",
      "dependencies": {
        "browserslist": "^4.0.0",
        "caniuse-lite": "^1.0.0",
        "lodash.memoize": "^4.1.2",
        "lodash.uniq": "^4.5.0"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001441",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001441.tgz",
      "integrity": "sha512-OyxRR4Vof59I3yGWXws6i908EtGbMzVUi3ganaZQHmydk1iwDhRnvaPG2WaR0KcqrDFKrxVZHULT396LEPhXfg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        }
      ]
    },
    "node_modules/ccount": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/ccount/-/ccount-1.1.0.tgz",
      "integrity": "sha512-vlNK021QdI7PNeiUh/lKkC/mNHHfV0m/Ad5JoI0TYtlBnJAslM/JIkm/tGC88bkLIwO6OQ5uV6ztS6kVAtCDlg==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/character-entities": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/character-entities/-/character-entities-1.2.4.tgz",
      "integrity": "sha512-iBMyeEHxfVnIakwOuDXpVkc54HijNgCyQB2w0VfGQThle6NXn50zU6V/u+LDhxHcDUPojn6Kpga3PTAD8W1bQw==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/character-entities-legacy": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/character-entities-legacy/-/character-entities-legacy-1.1.4.tgz",
      "integrity": "sha512-3Xnr+7ZFS1uxeiUDvV02wQ+QDbc55o97tIV5zHScSPJpcLm/r0DFPcoY3tYRp+VZukxuMeKgXYmsXQHO05zQeA==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/character-reference-invalid": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/character-reference-invalid/-/character-reference-invalid-1.1.4.tgz",
      "integrity": "sha512-mKKUkUbhPpQlCOfIuZkvSEgktjPFIsZKRRbC6KWVEMvlzblj3i3asQv5ODsrwt0N3pHAEvjP8KTQPHkp0+6jOg==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/cheerio": {
      "version": "1.0.0-rc.12",
      "resolved": "https://registry.npmjs.org/cheerio/-/cheerio-1.0.0-rc.12.tgz",
      "integrity": "sha512-VqR8m68vM46BNnuZ5NtnGBKIE/DfN0cRIzg9n40EIq9NOv90ayxLBXA8fXC5gquFRGJSTRqBq25Jt2ECLR431Q==",
      "dependencies": {
        "cheerio-select": "^2.1.0",
        "dom-serializer": "^2.0.0",
        "domhandler": "^5.0.3",
        "domutils": "^3.0.1",
        "htmlparser2": "^8.0.1",
        "parse5": "^7.0.0",
        "parse5-htmlparser2-tree-adapter": "^7.0.0"
      },
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/cheerio?sponsor=1"
      }
    },
    "node_modules/cheerio-select": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/cheerio-select/-/cheerio-select-2.1.0.tgz",
      "integrity": "sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-select": "^5.1.0",
        "css-what": "^6.1.0",
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.3",
        "domutils": "^3.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.3.tgz",
      "integrity": "sha512-p3KULyQg4S7NIHixdwbGX+nFHkoBiA4YQmyWtjb8XngSKV124nJmRysgAeujbUVb15vh+RvFUfCPqU7rXk+hZg==",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/ci-info": {
      "version": "3.7.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.7.0.tgz",
      "integrity": "sha512-2CpRNYmImPx+RXKLq6jko/L07phmS9I02TyqkcNU20GCF/GgaWvc58hPtjxDX8lPpkdwc9sNh72V9k00S7ezog==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/clean-css": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-5.3.1.tgz",
      "integrity": "sha512-lCr8OHhiWCTw4v8POJovCoh4T7I9U11yVsPjMWWnnMmp9ZowCxyad1Pathle/9HjaDp+fdQKjO9fQydE6RHTZg==",
      "dependencies": {
        "source-map": "~0.6.0"
      },
      "engines": {
        "node": ">= 10.0"
      }
    },
    "node_modules/clean-stack": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
      "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/cli-boxes": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-3.0.0.tgz",
      "integrity": "sha512-/lzGpEWL/8PfI0BmBOPRwp0c/wFNX1RdUML3jK/RcSBA9T8mZDdQpqYBKtCFTOfQbwPqWEOpjqW+Fnayc0969g==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-table3": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/cli-table3/-/cli-table3-0.6.3.tgz",
      "integrity": "sha512-w5Jac5SykAeZJKntOxJCrm63Eg5/4dhMWIcuTbo9rpE+brgaSZo0RuNJZeOyMgsUdhDeojvgyQLmjI+K50ZGyg==",
      "dependencies": {
        "string-width": "^4.2.0"
      },
      "engines": {
        "node": "10.* || >= 12.*"
      },
      "optionalDependencies": {
        "@colors/colors": "1.5.0"
      }
    },
    "node_modules/cli-table3/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/cli-table3/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/clone-deep": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz",
      "integrity": "sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==",
      "dependencies": {
        "is-plain-object": "^2.0.4",
        "kind-of": "^6.0.2",
        "shallow-clone": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/clone-response": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
      "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/clsx": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
      "integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/collapse-white-space": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/collapse-white-space/-/collapse-white-space-1.0.6.tgz",
      "integrity": "sha512-jEovNnrhMuqyCcjfEJA56v0Xq8SkIoPKDyaHahwo3POf4qcSXqMYuwNcOTzp74vTsR9Tn08z4MxWqAhcekogkQ==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/colord": {
      "version": "2.9.3",
      "resolved": "https://registry.npmjs.org/colord/-/colord-2.9.3.tgz",
      "integrity": "sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw=="
    },
    "node_modules/colorette": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.19.tgz",
      "integrity": "sha512-3tlv/dIP7FWvj3BsbHrGLJ6l/oKh1O3TcgBqMn+yyCagOxc23fyzDS6HypQbgxWbkpDnf52p1LuR4eWDQ/K9WQ=="
    },
    "node_modules/combine-promises": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/combine-promises/-/combine-promises-1.1.0.tgz",
      "integrity": "sha512-ZI9jvcLDxqwaXEixOhArm3r7ReIivsXkpbyEWyeOhzz1QS0iSgBPnWvEqvIQtYyamGCYA88gFhmUrs9hrrQ0pg==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/comma-separated-tokens": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/comma-separated-tokens/-/comma-separated-tokens-1.0.8.tgz",
      "integrity": "sha512-GHuDRO12Sypu2cV70d1dkA2EUmXHgntrzbpvOB+Qy+49ypNfGgFQIC2fhhXbnyrJRynDCAARsT7Ou0M6hirpfw==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/commander": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-5.1.0.tgz",
      "integrity": "sha512-P0CysNDQ7rtVw4QIQtm+MRxV66vKFSvlsQvGYXZWR3qFU0jlMKHZZZgw8e+8DSah4UDKMqnknRDQz+xuQXQ/Zg==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/commondir": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg=="
    },
    "node_modules/compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "dependencies": {
        "mime-db": ">= 1.43.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/compressible/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/compression": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/compression/-/compression-1.7.4.tgz",
      "integrity": "sha512-jaSIDzP9pZVS4ZfQ+TzvtiWhdpFhE2RDHz8QJkpX9SIpLq88VueF5jJw6t+6CUQcAoA6t+x89MLrWAqpfDE8iQ==",
      "dependencies": {
        "accepts": "~1.3.5",
        "bytes": "3.0.0",
        "compressible": "~2.0.16",
        "debug": "2.6.9",
        "on-headers": "~1.0.2",
        "safe-buffer": "5.1.2",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/compression/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/compression/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/compression/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/configstore": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/configstore/-/configstore-5.0.1.tgz",
      "integrity": "sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==",
      "dependencies": {
        "dot-prop": "^5.2.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^3.0.0",
        "unique-string": "^2.0.0",
        "write-file-atomic": "^3.0.0",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/connect-history-api-fallback": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-2.0.0.tgz",
      "integrity": "sha512-U73+6lQFmfiNPrYbXqr6kZ1i1wiRqXnp2nhMsINseWXO8lDau0LGEffJ8kQi4EjLZympVgRdvqjAgiZ1tgzDDA==",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/consola": {
      "version": "2.15.3",
      "resolved": "https://registry.npmjs.org/consola/-/consola-2.15.3.tgz",
      "integrity": "sha512-9vAdYbHj6x2fLKC4+oPH0kFzY/orMZyG2Aj+kNylHxKGJ/Ed4dpNyAQYwJOdqO4zdM7XpVHmyejQDcQHrnuXbw=="
    },
    "node_modules/content-disposition": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz",
      "integrity": "sha512-kRGRZw3bLlFISDBgwTSA1TMBFN6J6GWDeubmDE3AF+3+yXL8hTWv8r5rkLbqYXY4RjPk/EzHnClI3zQf1cFmHA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A=="
    },
    "node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/copy-text-to-clipboard": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/copy-text-to-clipboard/-/copy-text-to-clipboard-3.0.1.tgz",
      "integrity": "sha512-rvVsHrpFcL4F2P8ihsoLdFHmd404+CMg71S756oRSeQgqk51U3kicGdnvfkrxva0xXH92SjGS62B0XIJsbh+9Q==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/copy-webpack-plugin": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-11.0.0.tgz",
      "integrity": "sha512-fX2MWpamkW0hZxMEg0+mYnA40LTosOSa5TqZ9GYIBzyJa9C3QUaMPSE2xAi/buNr8u89SfD9wHSQVBzrRa/SOQ==",
      "dependencies": {
        "fast-glob": "^3.2.11",
        "glob-parent": "^6.0.1",
        "globby": "^13.1.1",
        "normalize-path": "^3.0.0",
        "schema-utils": "^4.0.0",
        "serialize-javascript": "^6.0.0"
      },
      "engines": {
        "node": ">= 14.15.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      }
    },
    "node_modules/copy-webpack-plugin/node_modules/ajv": {
      "version": "8.11.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.11.2.tgz",
      "integrity": "sha512-E4bfmKAhGiSTvMfL1Myyycaub+cUEU2/IvpylXkUu7CHBkBj1f/ikdzbD7YQ6FKUbixDxeYvB/xY4fvyroDlQg==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/copy-webpack-plugin/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/copy-webpack-plugin/node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/copy-webpack-plugin/node_modules/globby": {
      "version": "13.1.3",
      "resolved": "https://registry.npmjs.org/globby/-/globby-13.1.3.tgz",
      "integrity": "sha512-8krCNHXvlCgHDpegPzleMq07yMYTO2sXKASmZmquEYWEmCx6J5UTRbp5RwMJkTJGtcQ44YpiUYUiN0b9mzy8Bw==",
      "dependencies": {
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.11",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/copy-webpack-plugin/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="
    },
    "node_modules/copy-webpack-plugin/node_modules/schema-utils": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.0.0.tgz",
      "integrity": "sha512-1edyXKgh6XnJsJSQ8mKWXnN/BVaIbFMLpouRUrXgVq7WYne5kw3MW7UPhO44uRXQSIpTSXoJbmrR2X0w9kUTyg==",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.8.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/copy-webpack-plugin/node_modules/slash": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
      "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/core-js": {
      "version": "3.27.0",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.27.0.tgz",
      "integrity": "sha512-wY6cKosevs430KRkHUIsvepDXHGjlXOZO3hYXNyqpD6JvB0X28aXyv0t1Y1vZMwE7SoKmtfa6IASHCPN52FwBQ==",
      "hasInstallScript": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-compat": {
      "version": "3.27.0",
      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.27.0.tgz",
      "integrity": "sha512-spN2H4E/wocMML7XtbKuqttHHM+zbF3bAdl9mT4/iyFaF33bowQGjxiWNWyvUJGH9F+hTgnhWziiLtwu3oC/Qg==",
      "dependencies": {
        "browserslist": "^4.21.4"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-pure": {
      "version": "3.27.0",
      "resolved": "https://registry.npmjs.org/core-js-pure/-/core-js-pure-3.27.0.tgz",
      "integrity": "sha512-fJml7FM6v1HI3Gkg5/Ifc/7Y2qXcJxaDwSROeZGAZfNykSTvUk94WT55TYzJ2lFHK0voSr/d4nOVChLuNCWNpA==",
      "hasInstallScript": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ=="
    },
    "node_modules/cosmiconfig": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/cross-fetch": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/cross-fetch/-/cross-fetch-3.1.5.tgz",
      "integrity": "sha512-lvb1SBsI0Z7GDwmuid+mU3kWVBwTVUbe7S0H52yaaAdQOXq2YktTCZdlAcNKFzE6QtRz0snpw9bNiPeOIkkQvw==",
      "dependencies": {
        "node-fetch": "2.6.7"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/css-declaration-sorter": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/css-declaration-sorter/-/css-declaration-sorter-6.3.1.tgz",
      "integrity": "sha512-fBffmak0bPAnyqc/HO8C3n2sHrp9wcqQz6ES9koRF2/mLOVAx9zIQ3Y7R29sYCteTPqMCwns4WYQoCX91Xl3+w==",
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.0.9"
      }
    },
    "node_modules/css-loader": {
      "version": "6.7.3",
      "resolved": "https://registry.npmjs.org/css-loader/-/css-loader-6.7.3.tgz",
      "integrity": "sha512-qhOH1KlBMnZP8FzRO6YCH9UHXQhVMcEGLyNdb7Hv2cpcmJbW0YrddO+tG1ab5nT41KpHIYGsbeHqxB9xPu1pKQ==",
      "dependencies": {
        "icss-utils": "^5.1.0",
        "postcss": "^8.4.19",
        "postcss-modules-extract-imports": "^3.0.0",
        "postcss-modules-local-by-default": "^4.0.0",
        "postcss-modules-scope": "^3.0.0",
        "postcss-modules-values": "^4.0.0",
        "postcss-value-parser": "^4.2.0",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/css-minimizer-webpack-plugin": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-4.2.2.tgz",
      "integrity": "sha512-s3Of/4jKfw1Hj9CxEO1E5oXhQAxlayuHO2y/ML+C6I9sQ7FdzfEV6QgMLN3vI+qFsjJGIAFLKtQK7t8BOXAIyA==",
      "dependencies": {
        "cssnano": "^5.1.8",
        "jest-worker": "^29.1.2",
        "postcss": "^8.4.17",
        "schema-utils": "^4.0.0",
        "serialize-javascript": "^6.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">= 14.15.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@parcel/css": {
          "optional": true
        },
        "@swc/css": {
          "optional": true
        },
        "clean-css": {
          "optional": true
        },
        "csso": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        }
      }
    },
    "node_modules/css-minimizer-webpack-plugin/node_modules/ajv": {
      "version": "8.11.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.11.2.tgz",
      "integrity": "sha512-E4bfmKAhGiSTvMfL1Myyycaub+cUEU2/IvpylXkUu7CHBkBj1f/ikdzbD7YQ6FKUbixDxeYvB/xY4fvyroDlQg==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/css-minimizer-webpack-plugin/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/css-minimizer-webpack-plugin/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="
    },
    "node_modules/css-minimizer-webpack-plugin/node_modules/schema-utils": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.0.0.tgz",
      "integrity": "sha512-1edyXKgh6XnJsJSQ8mKWXnN/BVaIbFMLpouRUrXgVq7WYne5kw3MW7UPhO44uRXQSIpTSXoJbmrR2X0w9kUTyg==",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.8.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/css-select": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-5.1.0.tgz",
      "integrity": "sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^6.1.0",
        "domhandler": "^5.0.2",
        "domutils": "^3.0.1",
        "nth-check": "^2.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/css-tree": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
      "integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
      "dependencies": {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/css-what": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.1.0.tgz",
      "integrity": "sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/cssnano": {
      "version": "5.1.14",
      "resolved": "https://registry.npmjs.org/cssnano/-/cssnano-5.1.14.tgz",
      "integrity": "sha512-Oou7ihiTocbKqi0J1bB+TRJIQX5RMR3JghA8hcWSw9mjBLQ5Y3RWqEDoYG3sRNlAbCIXpqMoZGbq5KDR3vdzgw==",
      "dependencies": {
        "cssnano-preset-default": "^5.2.13",
        "lilconfig": "^2.0.3",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/cssnano"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-preset-advanced": {
      "version": "5.3.9",
      "resolved": "https://registry.npmjs.org/cssnano-preset-advanced/-/cssnano-preset-advanced-5.3.9.tgz",
      "integrity": "sha512-njnh4pp1xCsibJcEHnWZb4EEzni0ePMqPuPNyuWT4Z+YeXmsgqNuTPIljXFEXhxGsWs9183JkXgHxc1TcsahIg==",
      "dependencies": {
        "autoprefixer": "^10.4.12",
        "cssnano-preset-default": "^5.2.13",
        "postcss-discard-unused": "^5.1.0",
        "postcss-merge-idents": "^5.1.1",
        "postcss-reduce-idents": "^5.2.0",
        "postcss-zindex": "^5.1.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-preset-default": {
      "version": "5.2.13",
      "resolved": "https://registry.npmjs.org/cssnano-preset-default/-/cssnano-preset-default-5.2.13.tgz",
      "integrity": "sha512-PX7sQ4Pb+UtOWuz8A1d+Rbi+WimBIxJTRyBdgGp1J75VU0r/HFQeLnMYgHiCAp6AR4rqrc7Y4R+1Rjk3KJz6DQ==",
      "dependencies": {
        "css-declaration-sorter": "^6.3.1",
        "cssnano-utils": "^3.1.0",
        "postcss-calc": "^8.2.3",
        "postcss-colormin": "^5.3.0",
        "postcss-convert-values": "^5.1.3",
        "postcss-discard-comments": "^5.1.2",
        "postcss-discard-duplicates": "^5.1.0",
        "postcss-discard-empty": "^5.1.1",
        "postcss-discard-overridden": "^5.1.0",
        "postcss-merge-longhand": "^5.1.7",
        "postcss-merge-rules": "^5.1.3",
        "postcss-minify-font-values": "^5.1.0",
        "postcss-minify-gradients": "^5.1.1",
        "postcss-minify-params": "^5.1.4",
        "postcss-minify-selectors": "^5.2.1",
        "postcss-normalize-charset": "^5.1.0",
        "postcss-normalize-display-values": "^5.1.0",
        "postcss-normalize-positions": "^5.1.1",
        "postcss-normalize-repeat-style": "^5.1.1",
        "postcss-normalize-string": "^5.1.0",
        "postcss-normalize-timing-functions": "^5.1.0",
        "postcss-normalize-unicode": "^5.1.1",
        "postcss-normalize-url": "^5.1.0",
        "postcss-normalize-whitespace": "^5.1.1",
        "postcss-ordered-values": "^5.1.3",
        "postcss-reduce-initial": "^5.1.1",
        "postcss-reduce-transforms": "^5.1.0",
        "postcss-svgo": "^5.1.0",
        "postcss-unique-selectors": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-utils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cssnano-utils/-/cssnano-utils-3.1.0.tgz",
      "integrity": "sha512-JQNR19/YZhz4psLX/rQ9M83e3z2Wf/HdJbryzte4a3NSuafyp9w/I4U+hx5C2S9g41qlstH7DEWnZaaj83OuEA==",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/csso": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/csso/-/csso-4.2.0.tgz",
      "integrity": "sha512-wvlcdIbf6pwKEk7vHj8/Bkc0B4ylXZruLvOgs9doS5eOsOpuodOV2zJChSpkp+pRpYQLQMeF04nr3Z68Sta9jA==",
      "dependencies": {
        "css-tree": "^1.1.2"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.1.tgz",
      "integrity": "sha512-DJR/VvkAvSZW9bTouZue2sSxDwdTN92uHjqeKVm+0dAqdfNykRzQ95tay8aXMBAAPpUiq4Qcug2L7neoRh2Egw=="
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decompress-response": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
      "integrity": "sha512-BzRPQuY1ip+qDonAOz42gRm/pg9F768C+npV/4JOsxRC2sq+Rlk+Q4ZCAsOhnIaMrgarILY+RMUIvMmmX1qAEA==",
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/deepmerge": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.2.2.tgz",
      "integrity": "sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/default-gateway": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/default-gateway/-/default-gateway-6.0.3.tgz",
      "integrity": "sha512-fwSOJsbbNzZ/CUFpqFBqYfYNLj1NbMPm8MMCIzHjC83iSJRBEGmDUxU+WP661BaBQImeC2yHwXtz+P/O9o+XEg==",
      "dependencies": {
        "execa": "^5.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/defer-to-connect": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ=="
    },
    "node_modules/define-lazy-prop": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz",
      "integrity": "sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/define-properties": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.4.tgz",
      "integrity": "sha512-uckOqKcfaVvtBdsVkdPv3XjveQJsNQqmhXgRi8uhvWWuPYZCNlzT8qAyblUgNoXdHdjMTzAqeGjAoli8f+bzPA==",
      "dependencies": {
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/del": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/del/-/del-6.1.1.tgz",
      "integrity": "sha512-ua8BhapfP0JUJKC/zV9yHHDW/rDoDxP4Zhn3AkA6/xT6gY7jYXJiaeyBZznYVujhZZET+UgcbZiQ7sN3WqcImg==",
      "dependencies": {
        "globby": "^11.0.1",
        "graceful-fs": "^4.2.4",
        "is-glob": "^4.0.1",
        "is-path-cwd": "^2.2.0",
        "is-path-inside": "^3.0.2",
        "p-map": "^4.0.0",
        "rimraf": "^3.0.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detab": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detab/-/detab-2.0.4.tgz",
      "integrity": "sha512-8zdsQA5bIkoRECvCrNKPla84lyoR7DSAyf7p0YgXzBO9PDJx8KntPUay7NS6yp+KdxdVtiE5SpHKtbp2ZQyA9g==",
      "dependencies": {
        "repeat-string": "^1.5.4"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/detect-node": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g=="
    },
    "node_modules/detect-port": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/detect-port/-/detect-port-1.5.1.tgz",
      "integrity": "sha512-aBzdj76lueB6uUst5iAs7+0H/oOjqI5D16XUWxlWMIMROhcM0rfsNVk93zTngq1dDNpoXRr++Sus7ETAExppAQ==",
      "dependencies": {
        "address": "^1.0.1",
        "debug": "4"
      },
      "bin": {
        "detect": "bin/detect-port.js",
        "detect-port": "bin/detect-port.js"
      }
    },
    "node_modules/detect-port-alt": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/detect-port-alt/-/detect-port-alt-1.1.6.tgz",
      "integrity": "sha512-5tQykt+LqfJFBEYaDITx7S7cR7mJ/zQmLXZ2qt5w04ainYZw6tBf9dBunMjVeVOdYVRUzUOE4HkY5J7+uttb5Q==",
      "dependencies": {
        "address": "^1.0.1",
        "debug": "^2.6.0"
      },
      "bin": {
        "detect": "bin/detect-port",
        "detect-port": "bin/detect-port"
      },
      "engines": {
        "node": ">= 4.2.1"
      }
    },
    "node_modules/detect-port-alt/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/detect-port-alt/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dns-equal": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/dns-equal/-/dns-equal-1.0.0.tgz",
      "integrity": "sha512-z+paD6YUQsk+AbGCEM4PrOXSss5gd66QfcVBFTKR/HpFL9jCqikS94HYwKww6fQyO7IxrIIyUu+g0Ka9tUS2Cg=="
    },
    "node_modules/dns-packet": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/dns-packet/-/dns-packet-5.4.0.tgz",
      "integrity": "sha512-EgqGeaBB8hLiHLZtp/IbaDQTL8pZ0+IvwzSHA6d7VyMDM+B9hgddEMa9xjK5oYnw0ci0JQ6g2XCD7/f6cafU6g==",
      "dependencies": {
        "@leichtgewicht/ip-codec": "^2.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/dom-converter": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/dom-converter/-/dom-converter-0.2.0.tgz",
      "integrity": "sha512-gd3ypIPfOMr9h5jIKq8E3sHOTCjeirnl0WK5ZdS1AW0Odt0b1PaWaHdJ4Qk4klv+YB9aJBS7mESXjFoDQPu6DA==",
      "dependencies": {
        "utila": "~0.4"
      }
    },
    "node_modules/dom-serializer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz",
      "integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==",
      "dependencies": {
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.2",
        "entities": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/domelementtype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
      "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ]
    },
    "node_modules/domhandler": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz",
      "integrity": "sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==",
      "dependencies": {
        "domelementtype": "^2.3.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/domutils": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-3.0.1.tgz",
      "integrity": "sha512-z08c1l761iKhDFtfXO04C7kTdPBLi41zwOZl00WS8b5eiaebNpY00HKbztwBq+e3vyqWNwWF3mP9YLUeqIrF+Q==",
      "dependencies": {
        "dom-serializer": "^2.0.0",
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.1"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/dot-prop": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
      "dependencies": {
        "is-obj": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dot-prop/node_modules/is-obj": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/duplexer": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/duplexer/-/duplexer-0.1.2.tgz",
      "integrity": "sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg=="
    },
    "node_modules/duplexer3": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.5.tgz",
      "integrity": "sha512-1A8za6ws41LQgv9HrE/66jyC5yuSjQ3L/KOpFtoBilsAK2iA2wuS5rTt1OCzIvtS2V7nVmedsUU+DGRcjBmOYA=="
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA=="
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.284",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.284.tgz",
      "integrity": "sha512-M8WEXFuKXMYMVr45fo8mq0wUrrJHheiKZf6BArTKk9ZBYCKJEOU5H8cdWgDT+qCVZf7Na4lVUaZsA+h6uA9+PA=="
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg=="
    },
    "node_modules/emojis-list": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-3.0.0.tgz",
      "integrity": "sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/emoticon": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/emoticon/-/emoticon-3.2.0.tgz",
      "integrity": "sha512-SNujglcLTTg+lDAcApPNgEdudaqQFiAbJCqzjNxJkvN9vAwCGi0uu8IUVvx+f16h+V44KCY6Y2yboroc9pilHg==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "5.12.0",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.12.0.tgz",
      "integrity": "sha512-QHTXI/sZQmko1cbDoNAa3mJ5qhWUUNAq3vR0/YiD379fWQrcfuoX1+HW2S0MTt7XmoPLapdaDKUtelUSPic7hQ==",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/entities": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-4.4.0.tgz",
      "integrity": "sha512-oYp7156SP8LkeGD0GF85ad1X9Ai79WtRsZ2gxJqtBuzH+98YUV6jkHEKlZkMbcrjJjIVJNIDP/3WL9wQkoPbWA==",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "0.9.3",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-0.9.3.tgz",
      "integrity": "sha512-1HQ2M2sPtxwnvOvT1ZClHyQDiggdNjURWpY2we6aMKCQiUVxTmVs2UYPLIrD84sS+kMdUwfBSylbJPwNnBrnHQ=="
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-goat": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/escape-goat/-/escape-goat-2.1.1.tgz",
      "integrity": "sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esrecurse/node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eta": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/eta/-/eta-1.12.3.tgz",
      "integrity": "sha512-qHixwbDLtekO/d51Yr4glcaUJCIjGVJyTzuqV4GPlgZo1YpgOKG+avQynErZIYrfM6JIJdtiG2Kox8tbb+DoGg==",
      "engines": {
        "node": ">=6.0.0"
      },
      "funding": {
        "url": "https://github.com/eta-dev/eta?sponsor=1"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eval": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/eval/-/eval-0.1.8.tgz",
      "integrity": "sha512-EzV94NYKoO09GLXGjXj9JIlXijVck4ONSr5wiCWDvhsvj5jxSrzTmRU/9C1DyB6uToszLs8aifA6NQ7lEQdvFw==",
      "dependencies": {
        "@types/node": "*",
        "require-like": ">= 0.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/execa/node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express/node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/express/node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/express/node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/express/node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "node_modules/extend-shallow": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
      "integrity": "sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==",
      "dependencies": {
        "is-extendable": "^0.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
    },
    "node_modules/fast-glob": {
      "version": "3.2.12",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.12.tgz",
      "integrity": "sha512-DVj4CQIYYow0BlaelwK1pHl5n5cRSJfM60UA0zK891sVInoPri2Ekj7+e1CT3/3qxXenpI+nBBmQAcJPJgaj4w==",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-url-parser": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/fast-url-parser/-/fast-url-parser-1.1.3.tgz",
      "integrity": "sha512-5jOCVXADYNuRkKFzNJ0dCCewsZiYo0dz8QNYljkOpFC6r2U4OBmKtvm/Tsuh4w1YYdDqDb31a8TVhBJ2OJKdqQ==",
      "dependencies": {
        "punycode": "^1.3.2"
      }
    },
    "node_modules/fastq": {
      "version": "1.14.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.14.0.tgz",
      "integrity": "sha512-eR2D+V9/ExcbF9ls441yIuN6TI2ED1Y2ZcA5BmMtJsOkWOFRJQ0Jt0g1UwqXJJVAb+V+umH5Dfr8oh4EVP7VVg==",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fbemitter": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/fbemitter/-/fbemitter-3.0.0.tgz",
      "integrity": "sha512-KWKaceCwKQU0+HPoop6gn4eOHk50bBv/VxjJtGMfwmJt3D29JpN4H4eisCtIPA+a8GVBam+ldMMpMjJUvpDyHw==",
      "dependencies": {
        "fbjs": "^3.0.0"
      }
    },
    "node_modules/fbjs": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/fbjs/-/fbjs-3.0.4.tgz",
      "integrity": "sha512-ucV0tDODnGV3JCnnkmoszb5lf4bNpzjv80K41wd4k798Etq+UYD0y0TIfalLjZoKgjive6/adkRnszwapiDgBQ==",
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "fbjs-css-vars": "^1.0.0",
        "loose-envify": "^1.0.0",
        "object-assign": "^4.1.0",
        "promise": "^7.1.1",
        "setimmediate": "^1.0.5",
        "ua-parser-js": "^0.7.30"
      }
    },
    "node_modules/fbjs-css-vars": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/fbjs-css-vars/-/fbjs-css-vars-1.0.2.tgz",
      "integrity": "sha512-b2XGFAFdWZWg0phtAWLHCk836A1Xann+I+Dgd3Gk64MHKZO44FfoD1KxyvbSh0qZsIoXQGGlVztIY+oitJPpRQ=="
    },
    "node_modules/feed": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/feed/-/feed-4.2.2.tgz",
      "integrity": "sha512-u5/sxGfiMfZNtJ3OvQpXcvotFpYkL0n9u9mM2vkui2nGo8b4wvDkJ8gAkYqbA8QpGyFCv3RK0Z+Iv+9veCS9bQ==",
      "dependencies": {
        "xml-js": "^1.6.11"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/file-loader": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/file-loader/-/file-loader-6.2.0.tgz",
      "integrity": "sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "schema-utils": "^3.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/file-loader/node_modules/schema-utils": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.1.1.tgz",
      "integrity": "sha512-Y5PQxS4ITlC+EahLuXaY86TXfR7Dc5lw294alXOq86JAHCihAIZfqv8nNCWvaEJvaC51uN9hbLGeV0cFBdH+Fw==",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/filesize": {
      "version": "8.0.7",
      "resolved": "https://registry.npmjs.org/filesize/-/filesize-8.0.7.tgz",
      "integrity": "sha512-pjmC+bkIF8XI7fWaH8KxHcZL3DPybs1roSKP4rKDvy20tAWwIObE4+JIseG2byfGKhud5ZnM4YSGKBz7Sh0ndQ==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/find-cache-dir": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
      "dependencies": {
        "commondir": "^1.0.1",
        "make-dir": "^3.0.2",
        "pkg-dir": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/flux": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/flux/-/flux-4.0.3.tgz",
      "integrity": "sha512-yKAbrp7JhZhj6uiT1FTuVMlIAT1J4jqEyBpFApi1kxpGZCvacMVc/t1pMQyotqHhAgvoE3bNvAykhCo2CLjnYw==",
      "dependencies": {
        "fbemitter": "^3.0.0",
        "fbjs": "^3.0.1"
      },
      "peerDependencies": {
        "react": "^15.0.2 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin": {
      "version": "6.5.2",
      "resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-6.5.2.tgz",
      "integrity": "sha512-m5cUmF30xkZ7h4tWUgTAcEaKmUW7tfyUyTqNNOz7OxWJ0v1VWKTcOvH8FWHUwSjlW/356Ijc9vi3XfcPstpQKA==",
      "dependencies": {
        "@babel/code-frame": "^7.8.3",
        "@types/json-schema": "^7.0.5",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.2",
        "cosmiconfig": "^6.0.0",
        "deepmerge": "^4.2.2",
        "fs-extra": "^9.0.0",
        "glob": "^7.1.6",
        "memfs": "^3.1.2",
        "minimatch": "^3.0.4",
        "schema-utils": "2.7.0",
        "semver": "^7.3.2",
        "tapable": "^1.0.0"
      },
      "engines": {
        "node": ">=10",
        "yarn": ">=1.0.0"
      },
      "peerDependencies": {
        "eslint": ">= 6",
        "typescript": ">= 2.7",
        "vue-template-compiler": "*",
        "webpack": ">= 4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        },
        "vue-template-compiler": {
          "optional": true
        }
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/cosmiconfig": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-6.0.0.tgz",
      "integrity": "sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.1.0",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.7.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/schema-utils": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.0.tgz",
      "integrity": "sha512-0ilKFI6QQF5nxDZLFn2dMjvc4hjg/Wkg7rHd3jK6/A4a1Hl9VFdQWvgB1UMGoU94pad1P/8N7fMcEnLnSiju8A==",
      "dependencies": {
        "@types/json-schema": "^7.0.4",
        "ajv": "^6.12.2",
        "ajv-keywords": "^3.4.1"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/tapable": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-1.1.3.tgz",
      "integrity": "sha512-4WK/bYZmj8xLr+HUCODHGF1ZFzsYffasLUgEiMBY4fgtltdO6B4WJtlSbPaDTLpYTcGVwM2qLnFTICEcNxs3kA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.2.0.tgz",
      "integrity": "sha512-MhLuK+2gUcnZe8ZHlaaINnQLl0xRIGRfcGk2yl8xoQAfHrSsL3rYu6FCmBdkdbhc9EPlwyGHewaRsvwRMJtAlA==",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://www.patreon.com/infusion"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/fs-monkey": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/fs-monkey/-/fs-monkey-1.0.3.tgz",
      "integrity": "sha512-cybjIfiiE+pTWicSCLFHSrXZ6EilF30oh91FDP9S2B051prEa7QWfrVTQm10/dDpswBDXZugPa1Ogu8Yh+HV0Q=="
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.3.tgz",
      "integrity": "sha512-QJVz1Tj7MS099PevUG5jvnt9tSkXN8K14dxQlikJuPt4uD9hHAHjLyLBiLR5zELelBdD9QNRAXZzsJx0WaDL9A==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-symbols": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-own-enumerable-property-symbols": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/get-own-enumerable-property-symbols/-/get-own-enumerable-property-symbols-3.0.2.tgz",
      "integrity": "sha512-I0UBV/XOz1XkIJHEUDMZAbzCThU/H8DxmSfmdGcKPnVhu2VfFqr34jr9777IyaTYvxjedWhqVIilEDsCdP5G6g=="
    },
    "node_modules/get-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
      "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/github-slugger": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/github-slugger/-/github-slugger-1.5.0.tgz",
      "integrity": "sha512-wIh+gKBI9Nshz2o46B0B3f5k/W+WI9ZAv6y5Dn5WJ5SK1t0TnDimB4WE5rmTD05ZAIn8HALCZVmCsvj0w0v0lw=="
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw=="
    },
    "node_modules/global-dirs": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-3.0.1.tgz",
      "integrity": "sha512-NBcGGFbBA9s1VzD41QXDG+3++t9Mn5t1FpLdhESY6oKY4gYTFpX4wO3sqGUa0Srjtbfj3szX0RnemmrVRUdULA==",
      "dependencies": {
        "ini": "2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/global-dirs/node_modules/ini": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ini/-/ini-2.0.0.tgz",
      "integrity": "sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/global-modules": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/global-modules/-/global-modules-2.0.0.tgz",
      "integrity": "sha512-NGbfmJBp9x8IxyJSd1P+otYK8vonoJactOogrVfFRIAEY1ukil8RSKDz2Yo7wh1oihl51l/r6W4epkeKJHqL8A==",
      "dependencies": {
        "global-prefix": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-prefix/-/global-prefix-3.0.0.tgz",
      "integrity": "sha512-awConJSVCHVGND6x3tmMaKcQvwXLhjdkmomy2W+Goaui8YPgYgXJZewhg3fWC+DlfqqQuWg8AwqjGTD2nAPVWg==",
      "dependencies": {
        "ini": "^1.3.5",
        "kind-of": "^6.0.2",
        "which": "^1.3.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/got": {
      "version": "9.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
      "dependencies": {
        "@sindresorhus/is": "^0.14.0",
        "@szmarczak/http-timer": "^1.1.2",
        "cacheable-request": "^6.0.0",
        "decompress-response": "^3.3.0",
        "duplexer3": "^0.1.4",
        "get-stream": "^4.1.0",
        "lowercase-keys": "^1.0.1",
        "mimic-response": "^1.0.1",
        "p-cancelable": "^1.0.0",
        "to-readable-stream": "^1.0.0",
        "url-parse-lax": "^3.0.0"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.10",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
      "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA=="
    },
    "node_modules/gray-matter": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/gray-matter/-/gray-matter-4.0.3.tgz",
      "integrity": "sha512-5v6yZd4JK3eMI3FqqCouswVqwugaA9r4dNZB1wwcmrD02QkV5H0y7XBQW8QwQqEaZY1pM9aqORSORhJRdNK44Q==",
      "dependencies": {
        "js-yaml": "^3.13.1",
        "kind-of": "^6.0.2",
        "section-matter": "^1.0.0",
        "strip-bom-string": "^1.0.0"
      },
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/gray-matter/node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/gray-matter/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/gzip-size": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/gzip-size/-/gzip-size-6.0.0.tgz",
      "integrity": "sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==",
      "dependencies": {
        "duplexer": "^0.1.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/handle-thing": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/handle-thing/-/handle-thing-2.0.1.tgz",
      "integrity": "sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg=="
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.0.tgz",
      "integrity": "sha512-62DVLZGoiEBDHQyqG4w9xCuZ7eJEwNmJRWw2VY84Oedb7WFcA27fiEVe8oUQx9hAUJ4ekurquucTGwsyO1XGdQ==",
      "dependencies": {
        "get-intrinsic": "^1.1.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-yarn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-2.1.0.tgz",
      "integrity": "sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/hast-to-hyperscript": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/hast-to-hyperscript/-/hast-to-hyperscript-9.0.1.tgz",
      "integrity": "sha512-zQgLKqF+O2F72S1aa4y2ivxzSlko3MAvxkwG8ehGmNiqd98BIN3JM1rAJPmplEyLmGLO2QZYJtIneOSZ2YbJuA==",
      "dependencies": {
        "@types/unist": "^2.0.3",
        "comma-separated-tokens": "^1.0.0",
        "property-information": "^5.3.0",
        "space-separated-tokens": "^1.0.0",
        "style-to-object": "^0.3.0",
        "unist-util-is": "^4.0.0",
        "web-namespaces": "^1.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-from-parse5": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/hast-util-from-parse5/-/hast-util-from-parse5-6.0.1.tgz",
      "integrity": "sha512-jeJUWiN5pSxW12Rh01smtVkZgZr33wBokLzKLwinYOUfSzm1Nl/c3GUGebDyOKjdsRgMvoVbV0VpAcpjF4NrJA==",
      "dependencies": {
        "@types/parse5": "^5.0.0",
        "hastscript": "^6.0.0",
        "property-information": "^5.0.0",
        "vfile": "^4.0.0",
        "vfile-location": "^3.2.0",
        "web-namespaces": "^1.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-parse-selector": {
      "version": "2.2.5",
      "resolved": "https://registry.npmjs.org/hast-util-parse-selector/-/hast-util-parse-selector-2.2.5.tgz",
      "integrity": "sha512-7j6mrk/qqkSehsM92wQjdIgWM2/BW61u/53G6xmC8i1OmEdKLHbk419QKQUjz6LglWsfqoiHmyMRkP1BGjecNQ==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-raw": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/hast-util-raw/-/hast-util-raw-6.0.1.tgz",
      "integrity": "sha512-ZMuiYA+UF7BXBtsTBNcLBF5HzXzkyE6MLzJnL605LKE8GJylNjGc4jjxazAHUtcwT5/CEt6afRKViYB4X66dig==",
      "dependencies": {
        "@types/hast": "^2.0.0",
        "hast-util-from-parse5": "^6.0.0",
        "hast-util-to-parse5": "^6.0.0",
        "html-void-elements": "^1.0.0",
        "parse5": "^6.0.0",
        "unist-util-position": "^3.0.0",
        "vfile": "^4.0.0",
        "web-namespaces": "^1.0.0",
        "xtend": "^4.0.0",
        "zwitch": "^1.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-raw/node_modules/parse5": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz",
      "integrity": "sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw=="
    },
    "node_modules/hast-util-to-parse5": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/hast-util-to-parse5/-/hast-util-to-parse5-6.0.0.tgz",
      "integrity": "sha512-Lu5m6Lgm/fWuz8eWnrKezHtVY83JeRGaNQ2kn9aJgqaxvVkFCZQBEhgodZUDUvoodgyROHDb3r5IxAEdl6suJQ==",
      "dependencies": {
        "hast-to-hyperscript": "^9.0.0",
        "property-information": "^5.0.0",
        "web-namespaces": "^1.0.0",
        "xtend": "^4.0.0",
        "zwitch": "^1.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hastscript": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/hastscript/-/hastscript-6.0.0.tgz",
      "integrity": "sha512-nDM6bvd7lIqDUiYEiu5Sl/+6ReP0BMk/2f4U/Rooccxkj0P5nm+acM5PrGJ/t5I8qPGiqZSE6hVAwZEdZIvP4w==",
      "dependencies": {
        "@types/hast": "^2.0.0",
        "comma-separated-tokens": "^1.0.0",
        "hast-util-parse-selector": "^2.0.0",
        "property-information": "^5.0.0",
        "space-separated-tokens": "^1.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/he": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
      "bin": {
        "he": "bin/he"
      }
    },
    "node_modules/history": {
      "version": "4.10.1",
      "resolved": "https://registry.npmjs.org/history/-/history-4.10.1.tgz",
      "integrity": "sha512-36nwAD620w12kuzPAsyINPWJqlNbij+hpK1k9XRloDtym8mxzGYl2c17LnV6IAGB2Dmg4tEa7G7DlawS0+qjew==",
      "dependencies": {
        "@babel/runtime": "^7.1.2",
        "loose-envify": "^1.2.0",
        "resolve-pathname": "^3.0.0",
        "tiny-invariant": "^1.0.2",
        "tiny-warning": "^1.0.0",
        "value-equal": "^1.0.1"
      }
    },
    "node_modules/hoist-non-react-statics": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz",
      "integrity": "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==",
      "dependencies": {
        "react-is": "^16.7.0"
      }
    },
    "node_modules/hpack.js": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/hpack.js/-/hpack.js-2.1.6.tgz",
      "integrity": "sha512-zJxVehUdMGIKsRaNt7apO2Gqp0BdqW5yaiGHXXmbpvxgBYVZnAql+BJb4RO5ad2MgpbZKn5G6nMnegrH1FcNYQ==",
      "dependencies": {
        "inherits": "^2.0.1",
        "obuf": "^1.0.0",
        "readable-stream": "^2.0.1",
        "wbuf": "^1.1.0"
      }
    },
    "node_modules/hpack.js/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ=="
    },
    "node_modules/hpack.js/node_modules/readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/hpack.js/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/hpack.js/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/html-entities": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.3.3.tgz",
      "integrity": "sha512-DV5Ln36z34NNTDgnz0EWGBLZENelNAtkiFA4kyNOG2tDI6Mz1uSWiq1wAKdyjnJwyDiDO7Fa2SO1CTxPXL8VxA=="
    },
    "node_modules/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-YXxSlJBZTP7RS3tWnQw74ooKa6L9b9i9QYXY21eUEvhZ3u9XLfv6OnFsQq6RxkhHygsaUMvYsZRV5rU/OVNZxw==",
      "dependencies": {
        "camel-case": "^4.1.2",
        "clean-css": "^5.2.2",
        "commander": "^8.3.0",
        "he": "^1.2.0",
        "param-case": "^3.0.4",
        "relateurl": "^0.2.7",
        "terser": "^5.10.0"
      },
      "bin": {
        "html-minifier-terser": "cli.js"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/html-minifier-terser/node_modules/commander": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
      "integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/html-tags": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/html-tags/-/html-tags-3.2.0.tgz",
      "integrity": "sha512-vy7ClnArOZwCnqZgvv+ddgHgJiAFXe3Ge9ML5/mBctVJoUoYPCdxVucOywjDARn6CVoh3dRSFdPHy2sX80L0Wg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/html-void-elements": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/html-void-elements/-/html-void-elements-1.0.5.tgz",
      "integrity": "sha512-uE/TxKuyNIcx44cIWnjr/rfIATDH7ZaOMmstu0CwhFG1Dunhlp4OC6/NMbhiwoq5BpW0ubi303qnEk/PZj614w==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/html-webpack-plugin": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/html-webpack-plugin/-/html-webpack-plugin-5.5.0.tgz",
      "integrity": "sha512-sy88PC2cRTVxvETRgUHFrL4No3UxvcH8G1NepGhqaTT+GXN2kTamqasot0inS5hXeg1cMbFDt27zzo9p35lZVw==",
      "dependencies": {
        "@types/html-minifier-terser": "^6.0.0",
        "html-minifier-terser": "^6.0.2",
        "lodash": "^4.17.21",
        "pretty-error": "^4.0.0",
        "tapable": "^2.0.0"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/html-webpack-plugin"
      },
      "peerDependencies": {
        "webpack": "^5.20.0"
      }
    },
    "node_modules/htmlparser2": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-8.0.1.tgz",
      "integrity": "sha512-4lVbmc1diZC7GUJQtRQ5yBAeUCL1exyMwmForWkRLnwyzWBFxN633SALPMGYaWZvKe9j1pRZJpauvmxENSp/EA==",
      "funding": [
        "https://github.com/fb55/htmlparser2?sponsor=1",
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "dependencies": {
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.2",
        "domutils": "^3.0.1",
        "entities": "^4.3.0"
      }
    },
    "node_modules/http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ=="
    },
    "node_modules/http-deceiver": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/http-deceiver/-/http-deceiver-1.2.7.tgz",
      "integrity": "sha512-LmpOGxTfbpgtGVxJrj5k7asXHCgNZp5nLfp+hWc8QQRqtb7fUy6kRY3BO1h9ddF6yIPYUARgxGOwB42DnxIaNw=="
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.8",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.8.tgz",
      "integrity": "sha512-SGeBX54F94Wgu5RH3X5jsDtf4eHyRogWX1XGT3b4HuW3tQPM4AaBzoUji/4AAJNXCEOWZ5O0DgZmJw1947gD5Q=="
    },
    "node_modules/http-proxy": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz",
      "integrity": "sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==",
      "dependencies": {
        "eventemitter3": "^4.0.0",
        "follow-redirects": "^1.0.0",
        "requires-port": "^1.0.0"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/http-proxy-middleware": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/http-proxy-middleware/-/http-proxy-middleware-2.0.6.tgz",
      "integrity": "sha512-ya/UeJ6HVBYxrgYotAZo1KvPWlgB48kUJLDePFeneHsVujFaW5WNj2NgWCAE//B1Dl02BIfYlpNgBy8Kf8Rjmw==",
      "dependencies": {
        "@types/http-proxy": "^1.17.8",
        "http-proxy": "^1.18.1",
        "is-glob": "^4.0.1",
        "is-plain-obj": "^3.0.0",
        "micromatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@types/express": "^4.17.13"
      },
      "peerDependenciesMeta": {
        "@types/express": {
          "optional": true
        }
      }
    },
    "node_modules/http-proxy-middleware/node_modules/is-plain-obj": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-3.0.0.tgz",
      "integrity": "sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/icss-utils": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/icss-utils/-/icss-utils-5.1.0.tgz",
      "integrity": "sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.2.4",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.4.tgz",
      "integrity": "sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/image-size": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/image-size/-/image-size-1.0.2.tgz",
      "integrity": "sha512-xfOoWjceHntRb3qFCrh5ZFORYH8XCdYpASltMhZ/Q0KZiOwjdE/Yl2QCiWdwD+lygV5bMCvauzgu5PxBX/Yerg==",
      "dependencies": {
        "queue": "6.0.2"
      },
      "bin": {
        "image-size": "bin/image-size.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/immer": {
      "version": "9.0.16",
      "resolved": "https://registry.npmjs.org/immer/-/immer-9.0.16.tgz",
      "integrity": "sha512-qenGE7CstVm1NrHQbMh8YaSzTZTFNP3zPqr3YU0S0UY441j4bJTg4A2Hh5KAhwgaiU6ZZ1Ar6y/2f4TblnMReQ==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-lazy": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-2.1.0.tgz",
      "integrity": "sha512-m7ZEHgtw69qOGw+jwxXkHlrlIPdTGkyh66zXZ1ajZbxkDBNjSY/LGbmjc7h0s2ELsUDTAhFr55TrPSSqJGPG0A==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/infima": {
      "version": "0.2.0-alpha.42",
      "resolved": "https://registry.npmjs.org/infima/-/infima-0.2.0-alpha.42.tgz",
      "integrity": "sha512-ift8OXNbQQwtbIt6z16KnSWP7uJ/SysSMFI4F87MNRTicypfl4Pv3E2OGVv6N3nSZFJvA8imYulCBS64iyHYww==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew=="
    },
    "node_modules/inline-style-parser": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/inline-style-parser/-/inline-style-parser-0.1.1.tgz",
      "integrity": "sha512-7NXolsK4CAS5+xvdj5OMMbI962hU/wvwoxk+LWR9Ek9bVtyuuYScDN6eS0rUm6TxApFpw7CX1o4uJzcd4AyD3Q=="
    },
    "node_modules/interpret": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/interpret/-/interpret-1.4.0.tgz",
      "integrity": "sha512-agE4QfB2Lkp9uICn7BAqoscw4SZP9kTE2hxiFI3jBPmXJfdqiahTbUuKGsMoN2GtqL9AxhYioAcVvgsb1HvRbA==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/invariant": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/invariant/-/invariant-2.2.4.tgz",
      "integrity": "sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==",
      "dependencies": {
        "loose-envify": "^1.0.0"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-2.0.1.tgz",
      "integrity": "sha512-1qTgH9NG+IIJ4yfKs2e6Pp1bZg8wbDbKHT21HrLIeYBTRLgMYKnMTPAuI3Lcs61nfx5h1xlXnbJtH1kX5/d/ng==",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/is-alphabetical": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-alphabetical/-/is-alphabetical-1.0.4.tgz",
      "integrity": "sha512-DwzsA04LQ10FHTZuL0/grVDk4rFoVH1pjAToYwBrHSxcrBIGQuXrQMtD5U1b0U2XVgKZCTLLP8u2Qxqhy3l2Vg==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-alphanumerical": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-alphanumerical/-/is-alphanumerical-1.0.4.tgz",
      "integrity": "sha512-UzoZUr+XfVz3t3v4KyGEniVL9BDRoQtY7tOyrRybkVNjDFWyo1yhXNGrrBTQxp3ib9BLAWs7k2YKBQsFRkZG9A==",
      "dependencies": {
        "is-alphabetical": "^1.0.0",
        "is-decimal": "^1.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-buffer": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-2.0.5.tgz",
      "integrity": "sha512-i2R6zNFDwgEHJyQUtJEk0XFi1i0dPFn/oqjK3/vPCcDeJvW5NQ83V8QbicfF1SupOaB0h8ntgBC2YiE7dfyctQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/is-ci": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
      "integrity": "sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
      "dependencies": {
        "ci-info": "^2.0.0"
      },
      "bin": {
        "is-ci": "bin.js"
      }
    },
    "node_modules/is-ci/node_modules/ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ=="
    },
    "node_modules/is-core-module": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.11.0.tgz",
      "integrity": "sha512-RRjxlvLDkD1YJwDbroBHMb+cukurkDWNyHx7D3oNB5x9rb5ogcksMC5wHCadcXoo67gVr/+3GFySh3134zi6rw==",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-decimal": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-decimal/-/is-decimal-1.0.4.tgz",
      "integrity": "sha512-RGdriMmQQvZ2aqaQq3awNA6dCGtKpiDFcOzrTWrDAT2MiWrKQVPmxLGHl7Y2nNu6led0kEyoX0enY0qXYsv9zw==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-docker": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-2.2.1.tgz",
      "integrity": "sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==",
      "bin": {
        "is-docker": "cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-extendable": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz",
      "integrity": "sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-hexadecimal": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-hexadecimal/-/is-hexadecimal-1.0.4.tgz",
      "integrity": "sha512-gyPJuv83bHMpocVYoqof5VDiZveEoGoFL8m3BXNb2VW8Xs+rz9kqO8LOQ5DH6EsuvilT1ApazU0pyl+ytbPtlw==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-installed-globally": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.4.0.tgz",
      "integrity": "sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==",
      "dependencies": {
        "global-dirs": "^3.0.0",
        "is-path-inside": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-npm": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-npm/-/is-npm-5.0.0.tgz",
      "integrity": "sha512-WW/rQLOazUq+ST/bCAVBp/2oMERWLsR7OrKyt052dNDk4DHcDE0/7QSXITlmi+VBcV13DfIbysG3tZJm5RfdBA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-obj": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
      "integrity": "sha512-l4RyHgRqGN4Y3+9JHVrNqO+tN0rV5My76uW5/nuO4K1b6vw5G8d/cmFjP9tRfEsdhZNt0IFdZuK/c2Vr4Nb+Qg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-path-cwd": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-2.2.0.tgz",
      "integrity": "sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-2.1.0.tgz",
      "integrity": "sha512-YWnfyRwxL/+SsrWYfOpUtz5b3YD+nyfkHvjbcanzk8zgyO4ASD67uVMRt8k5bM4lLMDnXfriRhOpemw+NfT1eA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-plain-object": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz",
      "integrity": "sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==",
      "dependencies": {
        "isobject": "^3.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-regexp": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-regexp/-/is-regexp-1.0.0.tgz",
      "integrity": "sha512-7zjFAPO4/gwyQAAgRRmqeEeyIICSdmCqa3tsVHMdBzaXXRiqopZL4Cyghg/XulGWrtABTpbnYYzzIRffLkP4oA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-root": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-root/-/is-root-2.1.0.tgz",
      "integrity": "sha512-AGOriNp96vNBd3HtU+RzFEc75FfR5ymiYv8E553I71SCeXBiMsVDUtdio1OEFvrPyLIQ9tVR5RxXIFe5PUFjMg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA=="
    },
    "node_modules/is-whitespace-character": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-whitespace-character/-/is-whitespace-character-1.0.4.tgz",
      "integrity": "sha512-SDweEzfIZM0SJV0EUga669UTKlmL0Pq8Lno0QDQsPnvECB3IM2aP0gdx5TrU0A01MAPfViaZiI2V1QMZLaKK5w==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-word-character": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-word-character/-/is-word-character-1.0.4.tgz",
      "integrity": "sha512-5SMO8RVennx3nZrqtKwCGyyetPE9VDba5ugvKLaD4KopPG5kR4mQ7tNt/r7feL5yt5h3lpuBbIUmCOG2eSzXHA==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-wsl": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-2.2.0.tgz",
      "integrity": "sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
      "dependencies": {
        "is-docker": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-yarn-global": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/is-yarn-global/-/is-yarn-global-0.3.0.tgz",
      "integrity": "sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw=="
    },
    "node_modules/isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha512-D2S+3GLxWH+uhrNEcoh/fnmYeP8E8/zHl644d/jdA0g2uyXvy3sb0qxotE+ne0LtccHknQzWwZEzhak7oJ0COQ=="
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
    },
    "node_modules/isobject": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz",
      "integrity": "sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/jest-util": {
      "version": "29.3.1",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.3.1.tgz",
      "integrity": "sha512-7YOVZaiX7RJLv76ZfHt4nbNEzzTRiMW/IiOG7ZOKmTXmoGBxUDefgMAxQubu6WPVqP5zSzAdZG0FfLcC7HOIFQ==",
      "dependencies": {
        "@jest/types": "^29.3.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.3.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.3.1.tgz",
      "integrity": "sha512-lY4AnnmsEWeiXirAIA0c9SDPbuCBq8IYuDVL8PMm0MZ2PEs2yPvRA/J64QBXuZp7CYKrDM/rmNrc9/i3KJQncw==",
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.3.1",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/joi": {
      "version": "17.7.0",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.7.0.tgz",
      "integrity": "sha512-1/ugc8djfn93rTE3WRKdCzGGt/EtiYKxITMO4Wiv6q5JL1gl9ePt4kBsl1S499nbosspfctIQTpYIhSmHA3WAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.0",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
      "integrity": "sha512-CuUqjv0FUZIdXkHPI8MezCnFCdaTAacej1TZYulLoAg1h/PhwkdXFN4V/gzY4g+fMBCOV2xF+rp7t2XD2ns/NQ=="
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
    },
    "node_modules/json5": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.2.tgz",
      "integrity": "sha512-46Tk9JiOL2z7ytNQWFLpj99RZkVgeHf87yGQKsIkaPz1qSH9UczKH1rO7K3wgRselo0tYMUNfecYpm/p1vC7tQ==",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/keyv": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
      "dependencies": {
        "json-buffer": "3.0.0"
      }
    },
    "node_modules/kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/klona": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/klona/-/klona-2.0.5.tgz",
      "integrity": "sha512-pJiBpiXMbt7dkzXe8Ghj/u4FfXOOa98fPW+bihOJ4SjnoijweJrNThJfd3ifXpXhREjpoF2mZVH1GfS9LV3kHQ==",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/latest-version": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/latest-version/-/latest-version-5.1.0.tgz",
      "integrity": "sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==",
      "dependencies": {
        "package-json": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.0.6.tgz",
      "integrity": "sha512-9JROoBW7pobfsx+Sq2JsASvCo6Pfo6WWoUW79HuB1BCoBXD4PLWJPqDF6fNj67pqBYTbAHkE57M1kS/+L1neOg==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
    },
    "node_modules/loader-runner": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz",
      "integrity": "sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==",
      "engines": {
        "node": ">=6.11.5"
      }
    },
    "node_modules/loader-utils": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.4.tgz",
      "integrity": "sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==",
      "dependencies": {
        "big.js": "^5.2.2",
        "emojis-list": "^3.0.0",
        "json5": "^2.1.2"
      },
      "engines": {
        "node": ">=8.9.0"
      }
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.curry": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.curry/-/lodash.curry-4.1.1.tgz",
      "integrity": "sha512-/u14pXGviLaweY5JI0IUzgzF2J6Ne8INyzAZjImcryjgkZ+ebruBxy2/JaOOkTqScddcYtakjhSaeemV8lR0tA=="
    },
    "node_modules/lodash.debounce": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
      "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow=="
    },
    "node_modules/lodash.flow": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/lodash.flow/-/lodash.flow-3.5.0.tgz",
      "integrity": "sha512-ff3BX/tSioo+XojX4MOsOMhJw0nZoUEF011LX8g8d3gvjVbxd89cCio4BCXronjxcTUIJUoqKEUA+n4CqvvRPw=="
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag=="
    },
    "node_modules/lodash.uniq": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
      "integrity": "sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ=="
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/markdown-escapes": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/markdown-escapes/-/markdown-escapes-1.0.4.tgz",
      "integrity": "sha512-8z4efJYk43E0upd0NbVXwgSTQs6cT3T06etieCMEg7dRbzCbxUCK/GHlX8mhHRDcp+OLlHkPKsvqQTCvsRl2cg==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/mdast-squeeze-paragraphs": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mdast-squeeze-paragraphs/-/mdast-squeeze-paragraphs-4.0.0.tgz",
      "integrity": "sha512-zxdPn69hkQ1rm4J+2Cs2j6wDEv7O17TfXTJ33tl/+JPIoEmtV9t2ZzBM5LPHE8QlHsmVD8t3vPKCyY3oH+H8MQ==",
      "dependencies": {
        "unist-util-remove": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-definitions": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mdast-util-definitions/-/mdast-util-definitions-4.0.0.tgz",
      "integrity": "sha512-k8AJ6aNnUkB7IE+5azR9h81O5EQ/cTDXtWdMq9Kk5KcEW/8ritU5CeLg/9HhOC++nALHBlaogJ5jz0Ybk3kPMQ==",
      "dependencies": {
        "unist-util-visit": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-to-hast": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/mdast-util-to-hast/-/mdast-util-to-hast-10.0.1.tgz",
      "integrity": "sha512-BW3LM9SEMnjf4HXXVApZMt8gLQWVNXc3jryK0nJu/rOXPOnlkUjmdkDlmxMirpbU9ILncGFIwLH/ubnWBbcdgA==",
      "dependencies": {
        "@types/mdast": "^3.0.0",
        "@types/unist": "^2.0.0",
        "mdast-util-definitions": "^4.0.0",
        "mdurl": "^1.0.0",
        "unist-builder": "^2.0.0",
        "unist-util-generated": "^1.0.0",
        "unist-util-position": "^3.0.0",
        "unist-util-visit": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-to-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/mdast-util-to-string/-/mdast-util-to-string-2.0.0.tgz",
      "integrity": "sha512-AW4DRS3QbBayY/jJmD8437V1Gombjf8RSOUCMFBuo5iHi58AGEgVCKQ+ezHkZZDpAQS75hcBMpLqjpJTjtUL7w==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdn-data": {
      "version": "2.0.14",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
      "integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow=="
    },
    "node_modules/mdurl": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-1.0.1.tgz",
      "integrity": "sha512-/sKlQJCBYVY9Ers9hqzKou4H6V5UWc/M59TH2dvkt+84itfnq7uFOMLpOiOS4ujvHP4etln18fmIxA5R5fll0g=="
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memfs": {
      "version": "3.4.12",
      "resolved": "https://registry.npmjs.org/memfs/-/memfs-3.4.12.tgz",
      "integrity": "sha512-BcjuQn6vfqP+k100e0E9m61Hyqa//Brp+I3f0OBmN0ATHlFA8vx3Lt8z57R3u2bPqe3WGDBC+nF72fTH7isyEw==",
      "dependencies": {
        "fs-monkey": "^1.0.3"
      },
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w=="
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.33.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz",
      "integrity": "sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.18",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz",
      "integrity": "sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ==",
      "dependencies": {
        "mime-db": "~1.33.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mini-css-extract-plugin": {
      "version": "2.7.2",
      "resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-2.7.2.tgz",
      "integrity": "sha512-EdlUizq13o0Pd+uCp+WO/JpkLvHRVGt97RqfeGhXqAcorYo1ypJSpkV+WDT0vY/kmh/p7wRdJNJtuyK540PXDw==",
      "dependencies": {
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/mini-css-extract-plugin/node_modules/ajv": {
      "version": "8.11.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.11.2.tgz",
      "integrity": "sha512-E4bfmKAhGiSTvMfL1Myyycaub+cUEU2/IvpylXkUu7CHBkBj1f/ikdzbD7YQ6FKUbixDxeYvB/xY4fvyroDlQg==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/mini-css-extract-plugin/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/mini-css-extract-plugin/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="
    },
    "node_modules/mini-css-extract-plugin/node_modules/schema-utils": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.0.0.tgz",
      "integrity": "sha512-1edyXKgh6XnJsJSQ8mKWXnN/BVaIbFMLpouRUrXgVq7WYne5kw3MW7UPhO44uRXQSIpTSXoJbmrR2X0w9kUTyg==",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.8.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A=="
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.7.tgz",
      "integrity": "sha512-bzfL1YUZsP41gmu/qjrEk0Q6i2ix/cVeAhbCbqH9u3zYutS1cLg00qhrD0M2MVdCcx4Sc0UpP2eBWo9rotpq6g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/mrmime": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mrmime/-/mrmime-1.0.1.tgz",
      "integrity": "sha512-hzzEagAgDyoU1Q6yg5uI+AorQgdvMCur3FcKf7NhMKWsaYg+RnbTyHRa/9IlLF9rf455MOCtcqqrQQ83pPP7Uw==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/multicast-dns": {
      "version": "7.2.5",
      "resolved": "https://registry.npmjs.org/multicast-dns/-/multicast-dns-7.2.5.tgz",
      "integrity": "sha512-2eznPJP8z2BFLX50tf0LuODrpINqP1RVIm/CObbTcBRITQgmC/TjcREF1NeTBzIcR5XO/ukWo+YHOjBbFwIupg==",
      "dependencies": {
        "dns-packet": "^5.2.2",
        "thunky": "^1.0.2"
      },
      "bin": {
        "multicast-dns": "cli.js"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.4",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.4.tgz",
      "integrity": "sha512-MqBkQh/OHTS2egovRtLk45wEyNXwF+cokD+1YPf9u5VfJiRdAiRwB2froX5Co9Rh20xs4siNPm8naNotSD6RBw==",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw=="
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/node-emoji": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/node-emoji/-/node-emoji-1.11.0.tgz",
      "integrity": "sha512-wo2DpQkQp7Sjm2A0cq+sN7EHKO6Sl0ctXeBdFZrL9T9+UywORbufTcTZxom8YqpLQt/FqNMUkOpkZrJVYSKD3A==",
      "dependencies": {
        "lodash": "^4.17.21"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.8.tgz",
      "integrity": "sha512-dFSmB8fFHEH/s81Xi+Y/15DQY6VHW81nXRj86EMSL3lmuTmK1e+aT4wrFCkTbm+gSwkw4KpX+rT/pMM2c1mF+A=="
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/nprogress": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/nprogress/-/nprogress-0.2.0.tgz",
      "integrity": "sha512-I19aIingLgR1fmhftnbWWO3dXc0hSxqHQHQb3H8m+K3TnEn/iSeTZZOyvKXWqQESMwuUVnatlCnZdLBZZt2VSA=="
    },
    "node_modules/nth-check": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
      "integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
      "dependencies": {
        "boolbase": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/fb55/nth-check?sponsor=1"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.2",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.2.tgz",
      "integrity": "sha512-z+cPxW0QGUp0mcqcsgQyLVRDoXFQbXOwBaqyF7VIgI4TWNQsDHrBpUQslRmIfAoYWdYzs6UlKJtB2XJpTaNSpQ==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.4.tgz",
      "integrity": "sha512-1mxKf0e58bvyjSCtKYY4sRe9itRk3PJpquJOjeIkz885CczcI4IvJJDLPS72oowuSh+pBxUFROpX+TU++hxhZQ==",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.4",
        "has-symbols": "^1.0.3",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/obuf": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg=="
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/open": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/open/-/open-8.4.0.tgz",
      "integrity": "sha512-XgFPPM+B28FtCCgSb9I+s9szOC1vZRSwgWsRUA5ylIxRTgKozqjOCrVOqGsYABPYK5qnfqClxZTFBa8PKt2v6Q==",
      "dependencies": {
        "define-lazy-prop": "^2.0.0",
        "is-docker": "^2.1.1",
        "is-wsl": "^2.2.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/opener": {
      "version": "1.5.2",
      "resolved": "https://registry.npmjs.org/opener/-/opener-1.5.2.tgz",
      "integrity": "sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==",
      "bin": {
        "opener": "bin/opener-bin.js"
      }
    },
    "node_modules/p-cancelable": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-map": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
      "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
      "dependencies": {
        "aggregate-error": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-retry": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/p-retry/-/p-retry-4.6.2.tgz",
      "integrity": "sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==",
      "dependencies": {
        "@types/retry": "0.12.0",
        "retry": "^0.13.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-6.5.0.tgz",
      "integrity": "sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==",
      "dependencies": {
        "got": "^9.6.0",
        "registry-auth-token": "^4.0.0",
        "registry-url": "^5.0.0",
        "semver": "^6.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/package-json/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/param-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz",
      "integrity": "sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-entities": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/parse-entities/-/parse-entities-2.0.0.tgz",
      "integrity": "sha512-kkywGpCcRYhqQIchaWqZ875wzpS/bMKhz5HnN3p7wveJTkTtyAB/AlnS0f8DFSqYW1T82t6yEAkEcB+A1I3MbQ==",
      "dependencies": {
        "character-entities": "^1.0.0",
        "character-entities-legacy": "^1.0.0",
        "character-reference-invalid": "^1.0.0",
        "is-alphanumerical": "^1.0.0",
        "is-decimal": "^1.0.0",
        "is-hexadecimal": "^1.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parse-numeric-range": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/parse-numeric-range/-/parse-numeric-range-1.3.0.tgz",
      "integrity": "sha512-twN+njEipszzlMJd4ONUYgSfZPDxgHhT9Ahed5uTigpQn90FggW4SA/AIPq/6a149fTbE9qBEcSwE3FAEp6wQQ=="
    },
    "node_modules/parse5": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.1.2.tgz",
      "integrity": "sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==",
      "dependencies": {
        "entities": "^4.4.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parse5-htmlparser2-tree-adapter": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-7.0.0.tgz",
      "integrity": "sha512-B77tOZrqqfUfnVcOrUvfdLbz4pu4RopLD/4vmu3HUPswwTA8OH0EMW9BlWR2B0RCoiZRAHEUu7IxeP1Pd1UU+g==",
      "dependencies": {
        "domhandler": "^5.0.2",
        "parse5": "^7.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/pascal-case": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz",
      "integrity": "sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-is-inside": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/path-is-inside/-/path-is-inside-1.0.2.tgz",
      "integrity": "sha512-DUWJr3+ULp4zXmol/SZkFf3JGsS9/SIv+Y3Rt93/UjPpDpklB5f1er4O3POIbUuUJ3FXgqte2Q7SrU6zAqwk8w=="
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
    },
    "node_modules/path-to-regexp": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-1.8.0.tgz",
      "integrity": "sha512-n43JRhlUKUAlibEJhPeir1ncUID16QnEjNpwzNdO3Lm4ywrBpBZ5oLD0I6br9evr1Y9JTqwRtAh7JLoOzAQdVA==",
      "dependencies": {
        "isarray": "0.0.1"
      }
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/pkg-up/-/pkg-up-3.1.0.tgz",
      "integrity": "sha512-nDywThFk1i4BQK4twPQ6TA4RT8bDY96yeuCVBWL3ePARCiEKDRSrNGbFIgUJpLp+XeIR65v8ra7WuJOFUBtkMA==",
      "dependencies": {
        "find-up": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up/node_modules/find-up": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
      "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
      "dependencies": {
        "locate-path": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/locate-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
      "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
      "dependencies": {
        "p-locate": "^3.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/p-locate": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
      "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
      "dependencies": {
        "p-limit": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.20",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.20.tgz",
      "integrity": "sha512-6Q04AXR1212bXr5fh03u8aAwbLxAQNGQ/Q1LNa0VfOI06ZAlhPHtQvE4OIdpj4kLThXilalPnmDSOD65DcHt+g==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.4",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-calc": {
      "version": "8.2.4",
      "resolved": "https://registry.npmjs.org/postcss-calc/-/postcss-calc-8.2.4.tgz",
      "integrity": "sha512-SmWMSJmB8MRnnULldx0lQIyhSNvuDl9HfrZkaqqE/WHAhToYsAvDq+yAsA/kIyINDszOp3Rh0GFoNuH5Ypsm3Q==",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9",
        "postcss-value-parser": "^4.2.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.2"
      }
    },
    "node_modules/postcss-colormin": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/postcss-colormin/-/postcss-colormin-5.3.0.tgz",
      "integrity": "sha512-WdDO4gOFG2Z8n4P8TWBpshnL3JpmNmJwdnfP2gbk2qBA8PWwOYcmjmI/t3CmMeL72a7Hkd+x/Mg9O2/0rD54Pg==",
      "dependencies": {
        "browserslist": "^4.16.6",
        "caniuse-api": "^3.0.0",
        "colord": "^2.9.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-convert-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-convert-values/-/postcss-convert-values-5.1.3.tgz",
      "integrity": "sha512-82pC1xkJZtcJEfiLw6UXnXVXScgtBrjlO5CBmuDQc+dlb88ZYheFsjTn40+zBVi3DkfF7iezO0nJUPLcJK3pvA==",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-comments": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/postcss-discard-comments/-/postcss-discard-comments-5.1.2.tgz",
      "integrity": "sha512-+L8208OVbHVF2UQf1iDmRcbdjJkuBF6IS29yBDSiWUIzpYaAhtNl6JYnYm12FnkeCwQqF5LeklOu6rAqgfBZqQ==",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-duplicates": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-duplicates/-/postcss-discard-duplicates-5.1.0.tgz",
      "integrity": "sha512-zmX3IoSI2aoenxHV6C7plngHWWhUOV3sP1T8y2ifzxzbtnuhk1EdPwm0S1bIUNaJ2eNbWeGLEwzw8huPD67aQw==",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-empty": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-discard-empty/-/postcss-discard-empty-5.1.1.tgz",
      "integrity": "sha512-zPz4WljiSuLWsI0ir4Mcnr4qQQ5e1Ukc3i7UfE2XcrwKK2LIPIqE5jxMRxO6GbI3cv//ztXDsXwEWT3BHOGh3A==",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-overridden": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-overridden/-/postcss-discard-overridden-5.1.0.tgz",
      "integrity": "sha512-21nOL7RqWR1kasIVdKs8HNqQJhFxLsyRfAnUDm4Fe4t4mCWL9OJiHvlHPjcd8zc5Myu89b/7wZDnOSjFgeWRtw==",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-unused": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-unused/-/postcss-discard-unused-5.1.0.tgz",
      "integrity": "sha512-KwLWymI9hbwXmJa0dkrzpRbSJEh0vVUd7r8t0yOGPcfKzyJJxFM8kLyC5Ev9avji6nY95pOp1W6HqIrfT+0VGw==",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-loader": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-7.0.2.tgz",
      "integrity": "sha512-fUJzV/QH7NXUAqV8dWJ9Lg4aTkDCezpTS5HgJ2DvqznexTbSTxgi/dTECvTZ15BwKTtk8G/bqI/QTu2HPd3ZCg==",
      "dependencies": {
        "cosmiconfig": "^7.0.0",
        "klona": "^2.0.5",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">= 14.15.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "postcss": "^7.0.0 || ^8.0.1",
        "webpack": "^5.0.0"
      }
    },
    "node_modules/postcss-merge-idents": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-merge-idents/-/postcss-merge-idents-5.1.1.tgz",
      "integrity": "sha512-pCijL1TREiCoog5nQp7wUe+TUonA2tC2sQ54UGeMmryK3UFGIYKqDyjnqd6RcuI4znFn9hWSLNN8xKE/vWcUQw==",
      "dependencies": {
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-merge-longhand": {
      "version": "5.1.7",
      "resolved": "https://registry.npmjs.org/postcss-merge-longhand/-/postcss-merge-longhand-5.1.7.tgz",
      "integrity": "sha512-YCI9gZB+PLNskrK0BB3/2OzPnGhPkBEwmwhfYk1ilBHYVAZB7/tkTHFBAnCrvBBOmeYyMYw3DMjT55SyxMBzjQ==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "stylehacks": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-merge-rules": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-merge-rules/-/postcss-merge-rules-5.1.3.tgz",
      "integrity": "sha512-LbLd7uFC00vpOuMvyZop8+vvhnfRGpp2S+IMQKeuOZZapPRY4SMq5ErjQeHbHsjCUgJkRNrlU+LmxsKIqPKQlA==",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0",
        "cssnano-utils": "^3.1.0",
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-font-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-minify-font-values/-/postcss-minify-font-values-5.1.0.tgz",
      "integrity": "sha512-el3mYTgx13ZAPPirSVsHqFzl+BBBDrXvbySvPGFnQcTI4iNslrPaFq4muTkLZmKlGk4gyFAYUBMH30+HurREyA==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-gradients": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-gradients/-/postcss-minify-gradients-5.1.1.tgz",
      "integrity": "sha512-VGvXMTpCEo4qHTNSa9A0a3D+dxGFZCYwR6Jokk+/3oB6flu2/PnPXAh2x7x52EkY5xlIHLm+Le8tJxe/7TNhzw==",
      "dependencies": {
        "colord": "^2.9.1",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-params": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/postcss-minify-params/-/postcss-minify-params-5.1.4.tgz",
      "integrity": "sha512-+mePA3MgdmVmv6g+30rn57USjOGSAyuxUmkfiWpzalZ8aiBkdPYjXWtHuwJGm1v5Ojy0Z0LaSYhHaLJQB0P8Jw==",
      "dependencies": {
        "browserslist": "^4.21.4",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-selectors": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-selectors/-/postcss-minify-selectors-5.2.1.tgz",
      "integrity": "sha512-nPJu7OjZJTsVUmPdm2TcaiohIwxP+v8ha9NehQ2ye9szv4orirRU3SDdtUmKH+10nzn0bAyOXZ0UEr7OpvLehg==",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-modules-extract-imports": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-extract-imports/-/postcss-modules-extract-imports-3.0.0.tgz",
      "integrity": "sha512-bdHleFnP3kZ4NYDhuGlVK+CMrQ/pqUm8bx/oGL93K6gVwiclvX5x0n76fYMKuIGKzlABOy13zsvqjb0f92TEXw==",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-local-by-default": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.0.0.tgz",
      "integrity": "sha512-sT7ihtmGSF9yhm6ggikHdV0hlziDTX7oFoXtuVWeDd3hHObNkcHRo9V3yg7vCAY7cONyxJC/XXCmmiHHcvX7bQ==",
      "dependencies": {
        "icss-utils": "^5.0.0",
        "postcss-selector-parser": "^6.0.2",
        "postcss-value-parser": "^4.1.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-scope": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-scope/-/postcss-modules-scope-3.0.0.tgz",
      "integrity": "sha512-hncihwFA2yPath8oZ15PZqvWGkWf+XUfQgUGamS4LqoP1anQLOsOJw0vr7J7IwLpoY9fatA2qiGUGmuZL0Iqlg==",
      "dependencies": {
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-values": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-values/-/postcss-modules-values-4.0.0.tgz",
      "integrity": "sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==",
      "dependencies": {
        "icss-utils": "^5.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-normalize-charset": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-charset/-/postcss-normalize-charset-5.1.0.tgz",
      "integrity": "sha512-mSgUJ+pd/ldRGVx26p2wz9dNZ7ji6Pn8VWBajMXFf8jk7vUoSrZ2lt/wZR7DtlZYKesmZI680qjr2CeFF2fbUg==",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-display-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-display-values/-/postcss-normalize-display-values-5.1.0.tgz",
      "integrity": "sha512-WP4KIM4o2dazQXWmFaqMmcvsKmhdINFblgSeRgn8BJ6vxaMyaJkwAzpPpuvSIoG/rmX3M+IrRZEz2H0glrQNEA==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-positions": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-positions/-/postcss-normalize-positions-5.1.1.tgz",
      "integrity": "sha512-6UpCb0G4eofTCQLFVuI3EVNZzBNPiIKcA1AKVka+31fTVySphr3VUgAIULBhxZkKgwLImhzMR2Bw1ORK+37INg==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-repeat-style": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-repeat-style/-/postcss-normalize-repeat-style-5.1.1.tgz",
      "integrity": "sha512-mFpLspGWkQtBcWIRFLmewo8aC3ImN2i/J3v8YCFUwDnPu3Xz4rLohDO26lGjwNsQxB3YF0KKRwspGzE2JEuS0g==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-string": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-string/-/postcss-normalize-string-5.1.0.tgz",
      "integrity": "sha512-oYiIJOf4T9T1N4i+abeIc7Vgm/xPCGih4bZz5Nm0/ARVJ7K6xrDlLwvwqOydvyL3RHNf8qZk6vo3aatiw/go3w==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-timing-functions": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-timing-functions/-/postcss-normalize-timing-functions-5.1.0.tgz",
      "integrity": "sha512-DOEkzJ4SAXv5xkHl0Wa9cZLF3WCBhF3o1SKVxKQAa+0pYKlueTpCgvkFAHfk+Y64ezX9+nITGrDZeVGgITJXjg==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-unicode": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-unicode/-/postcss-normalize-unicode-5.1.1.tgz",
      "integrity": "sha512-qnCL5jzkNUmKVhZoENp1mJiGNPcsJCs1aaRmURmeJGES23Z/ajaln+EPTD+rBeNkSryI+2WTdW+lwcVdOikrpA==",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-url/-/postcss-normalize-url-5.1.0.tgz",
      "integrity": "sha512-5upGeDO+PVthOxSmds43ZeMeZfKH+/DKgGRD7TElkkyS46JXAUhMzIKiCa7BabPeIy3AQcTkXwVVN7DbqsiCew==",
      "dependencies": {
        "normalize-url": "^6.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-whitespace": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-whitespace/-/postcss-normalize-whitespace-5.1.1.tgz",
      "integrity": "sha512-83ZJ4t3NUDETIHTa3uEg6asWjSBYL5EdkVB0sDncx9ERzOKBVJIUeDO9RyA9Zwtig8El1d79HBp0JEi8wvGQnA==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-ordered-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-ordered-values/-/postcss-ordered-values-5.1.3.tgz",
      "integrity": "sha512-9UO79VUhPwEkzbb3RNpqqghc6lcYej1aveQteWY+4POIwlqkYE21HKWaLDF6lWNuqCobEAyTovVhtI32Rbv2RQ==",
      "dependencies": {
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-reduce-idents": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/postcss-reduce-idents/-/postcss-reduce-idents-5.2.0.tgz",
      "integrity": "sha512-BTrLjICoSB6gxbc58D5mdBK8OhXRDqud/zodYfdSi52qvDHdMwk+9kB9xsM8yJThH/sZU5A6QVSmMmaN001gIg==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-reduce-initial": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-reduce-initial/-/postcss-reduce-initial-5.1.1.tgz",
      "integrity": "sha512-//jeDqWcHPuXGZLoolFrUXBDyuEGbr9S2rMo19bkTIjBQ4PqkaO+oI8wua5BOUxpfi97i3PCoInsiFIEBfkm9w==",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-reduce-transforms": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-reduce-transforms/-/postcss-reduce-transforms-5.1.0.tgz",
      "integrity": "sha512-2fbdbmgir5AvpW9RLtdONx1QoYG2/EtqpNQbFASDlixBbAYuTcJ0dECwlqNqH7VbaUnEnh8SrxOe2sRIn24XyQ==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.0.11",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.11.tgz",
      "integrity": "sha512-zbARubNdogI9j7WY4nQJBiNqQf3sLS3wCP4WfOidu+p28LofJqDH1tcXypGrcmMHhDk2t9wGhCsYe/+szLTy1g==",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-sort-media-queries": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/postcss-sort-media-queries/-/postcss-sort-media-queries-4.3.0.tgz",
      "integrity": "sha512-jAl8gJM2DvuIJiI9sL1CuiHtKM4s5aEIomkU8G3LFvbP+p8i7Sz8VV63uieTgoewGqKbi+hxBTiOKJlB35upCg==",
      "dependencies": {
        "sort-css-media-queries": "2.1.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.4.16"
      }
    },
    "node_modules/postcss-svgo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-svgo/-/postcss-svgo-5.1.0.tgz",
      "integrity": "sha512-D75KsH1zm5ZrHyxPakAxJWtkyXew5qwS70v56exwvw542d9CRtTo78K0WeFxZB4G7JXKKMbEZtZayTGdIky/eA==",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "svgo": "^2.7.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-unique-selectors": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-unique-selectors/-/postcss-unique-selectors-5.1.1.tgz",
      "integrity": "sha512-5JiODlELrz8L2HwxfPnhOWZYWDxVHWL83ufOv84NrcgipI7TaeRsatAhK4Tr2/ZiYldpK/wBvw5BD3qfaK96GA==",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ=="
    },
    "node_modules/postcss-zindex": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-zindex/-/postcss-zindex-5.1.0.tgz",
      "integrity": "sha512-fgFMf0OtVSBR1va1JNHYgMxYk73yhn/qb4uQDq1DLGYolz8gHCyr/sesEuGUaYs58E3ZJRcpoGuPVoB7Meiq9A==",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/prepend-http": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
      "integrity": "sha512-ravE6m9Atw9Z/jjttRUZ+clIXogdghyZAuWJ3qEzjT+jI/dL1ifAqhZeC5VHzQp1MSt1+jxKkFNemj/iO7tVUA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pretty-error": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/pretty-error/-/pretty-error-4.0.0.tgz",
      "integrity": "sha512-AoJ5YMAcXKYxKhuJGdcvse+Voc6v1RgnsR3nWcYU7q4t6z0Q6T86sv5Zq8VIRbOWWFpvdGE83LtdSMNd+6Y0xw==",
      "dependencies": {
        "lodash": "^4.17.20",
        "renderkid": "^3.0.0"
      }
    },
    "node_modules/pretty-time": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/pretty-time/-/pretty-time-1.1.0.tgz",
      "integrity": "sha512-28iF6xPQrP8Oa6uxE6a1biz+lWeTOAPKggvjB8HAs6nVMKZwf5bG++632Dx614hIWgUPkgivRfG+a8uAXGTIbA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/prism-react-renderer": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/prism-react-renderer/-/prism-react-renderer-1.3.5.tgz",
      "integrity": "sha512-IJ+MSwBWKG+SM3b2SUfdrhC+gu01QkV2KmRQgREThBfSQRoufqRfxfHUxpG1WcaFjP+kojcFyO9Qqtpgt3qLCg==",
      "peerDependencies": {
        "react": ">=0.14.9"
      }
    },
    "node_modules/prismjs": {
      "version": "1.29.0",
      "resolved": "https://registry.npmjs.org/prismjs/-/prismjs-1.29.0.tgz",
      "integrity": "sha512-Kx/1w86q/epKcmte75LNrEoT+lX8pBpavuAbvJWRXar7Hz8jrtF+e3vY751p0R8H9HdArwaCTNDDzHg/ScJK1Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "node_modules/promise": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/promise/-/promise-7.3.1.tgz",
      "integrity": "sha512-nolQXZ/4L+bP/UGlkfaIujX9BKxGwmQ9OT4mOt5yvy8iK1h3wqTEJCijzGANTCCl9nWjY41juyAn2K3Q1hLLTg==",
      "dependencies": {
        "asap": "~2.0.3"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/property-information": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/property-information/-/property-information-5.6.0.tgz",
      "integrity": "sha512-YUHSPk+A30YPv+0Qf8i9Mbfe/C0hdPXk1s1jPVToV8pk8BQtpw10ct89Eo7OWkutrwqvT0eicAxlOg3dOAu8JA==",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-addr/node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/punycode": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
      "integrity": "sha512-jmYNElW7yvO7TV33CjSmvSiE2yco3bV2czu/OzDKdMNVZQWfxCblURLhf+47syQRBntjfLdd/H0egrzIG+oaFQ=="
    },
    "node_modules/pupa": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/pupa/-/pupa-2.1.1.tgz",
      "integrity": "sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==",
      "dependencies": {
        "escape-goat": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pure-color": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/pure-color/-/pure-color-1.3.0.tgz",
      "integrity": "sha512-QFADYnsVoBMw1srW7OVKEYjG+MbIa49s54w1MA1EDY6r2r/sTcKKYqRX1f4GYvnXP7eN/Pe9HFcX+hwzmrXRHA=="
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/queue": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/queue/-/queue-6.0.2.tgz",
      "integrity": "sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA==",
      "dependencies": {
        "inherits": "~2.0.3"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz",
      "integrity": "sha512-kA5WQoNVo4t9lNx2kQNFCxKeBl5IbbSNBl1M/tLkw9WCn+hxNBAW5Qh8gdhs63CJnhjJ2zQWFoqPJP2sK1AV5A==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body/node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/rc/node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react/-/react-17.0.2.tgz",
      "integrity": "sha512-gnhPt75i/dq/z3/6q/0asP78D0u592D5L1pd7M8P+dck6Fu/jJeL6iVVK23fptSUZj8Vjf++7wXA8UNclGQcbA==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-base16-styling": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/react-base16-styling/-/react-base16-styling-0.6.0.tgz",
      "integrity": "sha512-yvh/7CArceR/jNATXOKDlvTnPKPmGZz7zsenQ3jUwLzHkNUR0CvY3yGYJbWJ/nnxsL8Sgmt5cO3/SILVuPO6TQ==",
      "dependencies": {
        "base16": "^1.0.0",
        "lodash.curry": "^4.0.1",
        "lodash.flow": "^3.3.0",
        "pure-color": "^1.2.0"
      }
    },
    "node_modules/react-dev-utils": {
      "version": "12.0.1",
      "resolved": "https://registry.npmjs.org/react-dev-utils/-/react-dev-utils-12.0.1.tgz",
      "integrity": "sha512-84Ivxmr17KjUupyqzFode6xKhjwuEJDROWKJy/BthkL7Wn6NJ8h4WE6k/exAv6ImS+0oZLRRW5j/aINMHyeGeQ==",
      "dependencies": {
        "@babel/code-frame": "^7.16.0",
        "address": "^1.1.2",
        "browserslist": "^4.18.1",
        "chalk": "^4.1.2",
        "cross-spawn": "^7.0.3",
        "detect-port-alt": "^1.1.6",
        "escape-string-regexp": "^4.0.0",
        "filesize": "^8.0.6",
        "find-up": "^5.0.0",
        "fork-ts-checker-webpack-plugin": "^6.5.0",
        "global-modules": "^2.0.0",
        "globby": "^11.0.4",
        "gzip-size": "^6.0.0",
        "immer": "^9.0.7",
        "is-root": "^2.1.0",
        "loader-utils": "^3.2.0",
        "open": "^8.4.0",
        "pkg-up": "^3.1.0",
        "prompts": "^2.4.2",
        "react-error-overlay": "^6.0.11",
        "recursive-readdir": "^2.2.2",
        "shell-quote": "^1.7.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/react-dev-utils/node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/loader-utils": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-3.2.1.tgz",
      "integrity": "sha512-ZvFw1KWS3GVyYBYb7qkmRM/WwL2TQQBxgCK62rlvm4WpVQ23Nb4tYjApUlfjrEGvOs7KHEsmyUn75OHZrJMWPw==",
      "engines": {
        "node": ">= 12.13.0"
      }
    },
    "node_modules/react-dev-utils/node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dom": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-17.0.2.tgz",
      "integrity": "sha512-s4h96KtLDUQlsENhMn1ar8t2bEa+q/YAtj8pPPdIjPDGBDIVNsrD9aXNWqspUe6AzKCIG0C1HZZLqLV7qpOBGA==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1",
        "scheduler": "^0.20.2"
      },
      "peerDependencies": {
        "react": "17.0.2"
      }
    },
    "node_modules/react-error-overlay": {
      "version": "6.0.11",
      "resolved": "https://registry.npmjs.org/react-error-overlay/-/react-error-overlay-6.0.11.tgz",
      "integrity": "sha512-/6UZ2qgEyH2aqzYZgQPxEnz33NJ2gNsnHA2o5+o4wW9bLM/JYQitNP9xPhsXwC08hMMovfGe/8retsdDsczPRg=="
    },
    "node_modules/react-fast-compare": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/react-fast-compare/-/react-fast-compare-3.2.0.tgz",
      "integrity": "sha512-rtGImPZ0YyLrscKI9xTpV8psd6I8VAtjKCzQDlzyDvqJA8XOW78TXYQwNRNd8g8JZnDu8q9Fu/1v4HPAVwVdHA=="
    },
    "node_modules/react-helmet-async": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/react-helmet-async/-/react-helmet-async-1.3.0.tgz",
      "integrity": "sha512-9jZ57/dAn9t3q6hneQS0wukqC2ENOBgMNVEhb/ZG9ZSxUetzVIw4iAmEU38IaVg3QGYauQPhSeUTuIUtFglWpg==",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "invariant": "^2.2.4",
        "prop-types": "^15.7.2",
        "react-fast-compare": "^3.2.0",
        "shallowequal": "^1.1.0"
      },
      "peerDependencies": {
        "react": "^16.6.0 || ^17.0.0 || ^18.0.0",
        "react-dom": "^16.6.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
    },
    "node_modules/react-json-view": {
      "version": "1.21.3",
      "resolved": "https://registry.npmjs.org/react-json-view/-/react-json-view-1.21.3.tgz",
      "integrity": "sha512-13p8IREj9/x/Ye4WI/JpjhoIwuzEgUAtgJZNBJckfzJt1qyh24BdTm6UQNGnyTq9dapQdrqvquZTo3dz1X6Cjw==",
      "dependencies": {
        "flux": "^4.0.1",
        "react-base16-styling": "^0.6.0",
        "react-lifecycles-compat": "^3.0.4",
        "react-textarea-autosize": "^8.3.2"
      },
      "peerDependencies": {
        "react": "^17.0.0 || ^16.3.0 || ^15.5.4",
        "react-dom": "^17.0.0 || ^16.3.0 || ^15.5.4"
      }
    },
    "node_modules/react-lifecycles-compat": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/react-lifecycles-compat/-/react-lifecycles-compat-3.0.4.tgz",
      "integrity": "sha512-fBASbA6LnOU9dOU2eW7aQ8xmYBSXUIWr+UmF9b1efZBazGNO+rcXT/icdKnYm2pTwcRylVUYwW7H1PHfLekVzA=="
    },
    "node_modules/react-loadable": {
      "name": "@docusaurus/react-loadable",
      "version": "5.5.2",
      "resolved": "https://registry.npmjs.org/@docusaurus/react-loadable/-/react-loadable-5.5.2.tgz",
      "integrity": "sha512-A3dYjdBGuy0IGT+wyLIGIKLRE+sAk1iNk0f1HjNDysO7u8lhL4N3VEm+FAubmJbAztn94F7MxBTPmnixbiyFdQ==",
      "dependencies": {
        "@types/react": "*",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-loadable-ssr-addon-v5-slorber": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/react-loadable-ssr-addon-v5-slorber/-/react-loadable-ssr-addon-v5-slorber-1.0.1.tgz",
      "integrity": "sha512-lq3Lyw1lGku8zUEJPDxsNm1AfYHBrO9Y1+olAYwpUJ2IGFBskM0DMKok97A6LWUpHm+o7IvQBOWu9MLenp9Z+A==",
      "dependencies": {
        "@babel/runtime": "^7.10.3"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "peerDependencies": {
        "react-loadable": "*",
        "webpack": ">=4.41.1 || 5.x"
      }
    },
    "node_modules/react-router": {
      "version": "5.3.4",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-5.3.4.tgz",
      "integrity": "sha512-Ys9K+ppnJah3QuaRiLxk+jDWOR1MekYQrlytiXxC1RyfbdsZkS5pvKAzCCr031xHixZwpnsYNT5xysdFHQaYsA==",
      "dependencies": {
        "@babel/runtime": "^7.12.13",
        "history": "^4.9.0",
        "hoist-non-react-statics": "^3.1.0",
        "loose-envify": "^1.3.1",
        "path-to-regexp": "^1.7.0",
        "prop-types": "^15.6.2",
        "react-is": "^16.6.0",
        "tiny-invariant": "^1.0.2",
        "tiny-warning": "^1.0.0"
      },
      "peerDependencies": {
        "react": ">=15"
      }
    },
    "node_modules/react-router-config": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/react-router-config/-/react-router-config-5.1.1.tgz",
      "integrity": "sha512-DuanZjaD8mQp1ppHjgnnUnyOlqYXZVjnov/JzFhjLEwd3Z4dYjMSnqrEzzGThH47vpCOqPPwJM2FtthLeJ8Pbg==",
      "dependencies": {
        "@babel/runtime": "^7.1.2"
      },
      "peerDependencies": {
        "react": ">=15",
        "react-router": ">=5"
      }
    },
    "node_modules/react-router-dom": {
      "version": "5.3.4",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-5.3.4.tgz",
      "integrity": "sha512-m4EqFMHv/Ih4kpcBCONHbkT68KoAeHN4p3lAGoNryfHi0dMy0kCzEZakiKRsvg5wHZ/JLrLW8o8KomWiz/qbYQ==",
      "dependencies": {
        "@babel/runtime": "^7.12.13",
        "history": "^4.9.0",
        "loose-envify": "^1.3.1",
        "prop-types": "^15.6.2",
        "react-router": "5.3.4",
        "tiny-invariant": "^1.0.2",
        "tiny-warning": "^1.0.0"
      },
      "peerDependencies": {
        "react": ">=15"
      }
    },
    "node_modules/react-textarea-autosize": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/react-textarea-autosize/-/react-textarea-autosize-8.4.0.tgz",
      "integrity": "sha512-YrTFaEHLgJsi8sJVYHBzYn+mkP3prGkmP2DKb/tm0t7CLJY5t1Rxix8070LAKb0wby7bl/lf2EeHkuMihMZMwQ==",
      "dependencies": {
        "@babel/runtime": "^7.10.2",
        "use-composed-ref": "^1.3.0",
        "use-latest": "^1.2.1"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/reading-time": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/reading-time/-/reading-time-1.5.0.tgz",
      "integrity": "sha512-onYyVhBNr4CmAxFsKS7bz+uTLRakypIe4R+5A824vBSkQy/hB3fZepoVEf8OVAxzLvK+H/jm9TzpI3ETSm64Kg=="
    },
    "node_modules/rechoir": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz",
      "integrity": "sha512-HFM8rkZ+i3zrV+4LQjwQ0W+ez98pApMGM3HUrN04j3CqzPOzl9nmP15Y8YXNm8QHGv/eacOVEjqhmWpkRV0NAw==",
      "dependencies": {
        "resolve": "^1.1.6"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/recursive-readdir": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/recursive-readdir/-/recursive-readdir-2.2.3.tgz",
      "integrity": "sha512-8HrF5ZsXk5FAH9dgsx3BlUer73nIhuj+9OrQwEbLTPOBzGkL1lsFCR01am+v+0m2Cmbs1nP12hLDl5FA7EszKA==",
      "dependencies": {
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A=="
    },
    "node_modules/regenerate-unicode-properties": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.1.0.tgz",
      "integrity": "sha512-d1VudCLoIGitcU/hEg2QqvyGZQmdC0Lf8BqdOMXGFSvJP4bNV1+XqbPQeHHLD51Jh4QJJ225dlIFvY4Ly6MXmQ==",
      "dependencies": {
        "regenerate": "^1.4.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.13.11",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg=="
    },
    "node_modules/regenerator-transform": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.15.1.tgz",
      "integrity": "sha512-knzmNAcuyxV+gQCufkYcvOqX/qIIfHLv0u5x79kRxuGojfYVky1f15TzZEu2Avte8QGepvUNTnLskf8E6X6Vyg==",
      "dependencies": {
        "@babel/runtime": "^7.8.4"
      }
    },
    "node_modules/regexpu-core": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-5.2.2.tgz",
      "integrity": "sha512-T0+1Zp2wjF/juXMrMxHxidqGYn8U4R+zleSJhX9tQ1PUsS8a9UtYfbsF9LdiVgNX3kiX8RNaKM42nfSgvFJjmw==",
      "dependencies": {
        "regenerate": "^1.4.2",
        "regenerate-unicode-properties": "^10.1.0",
        "regjsgen": "^0.7.1",
        "regjsparser": "^0.9.1",
        "unicode-match-property-ecmascript": "^2.0.0",
        "unicode-match-property-value-ecmascript": "^2.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/registry-auth-token": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-4.2.2.tgz",
      "integrity": "sha512-PC5ZysNb42zpFME6D/XlIgtNGdTl8bBOCw90xQLVMpzuuubJKYDWFAEuUNc+Cn8Z8724tg2SDhDRrkVEsqfDMg==",
      "dependencies": {
        "rc": "1.2.8"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/registry-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-5.1.0.tgz",
      "integrity": "sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==",
      "dependencies": {
        "rc": "^1.2.8"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/regjsgen": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/regjsgen/-/regjsgen-0.7.1.tgz",
      "integrity": "sha512-RAt+8H2ZEzHeYWxZ3H2z6tF18zyyOnlcdaafLrm21Bguj7uZy6ULibiAFdXEtKQY4Sy7wDTwDiOazasMLc4KPA=="
    },
    "node_modules/regjsparser": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.9.1.tgz",
      "integrity": "sha512-dQUtn90WanSNl+7mQKcXAgZxvUe7Z0SqXlgzv0za4LwiUhyzBC58yQO3liFoUgu8GiJVInAhJjkj1N0EtQ5nkQ==",
      "dependencies": {
        "jsesc": "~0.5.0"
      },
      "bin": {
        "regjsparser": "bin/parser"
      }
    },
    "node_modules/regjsparser/node_modules/jsesc": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-0.5.0.tgz",
      "integrity": "sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==",
      "bin": {
        "jsesc": "bin/jsesc"
      }
    },
    "node_modules/relateurl": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz",
      "integrity": "sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/remark-emoji": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/remark-emoji/-/remark-emoji-2.2.0.tgz",
      "integrity": "sha512-P3cj9s5ggsUvWw5fS2uzCHJMGuXYRb0NnZqYlNecewXt8QBU9n5vW3DUUKOhepS8F9CwdMx9B8a3i7pqFWAI5w==",
      "dependencies": {
        "emoticon": "^3.2.0",
        "node-emoji": "^1.10.0",
        "unist-util-visit": "^2.0.3"
      }
    },
    "node_modules/remark-footnotes": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/remark-footnotes/-/remark-footnotes-2.0.0.tgz",
      "integrity": "sha512-3Clt8ZMH75Ayjp9q4CorNeyjwIxHFcTkaektplKGl2A1jNGEUey8cKL0ZC5vJwfcD5GFGsNLImLG/NGzWIzoMQ==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-mdx": {
      "version": "1.6.22",
      "resolved": "https://registry.npmjs.org/remark-mdx/-/remark-mdx-1.6.22.tgz",
      "integrity": "sha512-phMHBJgeV76uyFkH4rvzCftLfKCr2RZuF+/gmVcaKrpsihyzmhXjA0BEMDaPTXG5y8qZOKPVo83NAOX01LPnOQ==",
      "dependencies": {
        "@babel/core": "7.12.9",
        "@babel/helper-plugin-utils": "7.10.4",
        "@babel/plugin-proposal-object-rest-spread": "7.12.1",
        "@babel/plugin-syntax-jsx": "7.12.1",
        "@mdx-js/util": "1.6.22",
        "is-alphabetical": "1.0.4",
        "remark-parse": "8.0.3",
        "unified": "9.2.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-mdx/node_modules/@babel/core": {
      "version": "7.12.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.12.9.tgz",
      "integrity": "sha512-gTXYh3M5wb7FRXQy+FErKFAv90BnlOuNn1QkCK2lREoPAjrQCO49+HVSrFoe5uakFAF5eenS75KbO2vQiLrTMQ==",
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "@babel/generator": "^7.12.5",
        "@babel/helper-module-transforms": "^7.12.1",
        "@babel/helpers": "^7.12.5",
        "@babel/parser": "^7.12.7",
        "@babel/template": "^7.12.7",
        "@babel/traverse": "^7.12.9",
        "@babel/types": "^7.12.7",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.1",
        "json5": "^2.1.2",
        "lodash": "^4.17.19",
        "resolve": "^1.3.2",
        "semver": "^5.4.1",
        "source-map": "^0.5.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/remark-mdx/node_modules/@babel/helper-plugin-utils": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.10.4.tgz",
      "integrity": "sha512-O4KCvQA6lLiMU9l2eawBPMf1xPP8xPfB3iEQw150hOVTqj/rfXz0ThTb4HEzqQfs2Bmo5Ay8BzxfzVtBrr9dVg=="
    },
    "node_modules/remark-mdx/node_modules/@babel/plugin-proposal-object-rest-spread": {
      "version": "7.12.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-object-rest-spread/-/plugin-proposal-object-rest-spread-7.12.1.tgz",
      "integrity": "sha512-s6SowJIjzlhx8o7lsFx5zmY4At6CTtDvgNQDdPzkBQucle58A6b/TTeEBYtyDgmcXjUTM+vE8YOGHZzzbc/ioA==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.0",
        "@babel/plugin-transform-parameters": "^7.12.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/remark-mdx/node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.12.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.12.1.tgz",
      "integrity": "sha512-1yRi7yAtB0ETgxdY9ti/p2TivUxJkTdhu/ZbF9MshVGqOx1TdB3b7xCXs49Fupgg50N45KcAsRP/ZqWjs9SRjg==",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/remark-mdx/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/remark-mdx/node_modules/source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/remark-mdx/node_modules/unified": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/unified/-/unified-9.2.0.tgz",
      "integrity": "sha512-vx2Z0vY+a3YoTj8+pttM3tiJHCwY5UFbYdiWrwBEbHmK8pvsPj2rtAX2BFfgXen8T39CJWblWRDT4L5WGXtDdg==",
      "dependencies": {
        "bail": "^1.0.0",
        "extend": "^3.0.0",
        "is-buffer": "^2.0.0",
        "is-plain-obj": "^2.0.0",
        "trough": "^1.0.0",
        "vfile": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-parse": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/remark-parse/-/remark-parse-8.0.3.tgz",
      "integrity": "sha512-E1K9+QLGgggHxCQtLt++uXltxEprmWzNfg+MxpfHsZlrddKzZ/hZyWHDbK3/Ap8HJQqYJRXP+jHczdL6q6i85Q==",
      "dependencies": {
        "ccount": "^1.0.0",
        "collapse-white-space": "^1.0.2",
        "is-alphabetical": "^1.0.0",
        "is-decimal": "^1.0.0",
        "is-whitespace-character": "^1.0.0",
        "is-word-character": "^1.0.0",
        "markdown-escapes": "^1.0.0",
        "parse-entities": "^2.0.0",
        "repeat-string": "^1.5.4",
        "state-toggle": "^1.0.0",
        "trim": "0.0.1",
        "trim-trailing-lines": "^1.0.0",
        "unherit": "^1.0.4",
        "unist-util-remove-position": "^2.0.0",
        "vfile-location": "^3.0.0",
        "xtend": "^4.0.1"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-squeeze-paragraphs": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/remark-squeeze-paragraphs/-/remark-squeeze-paragraphs-4.0.0.tgz",
      "integrity": "sha512-8qRqmL9F4nuLPIgl92XUuxI3pFxize+F1H0e/W3llTk0UsjJaj01+RrirkMw7P21RKe4X6goQhYRSvNWX+70Rw==",
      "dependencies": {
        "mdast-squeeze-paragraphs": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/renderkid": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/renderkid/-/renderkid-3.0.0.tgz",
      "integrity": "sha512-q/7VIQA8lmM1hF+jn+sFSPWGlMkSAeNYcPLmDQx2zzuiDfaLrOmumR8iaUKlenFgh0XRPIUeSPlH3A+AW3Z5pg==",
      "dependencies": {
        "css-select": "^4.1.3",
        "dom-converter": "^0.2.0",
        "htmlparser2": "^6.1.0",
        "lodash": "^4.17.21",
        "strip-ansi": "^6.0.1"
      }
    },
    "node_modules/renderkid/node_modules/css-select": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-4.3.0.tgz",
      "integrity": "sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^6.0.1",
        "domhandler": "^4.3.1",
        "domutils": "^2.8.0",
        "nth-check": "^2.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/renderkid/node_modules/dom-serializer": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-1.4.1.tgz",
      "integrity": "sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.2.0",
        "entities": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/renderkid/node_modules/domhandler": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-4.3.1.tgz",
      "integrity": "sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==",
      "dependencies": {
        "domelementtype": "^2.2.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/renderkid/node_modules/domutils": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-2.8.0.tgz",
      "integrity": "sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==",
      "dependencies": {
        "dom-serializer": "^1.0.1",
        "domelementtype": "^2.2.0",
        "domhandler": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/renderkid/node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/renderkid/node_modules/htmlparser2": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-6.1.0.tgz",
      "integrity": "sha512-gyyPk6rgonLFEDGoeRgQNaEUvdJ4ktTmmUh/h2t7s+M8oPpIPxgNACWa+6ESR57kXstwqPiCut0V8NRpcwgU7A==",
      "funding": [
        "https://github.com/fb55/htmlparser2?sponsor=1",
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.0.0",
        "domutils": "^2.5.2",
        "entities": "^2.0.0"
      }
    },
    "node_modules/repeat-string": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz",
      "integrity": "sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-like": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/require-like/-/require-like-0.1.2.tgz",
      "integrity": "sha512-oyrU88skkMtDdauHDuKVrgR+zuItqr6/c//FXzvmxRGMexSDc6hNvJInGW3LL46n+8b50RykrvwSUIIQH2LQ5A==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ=="
    },
    "node_modules/resolve": {
      "version": "1.22.1",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
      "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
      "dependencies": {
        "is-core-module": "^2.9.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/resolve-pathname": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-pathname/-/resolve-pathname-3.0.0.tgz",
      "integrity": "sha512-C7rARubxI8bXFNB/hqcp/4iUeIXJhJZvFPFPiSPRnhU5UPxzMFIl+2E6yY6c4k9giDJAhtV+enfA+G89N6Csng=="
    },
    "node_modules/responselike": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
      "integrity": "sha512-/Fpe5guzJk1gPqdJLJR5u7eG/gNY4nImjbRDaVWVMRhne55TCmj2i9Q+54PBRfatRC8v/rIiv9BN0pMd9OV5EQ==",
      "dependencies": {
        "lowercase-keys": "^1.0.0"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rtl-detect": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/rtl-detect/-/rtl-detect-1.0.4.tgz",
      "integrity": "sha512-EBR4I2VDSSYr7PkBmFy04uhycIpDKp+21p/jARYXlCSjQksTBQcJ0HFUPOO79EPPH5JS6VAhiIQbycf0O3JAxQ=="
    },
    "node_modules/rtlcss": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/rtlcss/-/rtlcss-3.5.0.tgz",
      "integrity": "sha512-wzgMaMFHQTnyi9YOwsx9LjOxYXJPzS8sYnFaKm6R5ysvTkwzHiB0vxnbHwchHQT65PTdBjDG21/kQBWI7q9O7A==",
      "dependencies": {
        "find-up": "^5.0.0",
        "picocolors": "^1.0.0",
        "postcss": "^8.3.11",
        "strip-json-comments": "^3.1.1"
      },
      "bin": {
        "rtlcss": "bin/rtlcss.js"
      }
    },
    "node_modules/rtlcss/node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/rtlcss/node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/rtlcss/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/rtlcss/node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/rxjs": {
      "version": "7.8.0",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.0.tgz",
      "integrity": "sha512-F2+gxDshqmIub1KdvZkaEfGDwLNpPvk9Fs6LD/MyQxNgMds/WH9OdDDXOmxUZpME+iSK3rQCctkL0DYyytUqMg==",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/sax": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="
    },
    "node_modules/scheduler": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.20.2.tgz",
      "integrity": "sha512-2eWfGgAqqWFGqtdMmcL5zCMK1U8KlXv8SQFGglL3CEtd0aDVDWgeF/YoCmvln55m5zSk3J/20hTaSBeSObsQDQ==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      }
    },
    "node_modules/schema-utils": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.1.tgz",
      "integrity": "sha512-SHiNtMOUGWBQJwzISiVYKu82GiV4QYGePp3odlY1tuKO7gPtphAT5R/py0fA6xtbgLL/RvtJZnU9b8s0F1q0Xg==",
      "dependencies": {
        "@types/json-schema": "^7.0.5",
        "ajv": "^6.12.4",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/section-matter": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/section-matter/-/section-matter-1.0.0.tgz",
      "integrity": "sha512-vfD3pmTzGpufjScBh50YHKzEu2lxBWhVEHsNGoEXmCmn2hKGfeNLYMzCJpe8cD7gqX7TJluOVpBkAequ6dgMmA==",
      "dependencies": {
        "extend-shallow": "^2.0.1",
        "kind-of": "^6.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/select-hose": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/select-hose/-/select-hose-2.0.0.tgz",
      "integrity": "sha512-mEugaLK+YfkijB4fx0e6kImuJdCIt2LxCRcbEYPqRGCs4F2ogyfZU5IAZRdjCP8JPq2AtdNoC/Dux63d9Kiryg=="
    },
    "node_modules/selfsigned": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/selfsigned/-/selfsigned-2.1.1.tgz",
      "integrity": "sha512-GSL3aowiF7wa/WtSFwnUrludWFoNhftq8bUkH9pkzjpN2XSPOAYEgg6e0sS9s0rZwgJzJiQRPU18A6clnoW5wQ==",
      "dependencies": {
        "node-forge": "^1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver": {
      "version": "7.3.8",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
      "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver-diff": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/semver-diff/-/semver-diff-3.1.1.tgz",
      "integrity": "sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==",
      "dependencies": {
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/semver-diff/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/semver/node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/send/node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.0.tgz",
      "integrity": "sha512-Qr3TosvguFt8ePWqsvRfrKyQXIiW+nGbYpy8XK24NQHE83caxWt+mIymTT19DGFbNWNLfEwsrkSmN64lVWB9ag==",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/serve-handler": {
      "version": "6.1.5",
      "resolved": "https://registry.npmjs.org/serve-handler/-/serve-handler-6.1.5.tgz",
      "integrity": "sha512-ijPFle6Hwe8zfmBxJdE+5fta53fdIY0lHISJvuikXB3VYFafRjMRpOffSPvCYsbKyBA7pvy9oYr/BT1O3EArlg==",
      "dependencies": {
        "bytes": "3.0.0",
        "content-disposition": "0.5.2",
        "fast-url-parser": "1.1.3",
        "mime-types": "2.1.18",
        "minimatch": "3.1.2",
        "path-is-inside": "1.0.2",
        "path-to-regexp": "2.2.1",
        "range-parser": "1.2.0"
      }
    },
    "node_modules/serve-handler/node_modules/path-to-regexp": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-2.2.1.tgz",
      "integrity": "sha512-gu9bD6Ta5bwGrrU8muHzVOBFFREpp2iRkVfhBJahwJ6p6Xw20SjT0MxLnwkjOibQmGSYhiUnf2FLe7k+jcFmGQ=="
    },
    "node_modules/serve-index": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/serve-index/-/serve-index-1.9.1.tgz",
      "integrity": "sha512-pXHfKNP4qujrtteMrSBb0rc8HJ9Ms/GrXwcUtUtD5s4ewDJI8bT3Cz2zTVRMKtri49pLx2e0Ya8ziP5Ya2pZZw==",
      "dependencies": {
        "accepts": "~1.3.4",
        "batch": "0.6.1",
        "debug": "2.6.9",
        "escape-html": "~1.0.3",
        "http-errors": "~1.6.2",
        "mime-types": "~2.1.17",
        "parseurl": "~1.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/serve-index/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/serve-index/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/http-errors": {
      "version": "1.6.3",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
      "integrity": "sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.3",
        "setprototypeof": "1.1.0",
        "statuses": ">= 1.4.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw=="
    },
    "node_modules/serve-index/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/serve-index/node_modules/setprototypeof": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
      "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ=="
    },
    "node_modules/serve-index/node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA=="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shallow-clone": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz",
      "integrity": "sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==",
      "dependencies": {
        "kind-of": "^6.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shell-quote": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.7.4.tgz",
      "integrity": "sha512-8o/QEhSSRb1a5i7TFR0iM4G16Z0vYB2OQVs4G3aAFXjn3T6yEx8AZxy1PgDF7I00LZHYA3WxaSYIf5e5sAX8Rw==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/shelljs": {
      "version": "0.8.5",
      "resolved": "https://registry.npmjs.org/shelljs/-/shelljs-0.8.5.tgz",
      "integrity": "sha512-TiwcRcrkhHvbrZbnRcFYMLl30Dfov3HKqzp5tO5b4pt6G/SezKcYhmDg15zXVBswHmctSAQKznqNW2LO5tTDow==",
      "dependencies": {
        "glob": "^7.0.0",
        "interpret": "^1.0.0",
        "rechoir": "^0.6.2"
      },
      "bin": {
        "shjs": "bin/shjs"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "node_modules/sirv": {
      "version": "1.0.19",
      "resolved": "https://registry.npmjs.org/sirv/-/sirv-1.0.19.tgz",
      "integrity": "sha512-JuLThK3TnZG1TAKDwNIqNq6QA2afLOCcm+iE8D1Kj3GA40pSPsxQjjJl0J8X3tsR7T+CP1GavpzLwYkgVLWrZQ==",
      "dependencies": {
        "@polka/url": "^1.0.0-next.20",
        "mrmime": "^1.0.0",
        "totalist": "^1.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg=="
    },
    "node_modules/sitemap": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/sitemap/-/sitemap-7.1.1.tgz",
      "integrity": "sha512-mK3aFtjz4VdJN0igpIJrinf3EO8U8mxOPsTBzSsy06UtjZQJ3YY3o3Xa7zSc5nMqcMrRwlChHZ18Kxg0caiPBg==",
      "dependencies": {
        "@types/node": "^17.0.5",
        "@types/sax": "^1.2.1",
        "arg": "^5.0.0",
        "sax": "^1.2.4"
      },
      "bin": {
        "sitemap": "dist/cli.js"
      },
      "engines": {
        "node": ">=12.0.0",
        "npm": ">=5.6.0"
      }
    },
    "node_modules/sitemap/node_modules/@types/node": {
      "version": "17.0.45",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-17.0.45.tgz",
      "integrity": "sha512-w+tIMs3rq2afQdsPJlODhoUEKzFP1ayaoyl1CcnwtIlsVe7K7bA1NGm4s3PraqTLlXnbIN84zuBlxBWo1u9BLw=="
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/sockjs": {
      "version": "0.3.24",
      "resolved": "https://registry.npmjs.org/sockjs/-/sockjs-0.3.24.tgz",
      "integrity": "sha512-GJgLTZ7vYb/JtPSSZ10hsOYIvEYsjbNU+zPdIHcUaWVNUEPivzxku31865sSSud0Da0W4lEeOPlmw93zLQchuQ==",
      "dependencies": {
        "faye-websocket": "^0.11.3",
        "uuid": "^8.3.2",
        "websocket-driver": "^0.7.4"
      }
    },
    "node_modules/sort-css-media-queries": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/sort-css-media-queries/-/sort-css-media-queries-2.1.0.tgz",
      "integrity": "sha512-IeWvo8NkNiY2vVYdPa27MCQiR0MN0M80johAYFVxWWXQ44KU84WNxjslwBHmc/7ZL2ccwkM7/e6S5aiKZXm7jA==",
      "engines": {
        "node": ">= 6.3.0"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/space-separated-tokens": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/space-separated-tokens/-/space-separated-tokens-1.1.5.tgz",
      "integrity": "sha512-q/JSVd1Lptzhf5bkYm4ob4iWPjx0KiRe3sRFBNrVqbJkFaBm5vbbowy1mymoPNLRa52+oadOhJ+K49wsSeSjTA==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/spdy": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/spdy/-/spdy-4.0.2.tgz",
      "integrity": "sha512-r46gZQZQV+Kl9oItvl1JZZqJKGr+oEkB08A6BzkiR7593/7IbtuncXHd2YoYeTsG4157ZssMu9KYvUHLcjcDoA==",
      "dependencies": {
        "debug": "^4.1.0",
        "handle-thing": "^2.0.0",
        "http-deceiver": "^1.2.7",
        "select-hose": "^2.0.0",
        "spdy-transport": "^3.0.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/spdy-transport": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/spdy-transport/-/spdy-transport-3.0.0.tgz",
      "integrity": "sha512-hsLVFE5SjA6TCisWeJXFKniGGOpBgMLmerfO2aCyCU5s7nJ/rpAepqmFifv/GCbSbueEeAJJnmSQ2rKC/g8Fcw==",
      "dependencies": {
        "debug": "^4.1.0",
        "detect-node": "^2.0.4",
        "hpack.js": "^2.1.6",
        "obuf": "^1.1.2",
        "readable-stream": "^3.0.6",
        "wbuf": "^1.7.3"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g=="
    },
    "node_modules/stable": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/stable/-/stable-0.1.8.tgz",
      "integrity": "sha512-ji9qxRnOVfcuLDySj9qzhGSEFVobyt1kIOSkj1qZzYLzq7Tos/oUUWvotUPQLlrsidqsK6tBH89Bc9kL5zHA6w==",
      "deprecated": "Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility"
    },
    "node_modules/state-toggle": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/state-toggle/-/state-toggle-1.0.3.tgz",
      "integrity": "sha512-d/5Z4/2iiCnHw6Xzghyhb+GcmF89bxwgXG60wjIiZaxnymbyOmI8Hk4VqHXiVVp6u2ysaskFfXg3ekCj4WNftQ==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/std-env": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.3.1.tgz",
      "integrity": "sha512-3H20QlwQsSm2OvAxWIYhs+j01MzzqwMwGiiO1NQaJYZgJZFPuAbf95/DiKRBSTYIJ2FeGUc+B/6mPGcWP9dO3Q=="
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/string-width/node_modules/strip-ansi": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
      "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/stringify-object": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/stringify-object/-/stringify-object-3.3.0.tgz",
      "integrity": "sha512-rHqiFh1elqCQ9WPLIC8I0Q/g/wj5J1eMkyoiD6eoQApWHP0FtlK7rqnhmabL5VUY9JQCcqwwvlOaSuutekgyrw==",
      "dependencies": {
        "get-own-enumerable-property-symbols": "^3.0.0",
        "is-obj": "^1.0.1",
        "is-regexp": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom-string": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom-string/-/strip-bom-string-1.0.0.tgz",
      "integrity": "sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/style-to-object": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/style-to-object/-/style-to-object-0.3.0.tgz",
      "integrity": "sha512-CzFnRRXhzWIdItT3OmF8SQfWyahHhjq3HwcMNCNLn+N7klOOqPjMeG/4JSu77D7ypZdGvSzvkrbyeTMizz2VrA==",
      "dependencies": {
        "inline-style-parser": "0.1.1"
      }
    },
    "node_modules/stylehacks": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/stylehacks/-/stylehacks-5.1.1.tgz",
      "integrity": "sha512-sBpcd5Hx7G6seo7b1LkpttvTz7ikD0LlH5RmdcBNb6fFR0Fl7LQwHDFr300q4cwUqi+IYrFGmsIHieMBfnN/Bw==",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/svg-parser": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/svg-parser/-/svg-parser-2.0.4.tgz",
      "integrity": "sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ=="
    },
    "node_modules/svgo": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/svgo/-/svgo-2.8.0.tgz",
      "integrity": "sha512-+N/Q9kV1+F+UeWYoSiULYo4xYSDQlTgb+ayMobAXPwMnLvop7oxKMo9OzIrX5x3eS4L4f2UHhc9axXwY8DpChg==",
      "dependencies": {
        "@trysound/sax": "0.2.0",
        "commander": "^7.2.0",
        "css-select": "^4.1.3",
        "css-tree": "^1.1.3",
        "csso": "^4.2.0",
        "picocolors": "^1.0.0",
        "stable": "^0.1.8"
      },
      "bin": {
        "svgo": "bin/svgo"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/svgo/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/svgo/node_modules/css-select": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-4.3.0.tgz",
      "integrity": "sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^6.0.1",
        "domhandler": "^4.3.1",
        "domutils": "^2.8.0",
        "nth-check": "^2.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/svgo/node_modules/dom-serializer": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-1.4.1.tgz",
      "integrity": "sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.2.0",
        "entities": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/svgo/node_modules/domhandler": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-4.3.1.tgz",
      "integrity": "sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==",
      "dependencies": {
        "domelementtype": "^2.2.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/svgo/node_modules/domutils": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-2.8.0.tgz",
      "integrity": "sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==",
      "dependencies": {
        "dom-serializer": "^1.0.1",
        "domelementtype": "^2.2.0",
        "domhandler": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/svgo/node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/tapable": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz",
      "integrity": "sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/terser": {
      "version": "5.16.1",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.16.1.tgz",
      "integrity": "sha512-xvQfyfA1ayT0qdK47zskQgRZeWLoOQ8JQ6mIgRGVNwZKdQMU+5FkCBjmv4QjcrTzyZquRw2FVtlJSRUmMKQslw==",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.2",
        "acorn": "^8.5.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser-webpack-plugin": {
      "version": "5.3.6",
      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.6.tgz",
      "integrity": "sha512-kfLFk+PoLUQIbLmB1+PZDMRSZS99Mp+/MHqDNmMA6tOItzRt+Npe3E+fsMs5mfcM0wCtrrdU387UnV+vnSffXQ==",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.14",
        "jest-worker": "^27.4.5",
        "schema-utils": "^3.1.1",
        "serialize-javascript": "^6.0.0",
        "terser": "^5.14.1"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "uglify-js": {
          "optional": true
        }
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/jest-worker": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz",
      "integrity": "sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/schema-utils": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.1.1.tgz",
      "integrity": "sha512-Y5PQxS4ITlC+EahLuXaY86TXfR7Dc5lw294alXOq86JAHCihAIZfqv8nNCWvaEJvaC51uN9hbLGeV0cFBdH+Fw==",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/terser/node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw=="
    },
    "node_modules/thunky": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/thunky/-/thunky-1.1.0.tgz",
      "integrity": "sha512-eHY7nBftgThBqOyHGVN+l8gF0BucP09fMo0oO/Lb0w1OF80dJv+lDVpXG60WMQvkcxAkNybKsrEIE3ZtKGmPrA=="
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.1.tgz",
      "integrity": "sha512-AD5ih2NlSssTCwsMznbvwMZpJ1cbhkGd2uueNxzv2jDlEeZdU04JQfRnggJQ8DrcVBGjAsCKwFBbDlVNtEMlzw=="
    },
    "node_modules/tiny-warning": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tiny-warning/-/tiny-warning-1.0.3.tgz",
      "integrity": "sha512-lBN9zLN/oAf68o3zNXYrdCt1kP8WsiGW8Oo2ka41b2IM5JL/S1CTyX1rW0mb/zSuJun0ZUrDxx4sqvYS2FWzPA=="
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-readable-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/totalist": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/totalist/-/totalist-1.1.0.tgz",
      "integrity": "sha512-gduQwd1rOdDMGxFG1gEvhV88Oirdo2p+KjoYFU7k2g+i7n6AFFbDQ5kMPUsW0pNbfQsB/cwXvT1i4Bue0s9g5g==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/trim": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/trim/-/trim-0.0.1.tgz",
      "integrity": "sha512-YzQV+TZg4AxpKxaTHK3c3D+kRDCGVEE7LemdlQZoQXn0iennk10RsIoY6ikzAqJTc9Xjl9C1/waHom/J86ziAQ=="
    },
    "node_modules/trim-trailing-lines": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/trim-trailing-lines/-/trim-trailing-lines-1.1.4.tgz",
      "integrity": "sha512-rjUWSqnfTNrjbB9NQWfPMH/xRK1deHeGsHoVfpxJ++XeYXE0d6B1En37AHfw3jtfTU7dzMzZL2jjpe8Qb5gLIQ==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/trough": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/trough/-/trough-1.0.5.tgz",
      "integrity": "sha512-rvuRbTarPXmMb79SmzEp8aqXNKcK+y0XaB298IXueQ8I2PsrATcPBCSPyK/dDNa2iWOhKlfNnOjdAOTBU/nkFA==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/tslib": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.4.1.tgz",
      "integrity": "sha512-tGyy4dAjRIEwI7BzsB0lynWgOpfqjUdq91XXAlIWD2OwKBH7oCl/GZG/HT4BOHrTlPMOASlMQ7veyTqpmRcrNA=="
    },
    "node_modules/type-fest": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-2.19.0.tgz",
      "integrity": "sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/type-is/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/type-is/node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/typescript": {
      "version": "4.9.4",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.9.4.tgz",
      "integrity": "sha512-Uz+dTXYzxXXbsFpM86Wh3dKCxrQqUcVMxwU54orwlJjOpO3ao8L7j5lH+dWfTwgCwIuM9GQ2kvVotzYJMXTBZg==",
      "peer": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/ua-parser-js": {
      "version": "0.7.32",
      "resolved": "https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.32.tgz",
      "integrity": "sha512-f9BESNVhzlhEFf2CHMSj40NWOjYPl1YKYbrvIr/hFTDEmLq7SRbWvm7FcdcpCYT95zrOhC7gZSxjdnnTpBcwVw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/ua-parser-js"
        },
        {
          "type": "paypal",
          "url": "https://paypal.me/faisalman"
        }
      ],
      "engines": {
        "node": "*"
      }
    },
    "node_modules/unherit": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/unherit/-/unherit-1.1.3.tgz",
      "integrity": "sha512-Ft16BJcnapDKp0+J/rqFC3Rrk6Y/Ng4nzsC028k2jdDII/rdZ7Wd3pPT/6+vIIxRagwRc9K0IUX0Ra4fKvw+WQ==",
      "dependencies": {
        "inherits": "^2.0.0",
        "xtend": "^4.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/unicode-canonical-property-names-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.0.tgz",
      "integrity": "sha512-yY5PpDlfVIU5+y/BSCxAJRBIS1Zc2dDG3Ujq+sR0U+JjUevW2JhocOF+soROYDSaAezOzOKuyyixhD6mBknSmQ==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz",
      "integrity": "sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==",
      "dependencies": {
        "unicode-canonical-property-names-ecmascript": "^2.0.0",
        "unicode-property-aliases-ecmascript": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-value-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.1.0.tgz",
      "integrity": "sha512-qxkjQt6qjg/mYscYMC0XKRn3Rh0wFPlfxB0xkt9CfyTvpX1Ra0+rAmdX2QyAobptSEvuy4RtpPRui6XkV+8wjA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-property-aliases-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz",
      "integrity": "sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unified": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/unified/-/unified-9.2.2.tgz",
      "integrity": "sha512-Sg7j110mtefBD+qunSLO1lqOEKdrwBFBrR6Qd8f4uwkhWNlbkaqwHse6e7QvD3AP/MNoJdEDLaf8OxYyoWgorQ==",
      "dependencies": {
        "bail": "^1.0.0",
        "extend": "^3.0.0",
        "is-buffer": "^2.0.0",
        "is-plain-obj": "^2.0.0",
        "trough": "^1.0.0",
        "vfile": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/unist-builder": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/unist-builder/-/unist-builder-2.0.3.tgz",
      "integrity": "sha512-f98yt5pnlMWlzP539tPc4grGMsFaQQlP/vM396b00jngsiINumNmsY8rkXjfoi1c6QaM8nQ3vaGDuoKWbe/1Uw==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-generated": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/unist-util-generated/-/unist-util-generated-1.1.6.tgz",
      "integrity": "sha512-cln2Mm1/CZzN5ttGK7vkoGw+RZ8VcUH6BtGbq98DDtRGquAAOXig1mrBQYelOwMXYS8rK+vZDyyojSjp7JX+Lg==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-is": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-4.1.0.tgz",
      "integrity": "sha512-ZOQSsnce92GrxSqlnEEseX0gi7GH9zTJZ0p9dtu87WRb/37mMPO2Ilx1s/t9vBHrFhbgweUwb+t7cIn5dxPhZg==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-position": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/unist-util-position/-/unist-util-position-3.1.0.tgz",
      "integrity": "sha512-w+PkwCbYSFw8vpgWD0v7zRCl1FpY3fjDSQ3/N/wNd9Ffa4gPi8+4keqt99N3XW6F99t/mUzp2xAhNmfKWp95QA==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-remove": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unist-util-remove/-/unist-util-remove-2.1.0.tgz",
      "integrity": "sha512-J8NYPyBm4baYLdCbjmf1bhPu45Cr1MWTm77qd9istEkzWpnN6O9tMsEbB2JhNnBCqGENRqEWomQ+He6au0B27Q==",
      "dependencies": {
        "unist-util-is": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-remove-position": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/unist-util-remove-position/-/unist-util-remove-position-2.0.1.tgz",
      "integrity": "sha512-fDZsLYIe2uT+oGFnuZmy73K6ZxOPG/Qcm+w7jbEjaFcJgbQ6cqjs/eSPzXhsmGpAsWPkqZM9pYjww5QTn3LHMA==",
      "dependencies": {
        "unist-util-visit": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-stringify-position": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/unist-util-stringify-position/-/unist-util-stringify-position-2.0.3.tgz",
      "integrity": "sha512-3faScn5I+hy9VleOq/qNbAd6pAx7iH5jYBMS9I1HgQVijz/4mv5Bvw5iw1sC/90CODiKo81G/ps8AJrISn687g==",
      "dependencies": {
        "@types/unist": "^2.0.2"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-visit": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-2.0.3.tgz",
      "integrity": "sha512-iJ4/RczbJMkD0712mGktuGpm/U4By4FfDonL7N/9tATGIF4imikjOuagyMY53tnZq3NP6BcmlrHhEKAfGWjh7Q==",
      "dependencies": {
        "@types/unist": "^2.0.0",
        "unist-util-is": "^4.0.0",
        "unist-util-visit-parents": "^3.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-visit-parents": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-3.1.1.tgz",
      "integrity": "sha512-1KROIZWo6bcMrZEwiH2UrXDyalAa0uqzWCxCJj6lPOvTve2WkfgCytoDTPaMnodXh1WrXOq0haVYHj99ynJlsg==",
      "dependencies": {
        "@types/unist": "^2.0.0",
        "unist-util-is": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.10.tgz",
      "integrity": "sha512-OztqDenkfFkbSG+tRxBeAnCVPckDBcvibKd35yDONx6OU8N7sqgwc7rCbkJ/WcYtVRZ4ba68d6byhC21GFh7sQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "dependencies": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "browserslist-lint": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/update-notifier": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/update-notifier/-/update-notifier-5.1.0.tgz",
      "integrity": "sha512-ItnICHbeMh9GqUy31hFPrD1kcuZ3rpxDZbf4KUDavXwS0bW5m7SLbDQpGX3UYr072cbrF5hFUs3r5tUsPwjfHw==",
      "dependencies": {
        "boxen": "^5.0.0",
        "chalk": "^4.1.0",
        "configstore": "^5.0.1",
        "has-yarn": "^2.1.0",
        "import-lazy": "^2.1.0",
        "is-ci": "^2.0.0",
        "is-installed-globally": "^0.4.0",
        "is-npm": "^5.0.0",
        "is-yarn-global": "^0.3.0",
        "latest-version": "^5.1.0",
        "pupa": "^2.1.1",
        "semver": "^7.3.4",
        "semver-diff": "^3.1.1",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/yeoman/update-notifier?sponsor=1"
      }
    },
    "node_modules/update-notifier/node_modules/boxen": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-5.1.2.tgz",
      "integrity": "sha512-9gYgQKXx+1nP8mP7CzFyaUARhg7D3n1dF/FnErWmu9l6JvGpNUN278h0aSb+QjoiKSWG+iZ3uHrcqk0qrY9RQQ==",
      "dependencies": {
        "ansi-align": "^3.0.0",
        "camelcase": "^6.2.0",
        "chalk": "^4.1.0",
        "cli-boxes": "^2.2.1",
        "string-width": "^4.2.2",
        "type-fest": "^0.20.2",
        "widest-line": "^3.1.0",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/update-notifier/node_modules/cli-boxes": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-2.2.1.tgz",
      "integrity": "sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw==",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/update-notifier/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/update-notifier/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/update-notifier/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/update-notifier/node_modules/widest-line": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-3.1.0.tgz",
      "integrity": "sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==",
      "dependencies": {
        "string-width": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/update-notifier/node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/uri-js/node_modules/punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/url-loader": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/url-loader/-/url-loader-4.1.1.tgz",
      "integrity": "sha512-3BTV812+AVHHOJQO8O5MkWgZ5aosP7GnROJwvzLS9hWDj00lZ6Z0wNak423Lp9PBZN05N+Jk/N5Si8jRAlGyWA==",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "mime-types": "^2.1.27",
        "schema-utils": "^3.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "file-loader": "*",
        "webpack": "^4.0.0 || ^5.0.0"
      },
      "peerDependenciesMeta": {
        "file-loader": {
          "optional": true
        }
      }
    },
    "node_modules/url-loader/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/url-loader/node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/url-loader/node_modules/schema-utils": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.1.1.tgz",
      "integrity": "sha512-Y5PQxS4ITlC+EahLuXaY86TXfR7Dc5lw294alXOq86JAHCihAIZfqv8nNCWvaEJvaC51uN9hbLGeV0cFBdH+Fw==",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/url-parse-lax": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
      "integrity": "sha512-NjFKA0DidqPa5ciFcSrXnAltTtzz84ogy+NebPvfEgAck0+TNg4UJ4IN+fB7zRZfbgUf0syOo9MDxFkDSMuFaQ==",
      "dependencies": {
        "prepend-http": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/use-composed-ref": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/use-composed-ref/-/use-composed-ref-1.3.0.tgz",
      "integrity": "sha512-GLMG0Jc/jiKov/3Ulid1wbv3r54K9HlMW29IWcDFPEqFkSO2nS0MuefWgMJpeHQ9YJeXDL3ZUF+P3jdXlZX/cQ==",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/use-isomorphic-layout-effect": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/use-isomorphic-layout-effect/-/use-isomorphic-layout-effect-1.1.2.tgz",
      "integrity": "sha512-49L8yCO3iGT/ZF9QttjwLF/ZD9Iwto5LnH5LmEdk/6cFmXddqi2ulF0edxTwjj+7mqvpVVGQWvbXZdn32wRSHA==",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/use-latest": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/use-latest/-/use-latest-1.2.1.tgz",
      "integrity": "sha512-xA+AVm/Wlg3e2P/JiItTziwS7FK92LWrDB0p+hgXloIMuVCeJJ8v6f0eeHyPZaJrM+usM1FkFfbNCrJGs8A/zw==",
      "dependencies": {
        "use-isomorphic-layout-effect": "^1.1.1"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utila": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/utila/-/utila-0.4.0.tgz",
      "integrity": "sha512-Z0DbgELS9/L/75wZbro8xAnT50pBVFQZ+hUEueGDU5FN51YSCYM+jdxsfCiHjwNP/4LCDD0i/graKpeBnOXKRA=="
    },
    "node_modules/utility-types": {
      "version": "3.10.0",
      "resolved": "https://registry.npmjs.org/utility-types/-/utility-types-3.10.0.tgz",
      "integrity": "sha512-O11mqxmi7wMKCo6HKFt5AhO4BwY3VV68YU07tgxfz8zJTIxr4BpsezN49Ffwy9j3ZpwwJp4fkRwjRzq3uWE6Rg==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/value-equal": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/value-equal/-/value-equal-1.0.1.tgz",
      "integrity": "sha512-NOJ6JZCAWr0zlxZt+xqCHNTEKOsrks2HQd4MqhP1qy4z1SkbEP467eNx6TgDKXMvUOb+OENfJCZwM+16n7fRfw=="
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/vfile": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/vfile/-/vfile-4.2.1.tgz",
      "integrity": "sha512-O6AE4OskCG5S1emQ/4gl8zK586RqA3srz3nfK/Viy0UPToBc5Trp9BVFb1u0CjsKrAWwnpr4ifM/KBXPWwJbCA==",
      "dependencies": {
        "@types/unist": "^2.0.0",
        "is-buffer": "^2.0.0",
        "unist-util-stringify-position": "^2.0.0",
        "vfile-message": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/vfile-location": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/vfile-location/-/vfile-location-3.2.0.tgz",
      "integrity": "sha512-aLEIZKv/oxuCDZ8lkJGhuhztf/BW4M+iHdCwglA/eWc+vtuRFJj8EtgceYFX4LRjOhCAAiNHsKGssC6onJ+jbA==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/vfile-message": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/vfile-message/-/vfile-message-2.0.4.tgz",
      "integrity": "sha512-DjssxRGkMvifUOJre00juHoP9DPWuzjxKuMDrhNbk2TdaYYBNMStsNhEOt3idrtI12VQYM/1+iM0KOzXi4pxwQ==",
      "dependencies": {
        "@types/unist": "^2.0.0",
        "unist-util-stringify-position": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/wait-on": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/wait-on/-/wait-on-6.0.1.tgz",
      "integrity": "sha512-zht+KASY3usTY5u2LgaNqn/Cd8MukxLGjdcZxT2ns5QzDmTFc4XoWBgC+C/na+sMRZTuVygQoMYwdcVjHnYIVw==",
      "dependencies": {
        "axios": "^0.25.0",
        "joi": "^17.6.0",
        "lodash": "^4.17.21",
        "minimist": "^1.2.5",
        "rxjs": "^7.5.4"
      },
      "bin": {
        "wait-on": "bin/wait-on"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/watchpack": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.0.tgz",
      "integrity": "sha512-Lcvm7MGST/4fup+ifyKi2hjyIAwcdI4HRgtvTpIUxBRhB+RFtUh8XtDOxUfctVCnhVi+QQj49i91OyvzkJl6cg==",
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/wbuf": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/wbuf/-/wbuf-1.7.3.tgz",
      "integrity": "sha512-O84QOnr0icsbFGLS0O3bI5FswxzRr8/gHwWkDlQFskhSPryQXvrTMxjxGP4+iWYoauLoBvfDpkrOauZ+0iZpDA==",
      "dependencies": {
        "minimalistic-assert": "^1.0.0"
      }
    },
    "node_modules/web-namespaces": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/web-namespaces/-/web-namespaces-1.1.4.tgz",
      "integrity": "sha512-wYxSGajtmoP4WxfejAPIr4l0fVh+jeMXZb08wNc0tMg6xsfZXj3cECqIK0G7ZAqUq0PP8WlMDtaOGVBTAWztNw==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/webpack": {
      "version": "5.75.0",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.75.0.tgz",
      "integrity": "sha512-piaIaoVJlqMsPtX/+3KTTO6jfvrSYgauFVdt8cr9LTHKmcq/AMd4mhzsiP7ZF/PGRNPGA8336jldh9l2Kt2ogQ==",
      "dependencies": {
        "@types/eslint-scope": "^3.7.3",
        "@types/estree": "^0.0.51",
        "@webassemblyjs/ast": "1.11.1",
        "@webassemblyjs/wasm-edit": "1.11.1",
        "@webassemblyjs/wasm-parser": "1.11.1",
        "acorn": "^8.7.1",
        "acorn-import-assertions": "^1.7.6",
        "browserslist": "^4.14.5",
        "chrome-trace-event": "^1.0.2",
        "enhanced-resolve": "^5.10.0",
        "es-module-lexer": "^0.9.0",
        "eslint-scope": "5.1.1",
        "events": "^3.2.0",
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.2.9",
        "json-parse-even-better-errors": "^2.3.1",
        "loader-runner": "^4.2.0",
        "mime-types": "^2.1.27",
        "neo-async": "^2.6.2",
        "schema-utils": "^3.1.0",
        "tapable": "^2.1.1",
        "terser-webpack-plugin": "^5.1.3",
        "watchpack": "^2.4.0",
        "webpack-sources": "^3.2.3"
      },
      "bin": {
        "webpack": "bin/webpack.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-bundle-analyzer": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/webpack-bundle-analyzer/-/webpack-bundle-analyzer-4.7.0.tgz",
      "integrity": "sha512-j9b8ynpJS4K+zfO5GGwsAcQX4ZHpWV+yRiHDiL+bE0XHJ8NiPYLTNVQdlFYWxtpg9lfAQNlwJg16J9AJtFSXRg==",
      "dependencies": {
        "acorn": "^8.0.4",
        "acorn-walk": "^8.0.0",
        "chalk": "^4.1.0",
        "commander": "^7.2.0",
        "gzip-size": "^6.0.0",
        "lodash": "^4.17.20",
        "opener": "^1.5.2",
        "sirv": "^1.0.7",
        "ws": "^7.3.1"
      },
      "bin": {
        "webpack-bundle-analyzer": "lib/bin/analyzer.js"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/webpack-bundle-analyzer/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/webpack-dev-middleware": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/webpack-dev-middleware/-/webpack-dev-middleware-5.3.3.tgz",
      "integrity": "sha512-hj5CYrY0bZLB+eTO+x/j67Pkrquiy7kWepMHmUMoPsmcUaeEnQJqFzHJOyxgWlq746/wUuA64p9ta34Kyb01pA==",
      "dependencies": {
        "colorette": "^2.0.10",
        "memfs": "^3.4.3",
        "mime-types": "^2.1.31",
        "range-parser": "^1.2.1",
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/webpack-dev-middleware/node_modules/ajv": {
      "version": "8.11.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.11.2.tgz",
      "integrity": "sha512-E4bfmKAhGiSTvMfL1Myyycaub+cUEU2/IvpylXkUu7CHBkBj1f/ikdzbD7YQ6FKUbixDxeYvB/xY4fvyroDlQg==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/webpack-dev-middleware/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/webpack-dev-middleware/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="
    },
    "node_modules/webpack-dev-middleware/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/webpack-dev-middleware/node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/webpack-dev-middleware/node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/webpack-dev-middleware/node_modules/schema-utils": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.0.0.tgz",
      "integrity": "sha512-1edyXKgh6XnJsJSQ8mKWXnN/BVaIbFMLpouRUrXgVq7WYne5kw3MW7UPhO44uRXQSIpTSXoJbmrR2X0w9kUTyg==",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.8.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/webpack-dev-server": {
      "version": "4.11.1",
      "resolved": "https://registry.npmjs.org/webpack-dev-server/-/webpack-dev-server-4.11.1.tgz",
      "integrity": "sha512-lILVz9tAUy1zGFwieuaQtYiadImb5M3d+H+L1zDYalYoDl0cksAB1UNyuE5MMWJrG6zR1tXkCP2fitl7yoUJiw==",
      "dependencies": {
        "@types/bonjour": "^3.5.9",
        "@types/connect-history-api-fallback": "^1.3.5",
        "@types/express": "^4.17.13",
        "@types/serve-index": "^1.9.1",
        "@types/serve-static": "^1.13.10",
        "@types/sockjs": "^0.3.33",
        "@types/ws": "^8.5.1",
        "ansi-html-community": "^0.0.8",
        "bonjour-service": "^1.0.11",
        "chokidar": "^3.5.3",
        "colorette": "^2.0.10",
        "compression": "^1.7.4",
        "connect-history-api-fallback": "^2.0.0",
        "default-gateway": "^6.0.3",
        "express": "^4.17.3",
        "graceful-fs": "^4.2.6",
        "html-entities": "^2.3.2",
        "http-proxy-middleware": "^2.0.3",
        "ipaddr.js": "^2.0.1",
        "open": "^8.0.9",
        "p-retry": "^4.5.0",
        "rimraf": "^3.0.2",
        "schema-utils": "^4.0.0",
        "selfsigned": "^2.1.1",
        "serve-index": "^1.9.1",
        "sockjs": "^0.3.24",
        "spdy": "^4.0.2",
        "webpack-dev-middleware": "^5.3.1",
        "ws": "^8.4.2"
      },
      "bin": {
        "webpack-dev-server": "bin/webpack-dev-server.js"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.37.0 || ^5.0.0"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-dev-server/node_modules/ajv": {
      "version": "8.11.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.11.2.tgz",
      "integrity": "sha512-E4bfmKAhGiSTvMfL1Myyycaub+cUEU2/IvpylXkUu7CHBkBj1f/ikdzbD7YQ6FKUbixDxeYvB/xY4fvyroDlQg==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/webpack-dev-server/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/webpack-dev-server/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="
    },
    "node_modules/webpack-dev-server/node_modules/schema-utils": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.0.0.tgz",
      "integrity": "sha512-1edyXKgh6XnJsJSQ8mKWXnN/BVaIbFMLpouRUrXgVq7WYne5kw3MW7UPhO44uRXQSIpTSXoJbmrR2X0w9kUTyg==",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.8.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/webpack-dev-server/node_modules/ws": {
      "version": "8.11.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.11.0.tgz",
      "integrity": "sha512-HPG3wQd9sNQoT9xHyNCXoDUa+Xw/VevmY9FoHyQ+g+rrMn4j6FB4np7Z0OhdTgjx6MgQLK7jwSy1YecU1+4Asg==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-merge": {
      "version": "5.8.0",
      "resolved": "https://registry.npmjs.org/webpack-merge/-/webpack-merge-5.8.0.tgz",
      "integrity": "sha512-/SaI7xY0831XwP6kzuwhKWVKDP9t1QY1h65lAFLbZqMPIuYcD9QAW4u9STIbU9kaJbPBB/geU/gLr1wDjOhQ+Q==",
      "dependencies": {
        "clone-deep": "^4.0.1",
        "wildcard": "^2.0.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz",
      "integrity": "sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/webpack/node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/webpack/node_modules/schema-utils": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.1.1.tgz",
      "integrity": "sha512-Y5PQxS4ITlC+EahLuXaY86TXfR7Dc5lw294alXOq86JAHCihAIZfqv8nNCWvaEJvaC51uN9hbLGeV0cFBdH+Fw==",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/webpackbar": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/webpackbar/-/webpackbar-5.0.2.tgz",
      "integrity": "sha512-BmFJo7veBDgQzfWXl/wwYXr/VFus0614qZ8i9znqcl9fnEdiVkdbi0TedLQ6xAK92HZHDJ0QmyQ0fmuZPAgCYQ==",
      "dependencies": {
        "chalk": "^4.1.0",
        "consola": "^2.15.3",
        "pretty-time": "^1.1.0",
        "std-env": "^3.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "peerDependencies": {
        "webpack": "3 || 4 || 5"
      }
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/widest-line": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-4.0.1.tgz",
      "integrity": "sha512-o0cyEG0e8GPzT4iGHphIOh0cJOV8fivsXxddQasHPHfoZf1ZexrfeA21w2NaEN1RHE+fXlfISmOE8R9N3u3Qig==",
      "dependencies": {
        "string-width": "^5.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/wildcard": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/wildcard/-/wildcard-2.0.0.tgz",
      "integrity": "sha512-JcKqAHLPxcdb9KM49dufGXn2x3ssnfjbcaQdLlfZsL9rH9wgDQjUtDxbo8NE0F6SFvydeu1VhZe7hZuHsB2/pw=="
    },
    "node_modules/wrap-ansi": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.0.1.tgz",
      "integrity": "sha512-QFF+ufAqhoYHvoHdajT/Po7KoXVBPXS2bgjIam5isfWJPfIOnQZ50JtUiVvCv/sjgacf3yRrt2ZKUZ/V4itN4g==",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/strip-ansi": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
      "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/ws": {
      "version": "7.5.9",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.9.tgz",
      "integrity": "sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xdg-basedir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-4.0.0.tgz",
      "integrity": "sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/xml-js": {
      "version": "1.6.11",
      "resolved": "https://registry.npmjs.org/xml-js/-/xml-js-1.6.11.tgz",
      "integrity": "sha512-7rVi2KMfwfWFl+GpPg6m80IVMWXLRjO+PxTq7V2CDhoGak0wzYzFgUY2m4XJ47OGdXd8eLE8EmwfAmdjw7lC1g==",
      "dependencies": {
        "sax": "^1.2.4"
      },
      "bin": {
        "xml-js": "bin/cli.js"
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g=="
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zwitch": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/zwitch/-/zwitch-1.0.5.tgz",
      "integrity": "sha512-V50KMwwzqJV0NpZIZFwfOD5/lyny3WlSzRiXgA0G7VUnRlqttta1L6UQIHzd6EuBY/cHGfwTIck7w1yH6Q5zUw==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    }
  }
}



================================================
File: website/package.json
================================================
{
  "scripts": {
    "examples": "docusaurus-examples",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "publish-gh-pages": "docusaurus-publish",
    "write-translations": "docusaurus-write-translations",
    "version": "docusaurus-version",
    "rename-version": "docusaurus-rename-version",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "docusaurus": "docusaurus"
  },
  "devDependencies": {},
  "dependencies": {
    "@docusaurus/core": "2.2.0",
    "@docusaurus/preset-classic": "2.2.0",
    "clsx": "^1.1.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  }
}


================================================
File: website/sidebars.json
================================================
{
  "docs": {
    "Overview": [
      "overview"
    ],
    "Get Started": [
      "tutorials/your-first-node-app",
      "tutorials/your-first-web-app",
      "resources"
    ],
    "Working with the SDK": [
      "guides/ethics",
      "guides/importing",
      "guides/signal",
      "guides/training"
    ],
    "API Guides": [
      "api/device-selection",
      "api/info",
      "api/status",
      "api/authentication",
      "api/oauth",
      "api/settings",
      "api/signal-quality",
      "api/brainwaves",
      "api/focus",
      "api/calm",
      "api/kinesis",
      "api/predictions",
      "api/streaming",
      "api/osc",
      "api/haptics",
      "api/disconnect",
      "api/bluetooth-web",
      "api/bluetooth-react-native",
      "api/v6"
    ]
  },
  "@neurosity/sdk": {
    "Introduction": [
      "reference/index"
    ],
    "Classes": [
      "reference/classes/neurosity"
    ],
    "Enums": [
      "reference/enums/streaming_mode"
    ],
    "Interfaces": [
      "reference/interfaces/accelerometer",
      "reference/interfaces/calm",
      "reference/interfaces/deviceinfo",
      "reference/interfaces/devicestatus",
      "reference/interfaces/focus",
      "reference/interfaces/kinesis",
      "reference/interfaces/psd",
      "reference/interfaces/powerbyband",
      "reference/interfaces/sdkoptions",
      "reference/interfaces/settings",
      "reference/interfaces/signalquality"
    ]
  }
}


================================================
File: website/src/components/StreamingModes.js
================================================
import React from "react";

const tagContainerStyle = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  border: "1px solid gray",
  borderRadius: 6,
  padding: "1px 8px",
  marginRight: 10,
  fontSize: 14
};

const tagTextStyle = {
  marginLeft: 6
};

export default function StreamingModes({ wifi = false, bluetooth = false }) {
  if (!wifi && !bluetooth) {
    return null;
  }

  return (
    <div style={{ marginBottom: 15 }}>
      <span style={{ marginRight: 10 }}>Streaming modes:</span>
      {wifi ? (
        <span style={tagContainerStyle}>
          <WifiIcon />
          <span style={tagTextStyle}>Wi-Fi</span>
        </span>
      ) : null}
      {bluetooth ? (
        <span style={tagContainerStyle}>
          <BluetoothIcon />
          <span style={tagTextStyle}>Bluetooth</span>
        </span>
      ) : null}
    </div>
  );
}

function WifiIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="feather feather-wifi"
    >
      <path d="M5 12.55a11 11 0 0 1 14.08 0"></path>
      <path d="M1.42 9a16 16 0 0 1 21.16 0"></path>
      <path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path>
      <line x1="12" y1="20" x2="12.01" y2="20"></line>
    </svg>
  );
}

function BluetoothIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="feather feather-bluetooth"
    >
      <polyline points="6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"></polyline>
    </svg>
  );
}



================================================
File: website/src/css/customTheme.css
================================================
/* your custom css */
@font-face {
  font-family: "Eina02-Regular";
  src: url("/static/fonts/Eina02-Regular.ttf");
  font-style: normal;
  font-weight: 400;
  font-display: swap;
}

@font-face {
  font-family: "Eina02-SemiBold";
  src: url("/static/fonts/Eina02-SemiBold.ttf");
  font-style: medium;
  font-weight: 500;
  font-display: swap;
}

:root {
  --ifm-font-family-base: "Eina02-Regular", Helvetica, Arial, sans-serif;
  --ifm-color-primary-lightest: #000000;
  --ifm-color-primary-lighter: #000000;
  --ifm-color-primary-light: #000000;
  --ifm-color-primary: #000000;
  --ifm-color-primary-dark: #000000;
  --ifm-color-primary-darker: #000000;
  --ifm-color-primary-darkest: #000000;
  --ifm-h1-font-size: 55px !important;
  --ifm-font-size-base: 18px;
}

html[data-theme="dark"] {
  --ifm-background-color: #000000;
  --ifm-background-surface-color: #090909;
  --ifm-color-primary: #2ac7dc;
  --ifm-color-primary-dark: #21b7cb;
  --ifm-color-primary-darker: #1facbf;
  --ifm-color-primary-darkest: #1a8e9e;
  --ifm-color-primary-light: #41cde0;
  --ifm-color-primary-lighter: #4cd0e2;
  --ifm-color-primary-lightest: #6ed9e7;
  --ifm-footer-background-color: #000000;
  --docusaurus-highlighted-code-line-bg: rgba(255, 255, 255, 0.05);
  --ifm-pre-background: #0a0d0f !important;
  --ifm-font-color-base: rgb(92, 113, 123);
  --ifm-heading-color: rgb(42, 199, 220);
  --ifm-navbar-link-color: #ffffff;
}

.markdown {
  --ifm-link-decoration: underline;
  --ifm-link-color: rgb(92, 113, 123);
}

.footer {
  margin-top: 50px;
}

.footer__bottom {
  margin-top: 100px;
  margin-bottom: 50px;
}

.navbar__brand {
  margin-right: 2rem;
}

.theme-doc-sidebar-menu {
  padding-bottom: 100px;
}

.prism-code {
  background-color: rgb(0, 0, 0) !important;
}

.theme-doc-markdown img {
  border-radius: 6px;
}



================================================
File: website/src/pages/index.js
================================================
import React from "react";
import { Redirect } from "react-router-dom";

export default () => {
  return <Redirect to="/docs/overview" />;
};



================================================
File: website/static/css/code-block-buttons.css
================================================
/* "Copy" code block button */
pre {
  position: relative;
}

pre .btnIcon {
  position: absolute;
  top: 4px;
  z-index: 2;
  cursor: pointer;
  border: 1px solid transparent;
  padding: 0;
  color: #fff;
  background-color: transparent;
  height: 30px;
  transition: all 0.25s ease-out;
}

pre .btnIcon:hover {
  text-decoration: none;
}

.btnIcon__body {
  align-items: center;
  display: flex;
}

.btnIcon svg {
  fill: currentColor;
  margin-right: 0.4em;
}

.btnIcon__label {
  font-size: 11px;
}

.btnClipboard {
  right: 10px;
}



================================================
File: website/static/css/custom.css
================================================
body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 18px;
}

p {
  margin-bottom: 25px;
}

h1 {
  font-size: 55px;
  font-weight: 700;
  line-height: 55px;
  letter-spacing: -0.5px;
  margin-bottom: 40px;
}

h2 {
  font-size: 35px;
  font-weight: 700;
  letter-spacing: -0.5px;
  margin-bottom: 30px;
}

h3 {
  font-size: 24px;
  font-weight: 700;
}

h4 {
  font-size: 21px;
  font-weight: 700;
}

h5 {
  font-size: 18px;
  font-weight: 700;
}

a {
  color: #4fb0ff;
}

.fixedHeaderContainer header .headerTitleWithLogo,
.toc .toggleNav .navBreadcrumb h2 {
  letter-spacing: initial;
}

.headerTitleWithLogo {
  color: rgb(158, 248, 253);
  font-weight: 500;
}

@media (max-width: 736px) {
  h1 {
    font-size: 40px;
    line-height: 45px;
  }

  h2 {
    font-size: 20px;
  }

  h3 {
    font-size: 18px;
  }

  h4 {
    font-size: 16px;
  }

  h5 {
    font-size: 16px;
  }
}

.onPageNav ul li {
  font-size: 16px;
  line-height: 18px;
}

.fixedHeaderContainer {
  min-height: 62px;
  padding: 14px 0;
}

.navigationSlider .slidingNav ul li a:hover,
.navigationSlider .slidingNav ul li.siteNavItemActive a,
.navigationSlider .slidingNav ul li.siteNavGroupActive a {
  color: rgb(158, 248, 253);
}

.button {
  border: 2px solid #000000;
  font-weight: 500;
  padding: 10px 16px;
}

.mainContainer {
  padding: 80px 0;
}

.homeContainer .homeWrapper {
  padding: 120px 10px;
}

@media screen and (min-width: 1024px) {
  .navPusher {
    padding-top: 63px;
  }
}



================================================
File: website/static/fonts/Eina02-Regular.ttf
================================================
[Non-text file]


================================================
File: website/static/fonts/Eina02-SemiBold.ttf
================================================
[Non-text file]




================================================
File: website/static/js/code-block-buttons.js
================================================
window.addEventListener("load", () => {
  const button = (label, ariaLabel, icon, className) => {
    const btn = document.createElement("button");
    btn.classList.add("btnIcon", className);
    btn.setAttribute("type", "button");
    btn.setAttribute("aria-label", ariaLabel);
    btn.innerHTML =
      '<div class="btnIcon__body">' +
      icon +
      '<strong class="btnIcon__label">' +
      label +
      "</strong>" +
      "</div>";
    return btn;
  };

  const addButtons = (codeBlockSelector, btn) => {
    document.querySelectorAll(codeBlockSelector).forEach((code) => {
      code.parentNode.appendChild(btn.cloneNode(true));
    });
  };

  const copyIcon =
    '<svg width="12" height="12" viewBox="340 364 14 15" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" d="M342 375.974h4v.998h-4v-.998zm5-5.987h-5v.998h5v-.998zm2 2.994v-1.995l-3 2.993 3 2.994v-1.996h5v-1.995h-5zm-4.5-.997H342v.998h2.5v-.997zm-2.5 2.993h2.5v-.998H342v.998zm9 .998h1v1.996c-.016.28-.11.514-.297.702-.187.187-.422.28-.703.296h-10c-.547 0-1-.452-1-.998v-10.976c0-.546.453-.998 1-.998h3c0-1.107.89-1.996 2-1.996 1.11 0 2 .89 2 1.996h3c.547 0 1 .452 1 .998v4.99h-1v-2.995h-10v8.98h10v-1.996zm-9-7.983h8c0-.544-.453-.996-1-.996h-1c-.547 0-1-.453-1-.998 0-.546-.453-.998-1-.998-.547 0-1 .452-1 .998 0 .545-.453.998-1 .998h-1c-.547 0-1 .452-1 .997z" fill-rule="evenodd"/></svg>';

  addButtons(
    ".hljs",
    button("Copy", "Copy code to clipboard", copyIcon, "btnClipboard")
  );

  const clipboard = new ClipboardJS(".btnClipboard", {
    target: function (trigger) {
      return trigger.parentNode.querySelector("code");
    },
  });

  clipboard.on("success", (event) => {
    event.clearSelection();
    const textEl = event.trigger.querySelector(".btnIcon__label");
    textEl.textContent = "Copied";
    setTimeout(() => (textEl.textContent = "Copy"), 2000);
  });
});



================================================
File: .devcontainer/Dockerfile
================================================
FROM mcr.microsoft.com/devcontainers/javascript-node:18

# Install additional OS packages
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
  && apt-get -y install --no-install-recommends \
  python3-setuptools \
  build-essential \
  && apt-get clean -y \
  && rm -rf /var/lib/apt/lists/*

# [Optional] Uncomment if you want to install more global node packages
# RUN su node -c "npm install -g <your-package-list-here>" 


================================================
File: .devcontainer/devcontainer.json
================================================
{
  "name": "Node.js Development",
  "image": "mcr.microsoft.com/devcontainers/javascript-node:18",
  "features": {
    "ghcr.io/devcontainers/features/python:1": {}
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode"
      ]
    }
  },
  "postCreateCommand": "npm install",
  "remoteUser": "node"
} 


================================================
File: .github/workflows/node.js.yml
================================================
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test


